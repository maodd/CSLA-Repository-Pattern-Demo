<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Csla</name>
    </assembly>
    <members>
        <member name="T:Csla.Wpf.ObjectStatus">
            <summary>
            Container for other UI controls that exposes
            various status values from the CSLA .NET
            business object acting as DataContext.
            </summary>
            <remarks>
            This control provides access to the IsDirty,
            IsNew, IsDeleted, IsValid and IsSavable properties
            of a business object. The purpose behind this
            control is to expose those properties in a way
            that supports WFP data binding against those
            values.
            </remarks>
        </member>
        <member name="T:Csla.Wpf.DataDecoratorBase">
            <summary>
            Base class for creating WPF panel
            controls that react when the DataContext,
            data object and data property values
            are changed.
            </summary>
        </member>
        <member name="M:Csla.Wpf.DataDecoratorBase.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Wpf.DataDecoratorBase.Panel_DataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle case where the DataContext for the
            control has changed.
            </summary>
        </member>
        <member name="M:Csla.Wpf.DataDecoratorBase.DataProvider_DataChanged(System.Object,System.EventArgs)">
            <summary>
            Handle case where the Data property of the
            DataContext (a DataSourceProvider) has changed.
            </summary>
        </member>
        <member name="M:Csla.Wpf.DataDecoratorBase.DataPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This method is called when a property
            of the data object to which the 
            control is bound has changed.
            </summary>
        </member>
        <member name="M:Csla.Wpf.DataDecoratorBase.DataBindingListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This method is called if the data
            object is an IBindingList, and the 
            ListChanged event was raised by
            the data object.
            </summary>
        </member>
        <member name="M:Csla.Wpf.DataDecoratorBase.DataObservableCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method is called if the data
            object is an INotifyCollectionChanged, 
            and the CollectionChanged event was 
            raised by the data object.
            </summary>
        </member>
        <member name="M:Csla.Wpf.DataDecoratorBase.DataObjectChanged">
            <summary>
            This method is called when the data
            object to which the control is bound
            has changed.
            </summary>
        </member>
        <member name="M:Csla.Wpf.DataDecoratorBase.FindChildBindings">
            <summary>
            Scans all child controls of this panel
            for object bindings, and calls
            <see cref="M:Csla.Wpf.DataDecoratorBase.FoundBinding(System.Windows.Data.Binding,System.Windows.FrameworkElement,System.Windows.DependencyProperty)"/> for each
            binding found.
            </summary>
        </member>
        <member name="M:Csla.Wpf.DataDecoratorBase.FoundBinding(System.Windows.Data.Binding,System.Windows.FrameworkElement,System.Windows.DependencyProperty)">
            <summary>
            Called by
            <see cref="M:Csla.Wpf.DataDecoratorBase.FindChildBindings"/> each
            time an object binding is found.
            </summary>
            <param name="bnd">The Binding object.</param>
            <param name="control">The control containing the binding.</param>
            <param name="prop">The data bound DependencyProperty.</param>
        </member>
        <member name="P:Csla.Wpf.DataDecoratorBase.DataObject">
            <summary>
            Gets a reference to the current
            data object.
            </summary>
            <remarks>
            The DataContext may not be the data object. The
            DataContext may be a DataSourceProvider control.
            This property returns a reference to the actual
            <b>data object</b>, not necessarily the DataContext
            itself.
            </remarks>
        </member>
        <member name="M:Csla.Wpf.ObjectStatus.DataObjectChanged">
            <summary>
            This method is called when the data
            object to which the control is bound
            has changed.
            </summary>
        </member>
        <member name="M:Csla.Wpf.ObjectStatus.DataPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This method is called when a property
            of the data object to which the 
            control is bound has changed.
            </summary>
        </member>
        <member name="M:Csla.Wpf.ObjectStatus.DataBindingListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This method is called if the data
            object is an IBindingList, and the 
            ListChanged event was raised by
            the data object.
            </summary>
        </member>
        <member name="M:Csla.Wpf.ObjectStatus.DataObservableCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method is called if the data
            object is an INotifyCollectionChanged, 
            and the CollectionChanged event was 
            raised by the data object.
            </summary>
        </member>
        <member name="M:Csla.Wpf.ObjectStatus.Refresh">
            <summary>
            Refreshes the control's property
            values to reflect the values of
            the underlying business object.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ObjectStatus.CanCreateObject">
            <summary>
            Exposes the CanCreateObject property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ObjectStatus.CanGetObject">
            <summary>
            Exposes the CanGetObject property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ObjectStatus.CanEditObject">
            <summary>
            Exposes the CanEditObject property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ObjectStatus.CanDeleteObject">
            <summary>
            Exposes the CanDeleteObject property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ObjectStatus.IsDeleted">
            <summary>
            Exposes the IsDeleted property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ObjectStatus.IsDirty">
            <summary>
            Exposes the IsDirty property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ObjectStatus.IsNew">
            <summary>
            Exposes the IsNew property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ObjectStatus.IsSavable">
            <summary>
            Exposes the IsSavable property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ObjectStatus.IsValid">
            <summary>
            Exposes the IsValid property of the
            DataContext business object.
            </summary>
        </member>
        <member name="T:Csla.Wpf.IErrorDialog">
            <summary>
            Interface defining the interaction between
            a CslaDataSource and an error dialog control.
            </summary>
        </member>
        <member name="M:Csla.Wpf.IErrorDialog.Register(System.Object)">
            <summary>
            Method called by the CslaDataProvider when the
            error dialog should register any events it
            wishes to handle from the CslaDataProvider.
            </summary>
            <param name="source">Data provider control.</param>
        </member>
        <member name="T:Csla.Windows.CslaActionExtender">
            <summary>
            Extender control providing automation around
            data binding to CSLA .NET business objects.
            </summary>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="container">Container for the component.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.GetActionType(System.Windows.Forms.Control)">
            <summary>
            Gets the action type.
            </summary>
            <param name="ctl">Reference to control.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.SetActionType(System.Windows.Forms.Control,Csla.Windows.CslaFormAction)">
            <summary>
            Sets the action type.
            </summary>
            <param name="ctl">Reference to control.</param>
            <param name="value">Value for property.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.GetPostSaveAction(System.Windows.Forms.Control)">
            <summary>
            Gets the post save action.
            </summary>
            <param name="ctl">Reference to control.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.SetPostSaveAction(System.Windows.Forms.Control,Csla.Windows.PostSaveActionType)">
            <summary>
            Sets the post save action.
            </summary>
            <param name="ctl">Reference to control.</param>
            <param name="value">Value for property.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.GetRebindAfterSave(System.Windows.Forms.Control)">
            <summary>
            Gets the rebind after save value.
            </summary>
            <param name="ctl">Reference to control.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.SetRebindAfterSave(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the rebind after save value.
            </summary>
            <param name="ctl">Reference to control.</param>
            <param name="value">Value for property.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.GetDisableWhenClean(System.Windows.Forms.Control)">
            <summary>
            Gets the disable when clean value.
            </summary>
            <param name="ctl">Reference to control.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.SetDisableWhenClean(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the disable when clean value.
            </summary>
            <param name="ctl">Reference to control.</param>
            <param name="value">Value for property.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.GetCommandName(System.Windows.Forms.Control)">
            <summary>
            Gets the command name value.
            </summary>
            <param name="ctl">Reference to control.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.SetCommandName(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the command name value.
            </summary>
            <param name="ctl">Reference to control.</param>
            <param name="value">Value for property.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.OnClicking(Csla.Windows.CslaActionCancelEventArgs)">
            <summary>
            Raises the Clicking event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.OnClicked(Csla.Windows.CslaActionEventArgs)">
            <summary>
            Raises the Clicked event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.OnErrorEncountered(Csla.Windows.ErrorEncounteredEventArgs)">
            <summary>
            Raises the ErrorEncountered event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.OnSetForNew(Csla.Windows.CslaActionEventArgs)">
            <summary>
            Raises the SetForNew event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.OnBusinessObjectInvalid(Csla.Windows.CslaActionEventArgs)">
            <summary>
            Raises the BusinessObjectInvalid event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.OnHasBrokenRules(Csla.Windows.HasBrokenRulesEventArgs)">
            <summary>
            Raises the HasBrokenRules event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.OnObjectSaving(Csla.Windows.CslaActionCancelEventArgs)">
            <summary>
            Raises the ObjectSaving event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.OnObjectSaved(Csla.Windows.CslaActionEventArgs)">
            <summary>
            Raises the ObjectSaved event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.ResetActionBehaviors(Csla.Core.ISavable)">
            <summary>
            Resets all action behaviors.
            </summary>
            <param name="objectToBind">Target object.</param>
        </member>
        <member name="M:Csla.Windows.CslaActionExtender.OnClick(System.Object,System.EventArgs)">
            <summary>
            Method invoked when the target control is clicked.
            </summary>
            <param name="sender">Object originating action.</param>
            <param name="e">Arguments.</param>
        </member>
        <member name="P:Csla.Windows.CslaActionExtender.DataSource">
            <summary>
            Gets or sets a reference to the data source object.
            </summary>
        </member>
        <member name="P:Csla.Windows.CslaActionExtender.AutoShowBrokenRules">
            <summary>
            Gets or sets a value indicating whether to automatically
            show broken rules.
            </summary>
        </member>
        <member name="P:Csla.Windows.CslaActionExtender.WarnIfCloseOnDirty">
            <summary>
            Gets or sets a value indicating whether to warn the
            user on close when the object is dirty.
            </summary>
        </member>
        <member name="P:Csla.Windows.CslaActionExtender.DirtyWarningMessage">
            <summary>
            Gets or sets the message shown to the user
            in a close on dirty warning.
            </summary>
        </member>
        <member name="P:Csla.Windows.CslaActionExtender.WarnOnCancel">
            <summary>
            Gets or sets a value indicating whether to warn
            the user on cancel.
            </summary>
        </member>
        <member name="P:Csla.Windows.CslaActionExtender.WarnOnCancelMessage">
            <summary>
            Gets or sets the message shown to the user
            in a warn on cancel.
            </summary>
        </member>
        <member name="E:Csla.Windows.CslaActionExtender.Clicking">
            <summary>
            Event indicating the user is clicking on the control.
            </summary>
        </member>
        <member name="E:Csla.Windows.CslaActionExtender.Clicked">
            <summary>
            Event indicating the user clicked on the control.
            </summary>
        </member>
        <member name="E:Csla.Windows.CslaActionExtender.ErrorEncountered">
            <summary>
            Event indicating an error was encountered.
            </summary>
        </member>
        <member name="E:Csla.Windows.CslaActionExtender.SetForNew">
            <summary>
            Event indicating the object is set for new.
            </summary>
        </member>
        <member name="E:Csla.Windows.CslaActionExtender.BusinessObjectInvalid">
            <summary>
            Event indicating the business object is in an invalid state.
            </summary>
        </member>
        <member name="E:Csla.Windows.CslaActionExtender.HasBrokenRules">
            <summary>
            Event indicating the business object has broken rules.
            </summary>
        </member>
        <member name="E:Csla.Windows.CslaActionExtender.ObjectSaving">
            <summary>
            Event indicating that the object is saving.
            </summary>
        </member>
        <member name="E:Csla.Windows.CslaActionExtender.ObjectSaved">
            <summary>
            Event indicating that the object has been saved.
            </summary>
        </member>
        <member name="T:Csla.Security.RolesForProperty">
            <summary>
            Maintains a list of allowed and denied
            user roles for a specific property.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Security.RolesForProperty.IsReadAllowed(System.Security.Principal.IPrincipal)">
            <summary>
            Returns <see langword="true"/> if the user is in a role
            explicitly allowed read access.
            </summary>
            <param name="principal">A <see cref="T:System.Security.Principal.IPrincipal"/>
            representing the user.</param>
            <returns><see langword="true"/> if the user is allowed read access.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Security.RolesForProperty.IsReadDenied(System.Security.Principal.IPrincipal)">
            <summary>
            Returns <see langword="true"/> if the user is in a role
            explicitly denied read access.
            </summary>
            <param name="principal">A <see cref="T:System.Security.Principal.IPrincipal"/>
            representing the user.</param>
            <returns><see langword="true"/> if the user is denied read access.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Security.RolesForProperty.IsWriteAllowed(System.Security.Principal.IPrincipal)">
            <summary>
            Returns <see langword="true"/> if the user is in a role
            explicitly allowed write access.
            </summary>
            <param name="principal">A <see cref="T:System.Security.Principal.IPrincipal"/>
            representing the user.</param>
            <returns><see langword="true"/> if the user is allowed write access.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Security.RolesForProperty.IsWriteDenied(System.Security.Principal.IPrincipal)">
            <summary>
            Returns <see langword="true"/> if the user is in a role
            explicitly denied write access.
            </summary>
            <param name="principal">A <see cref="T:System.Security.Principal.IPrincipal"/>
            representing the user.</param>
            <returns><see langword="true"/> if the user is denied write access.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Security.RolesForProperty.IsExecuteAllowed(System.Security.Principal.IPrincipal)">
            <summary>
            Returns True if the user is in a role
            explicitly allowed execute access.
            </summary>
            <param name="principal">A System.Security.Principal.IPrincipal representing the user.</param>
            <returns>True if the user is allowed execute access.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Security.RolesForProperty.IsExecuteDenied(System.Security.Principal.IPrincipal)">
            <summary>
            Returns True if the user is in a role
            explicitly denied execute access.
            </summary>
            <param name="principal">A System.Security.Principal.IPrincipal representing the user.</param>
            <returns>True if the user is denied execute access.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Csla.Security.RolesForProperty.ReadAllowed">
            <summary>
            Returns a List(Of string) containing the list
            of roles allowed read access.
            </summary>
        </member>
        <member name="P:Csla.Security.RolesForProperty.ReadDenied">
            <summary>
            Returns a List(Of string) containing the list
            of roles denied read access.
            </summary>
        </member>
        <member name="P:Csla.Security.RolesForProperty.WriteAllowed">
            <summary>
            Returns a List(Of string) containing the list
            of roles allowed write access.
            </summary>
        </member>
        <member name="P:Csla.Security.RolesForProperty.WriteDenied">
            <summary>
            Returns a List(Of string) containing the list
            of roles denied write access.
            </summary>
        </member>
        <member name="P:Csla.Security.RolesForProperty.ExecuteAllowed">
            <summary>
            Returns a List(Of String) containing the list
            of roles allowed execute access.
            </summary>
        </member>
        <member name="P:Csla.Security.RolesForProperty.ExecuteDenied">
            <summary>
            Returns a List(Of String) containing the list
            of roles denied execute access.
            </summary>
        </member>
        <member name="T:Csla.PropertyLoadException">
            <summary>
            Exception indicating a failure to
            set a property's field.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Csla.PropertyLoadException.#ctor(System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
        </member>
        <member name="M:Csla.PropertyLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="M:Csla.PropertyLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the object for serialization.
            </summary>
            <param name="info">Serialiation info object.</param>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="M:Csla.PropertyLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the object.
            </summary>
            <param name="info">Serialiation info object.</param>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="T:Csla.Data.ObjectAdapter">
            <summary>
            An ObjectAdapter is used to convert data in an object 
            or collection into a DataTable.
            </summary>
        </member>
        <member name="M:Csla.Data.ObjectAdapter.Fill(System.Data.DataSet,System.Object)">
            <summary>
            Fills the DataSet with data from an object or collection.
            </summary>
            <remarks>
            The name of the DataTable being filled is will be the class name of
            the object acting as the data source. The
            DataTable will be inserted if it doesn't already exist in the DataSet.
            </remarks>
            <param name="ds">A reference to the DataSet to be filled.</param>
            <param name="source">A reference to the object or collection acting as a data source.</param>
        </member>
        <member name="M:Csla.Data.ObjectAdapter.Fill(System.Data.DataSet,System.String,System.Object)">
            <summary>
            Fills the DataSet with data from an object or collection.
            </summary>
            <remarks>
            The name of the DataTable being filled is specified as a parameter. The
            DataTable will be inserted if it doesn't already exist in the DataSet.
            </remarks>
            <param name="ds">A reference to the DataSet to be filled.</param>
            <param name="tableName"></param>
            <param name="source">A reference to the object or collection acting as a data source.</param>
        </member>
        <member name="M:Csla.Data.ObjectAdapter.Fill(System.Data.DataTable,System.Object)">
            <summary>
            Fills a DataTable with data values from an object or collection.
            </summary>
            <param name="dt">A reference to the DataTable to be filled.</param>
            <param name="source">A reference to the object or collection acting as a data source.</param>
        </member>
        <member name="T:Csla.Server.SimpleDataPortal">
            <summary>
            Implements the server-side DataPortal as discussed
            in Chapter 4.
            </summary>
        </member>
        <member name="T:Csla.Server.IDataPortalServer">
            <summary>
            Interface implemented by server-side data portal
            components.
            </summary>
        </member>
        <member name="M:Csla.Server.IDataPortalServer.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.IDataPortalServer.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.IDataPortalServer.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.IDataPortalServer.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Delete a business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.SimpleDataPortal.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.SimpleDataPortal.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.SimpleDataPortal.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.SimpleDataPortal.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Delete a business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="T:Csla.DataPortalClient.IDataPortalProxy">
            <summary>
            Interface implemented by client-side 
            data portal proxy objects.
            </summary>
        </member>
        <member name="P:Csla.DataPortalClient.IDataPortalProxy.IsServerRemote">
            <summary>
            Get a value indicating whether this proxy will invoke
            a remote data portal server, or run the "server-side"
            data portal in the caller's process and AppDomain.
            </summary>
        </member>
        <member name="T:Csla.Server.FactoryDataPortal">
            <summary>
            Server-side data portal implementation that
            invokes an object factory rather than directly
            interacting with the business object.
            </summary>
        </member>
        <member name="M:Csla.Server.FactoryDataPortal.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.FactoryDataPortal.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.FactoryDataPortal.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.FactoryDataPortal.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Delete a business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="P:Csla.Server.FactoryDataPortal.FactoryLoader">
            <summary>
            Gets or sets a delegate reference to the method
            called to create instances of factory objects
            as requested by the ObjectFactory attribute on
            a CSLA .NET business object.
            </summary>
        </member>
        <member name="T:Csla.Server.AuthorizeRequest">
            <summary>
            Object containing information about the
            client request to the data portal.
            </summary>
        </member>
        <member name="P:Csla.Server.AuthorizeRequest.ObjectType">
            <summary>
            Gets the type of business object affected by
            the client request.
            </summary>
        </member>
        <member name="P:Csla.Server.AuthorizeRequest.RequestObject">
            <summary>
            Gets a reference to the criteria or 
            business object passed from
            the client to the server.
            </summary>
        </member>
        <member name="P:Csla.Server.AuthorizeRequest.Operation">
            <summary>
            Gets the data portal operation requested
            by the client.
            </summary>
        </member>
        <member name="T:Csla.Reflection.Reflect`1">
            <summary>
            Provides strong-typed reflection of the <typeparamref name="TTarget"/> 
            type.
            </summary>
            <typeparam name="TTarget">Type to reflect.</typeparam>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetMethod``1(System.Linq.Expressions.Expression{System.Action{`0,``0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetMethod``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetMethod``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a property access.</exception>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <typeparam name="P">Type assigned to the property</typeparam>
            <param name="property">Property Expression</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a property access.</exception>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the field represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a field access.</exception>
        </member>
        <member name="M:Csla.Core.FieldManager.PropertyInfoManager.RegisterProperty``1(System.Type,Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the type.
            </summary>
            <typeparam name="T">
            Type of property.
            </typeparam>
            <param name="objectType">
            Type of object to which the property belongs.
            </param>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.Core.FieldManager.PropertyInfoManager.GetRegisteredProperties(System.Type)">
            <summary>
            Returns a copy of the property list for
            a given business object type. Returns
            null if there are no properties registered
            for the type.
            </summary>
            <param name="objectType">
            The business object type.
            </param>
        </member>
        <member name="T:Csla.Core.FieldManager.IFieldData`1">
            <summary>
            Defines the members required by a field
            data storage object.
            </summary>
        </member>
        <member name="T:Csla.Core.FieldManager.IFieldData">
            <summary>
            Defines the members required by a field
            data storage object.
            </summary>
        </member>
        <member name="T:Csla.Core.ITrackStatus">
            <summary>
            Defines the common properties required objects
            that track their own status.
            </summary>
        </member>
        <member name="T:Csla.Core.INotifyBusy">
            <summary>
            Interface defining an object that notifies when it
            is busy executing an asynchronous operation.
            </summary>
        </member>
        <member name="T:Csla.Core.INotifyUnhandledAsyncException">
            <summary>
            Implemented by an object that perfoms asynchronous
            operations that may raise exceptions.
            </summary>
        </member>
        <member name="E:Csla.Core.INotifyUnhandledAsyncException.UnhandledAsyncException">
            <summary>
            Event indicating that an exception occurred during
            an asynchronous operation.
            </summary>
        </member>
        <member name="E:Csla.Core.INotifyBusy.BusyChanged">
            <summary>
            Event raised when the object's busy
            status changes.
            </summary>
        </member>
        <member name="P:Csla.Core.INotifyBusy.IsBusy">
            <summary>
            Gets a value indicating whether the object,
            or any of the object's child objects, are
            busy running an asynchronous operation.
            </summary>
        </member>
        <member name="P:Csla.Core.INotifyBusy.IsSelfBusy">
            <summary>
            Gets a value indicating whether the object
            is busy running an asynchronous operation.
            </summary>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsValid">
            <summary>
            Returns <see langword="true" /> if the object 
            and its child objects are currently valid, 
            <see langword="false" /> if the
            object or any of its child objects have broken 
            rules or are otherwise invalid.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling ValidationRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior. For instance, you should always override
            this method if your object has child objects, since the validity of this object
            is affected by the validity of all child objects.
            </para>
            </remarks>
            <returns>A value indicating if the object is currently valid.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsSelfValid">
            <summary>
            Returns <see langword="true" /> if the object is currently 
            valid, <see langword="false" /> if the
            object has broken rules or is otherwise invalid.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling ValidationRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior.
            </para>
            </remarks>
            <returns>A value indicating if the object is currently valid.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsDirty">
            <summary>
            Returns <see langword="true" /> if this object's 
            data, or any of its fields or child objects data, 
            has been changed.
            </summary>
            <remarks>
            <para>
            When an object's data is changed, CSLA .NET makes note of that change
            and considers the object to be 'dirty' or changed. This value is used to
            optimize data updates, since an unchanged object does not need to be
            updated into the database. All new objects are considered dirty. All objects
            marked for deletion are considered dirty.
            </para><para>
            Once an object's data has been saved to the database (inserted or updated)
            the dirty flag is cleared and the object is considered unchanged. Objects
            newly loaded from the database are also considered unchanged.
            </para>
            </remarks>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsSelfDirty">
            <summary>
            Returns <see langword="true" /> if this object's data has been changed.
            </summary>
            <remarks>
            <para>
            When an object's data is changed, CSLA .NET makes note of that change
            and considers the object to be 'dirty' or changed. This value is used to
            optimize data updates, since an unchanged object does not need to be
            updated into the database. All new objects are considered dirty. All objects
            marked for deletion are considered dirty.
            </para><para>
            Once an object's data has been saved to the database (inserted or updated)
            the dirty flag is cleared and the object is considered unchanged. Objects
            newly loaded from the database are also considered unchanged.
            </para>
            </remarks>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsDeleted">
            <summary>
            Returns <see langword="true" /> if this object is marked for deletion.
            </summary>
            <remarks>
            CSLA .NET supports both immediate and deferred deletion of objects. This
            property is part of the support for deferred deletion, where an object
            can be marked for deletion, but isn't actually deleted until the object
            is saved to the database. This property indicates whether or not the
            current object has been marked for deletion. If it is <see langword="true" />
            , the object will
            be deleted when it is saved to the database, otherwise it will be inserted
            or updated by the save operation.
            </remarks>
            <returns>A value indicating if this object is marked for deletion.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsNew">
            <summary>
            Returns <see langword="true" /> if this is a new object, 
            <see langword="false" /> if it is a pre-existing object.
            </summary>
            <remarks>
            An object is considered to be new if its primary identifying (key) value 
            doesn't correspond to data in the database. In other words, 
            if the data values in this particular
            object have not yet been saved to the database the object is considered to
            be new. Likewise, if the object's data has been deleted from the database
            then the object is considered to be new.
            </remarks>
            <returns>A value indicating if this object is new.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsSavable">
            <summary>
            Returns <see langword="true" /> if this object is both dirty and valid.
            </summary>
            <remarks>
            An object is considered dirty (changed) if 
            <see cref="P:Csla.BusinessBase.IsDirty" /> returns <see langword="true" />. It is
            considered valid if IsValid
            returns <see langword="true" />. The IsSavable property is
            a combination of these two properties. 
            </remarks>
            <returns>A value indicating if this object is both dirty and valid.</returns>
        </member>
        <member name="M:Csla.Core.FieldManager.IFieldData.MarkClean">
            <summary>
            Marks the field as unchanged.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.IFieldData.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.IFieldData.Value">
            <summary>
            Gets or sets the field value.
            </summary>
            <value>The value of the field.</value>
            <returns>The value of the field.</returns>
        </member>
        <member name="P:Csla.Core.FieldManager.IFieldData`1.Value">
            <summary>
            Gets or sets the field value.
            </summary>
            <value>The value of the field.</value>
            <returns>The value of the field.</returns>
        </member>
        <member name="T:Csla.C5.TreeSet`1">
             <summary>
             An implementation of Red-Black trees as an indexed, sorted collection with set semantics,
             cf. <a href="litterature.htm#CLRS">CLRS</a>. <see cref="T:C5.TreeBag`1"/> for a version 
             with bag semantics. <see cref="T:C5.TreeDictionary`2"/> for a sorted dictionary 
             based on this tree implementation.
             <i>
             The comparer (sorting order) may be either natural, because the item type is comparable 
             (generic: <see cref="T:C5.IComparable`1"/> or non-generic: System.IComparable) or it can
             be external and supplied by the user in the constructor.</i>
            
             <i>TODO: describe performance here</i>
             <i>TODO: discuss persistence and its useful usage modes. Warn about the space
             leak possible with other usage modes.</i>
             </summary>
        </member>
        <member name="T:Csla.C5.SequencedBase`1">
            <summary>
            Base class (abstract) for sequenced collection implementations.
            </summary>
        </member>
        <member name="T:Csla.C5.DirectedCollectionBase`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Csla.C5.CollectionBase`1">
            <summary>
            Base class (abstract) for ICollection implementations.
            </summary>
        </member>
        <member name="T:Csla.C5.CollectionValueBase`1">
            <summary>
            Base class for classes implementing ICollectionValue[T]
            </summary>
        </member>
        <member name="T:Csla.C5.EnumerableBase`1">
            <summary>
            A base class for implementing an IEnumerable&lt;T&gt;
            </summary>
        </member>
        <member name="M:Csla.C5.EnumerableBase`1.GetEnumerator">
            <summary>
            Create an enumerator for this collection.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.EnumerableBase`1.countItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Count the number of items in an enumerable by enumeration
            </summary>
            <param name="items">The enumerable to count</param>
            <returns>The size of the enumerable</returns>
        </member>
        <member name="T:Csla.C5.ICollectionValue`1">
            <summary>
            A generic collection that may be enumerated and can answer
            efficiently how many items it contains. Like <code>IEnumerable&lt;T&gt;</code>,
            this interface does not prescribe any operations to initialize or update the 
            collection. The main usage for this interface is to be the return type of 
            query operations on generic collection.
            </summary>
        </member>
        <member name="T:Csla.C5.IShowable">
            <summary>
            <i>(Describe usage of "L:300" format string.)</i>
            </summary>
        </member>
        <member name="M:Csla.C5.IShowable.Show(System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            Format <code>this</code> using at most approximately <code>rest</code> chars and 
            append the result, possibly truncated, to stringbuilder.
            Subtract the actual number of used chars from <code>rest</code>.
            </summary>
            <param name="stringbuilder"></param>
            <param name="rest"></param>
            <param name="formatProvider"></param>
            <returns>True if the appended formatted string was complete (not truncated).</returns>
        </member>
        <member name="M:Csla.C5.ICollectionValue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy the items of this collection to a contiguous part of an array.
            </summary>
            <param name="array">The array to copy to</param>
            <param name="index">The index at which to copy the first item</param>
        </member>
        <member name="M:Csla.C5.ICollectionValue`1.ToArray">
            <summary>
            Create an array with the items of this collection (in the same order as an
            enumerator would output them).
            </summary>
            <returns>The array</returns>
        </member>
        <member name="M:Csla.C5.ICollectionValue`1.Apply(Csla.C5.Act{`0})">
            <summary>
            Apply a delegate to all items of this collection.
            </summary>
            <param name="action">The delegate to apply</param>
        </member>
        <member name="M:Csla.C5.ICollectionValue`1.Exists(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection.
            </summary>
            <param name="predicate">A  delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <returns>True is such an item exists</returns>
        </member>
        <member name="M:Csla.C5.ICollectionValue`1.Find(Csla.C5.Fun{`0,System.Boolean},`0@)">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection and return the first one in enumeration order.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <param name="item"></param>
            <returns>True is such an item exists</returns>
        </member>
        <member name="M:Csla.C5.ICollectionValue`1.All(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Check if all items in this collection satisfies a specific predicate.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <returns>True if all items satisfies the predicate</returns>
        </member>
        <member name="M:Csla.C5.ICollectionValue`1.Choose">
            <summary>
            Choose some item of this collection. 
            <para>Implementations must assure that the item 
            returned may be efficiently removed.</para>
            <para>Implementors may decide to implement this method in a way such that repeated
            calls do not necessarily give the same result, i.e. so that the result of the following 
            test is undetermined:
            <code>coll.Choose() == coll.Choose()</code></para>
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException">if collection is empty.</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ICollectionValue`1.Filter(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create an enumerable, enumerating the items of this collection that satisfies 
            a certain condition.
            </summary>
            <param name="filter">The T->bool filter delegate defining the condition</param>
            <returns>The filtered enumerable</returns>
        </member>
        <member name="P:Csla.C5.ICollectionValue`1.ListenableEvents">
            <summary>
            A flag bitmap of the events subscribable to by this collection.
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.ICollectionValue`1.ActiveEvents">
            <summary>
            A flag bitmap of the events currently subscribed to by this collection.
            </summary>
            <value></value>
        </member>
        <member name="E:Csla.C5.ICollectionValue`1.CollectionChanged">
            <summary>
            The change event. Will be raised for every change operation on the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.ICollectionValue`1.CollectionCleared">
            <summary>
            The change event. Will be raised for every clear operation on the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.ICollectionValue`1.ItemsAdded">
            <summary>
            The item added  event. Will be raised for every individual addition to the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.ICollectionValue`1.ItemInserted">
            <summary>
            The item inserted  event. Will be raised for every individual insertion to the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.ICollectionValue`1.ItemsRemoved">
            <summary>
            The item removed event. Will be raised for every individual removal from the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.ICollectionValue`1.ItemRemovedAt">
            <summary>
            The item removed at event. Will be raised for every individual removal at from the collection.
            </summary>
        </member>
        <member name="P:Csla.C5.ICollectionValue`1.IsEmpty">
            <summary>
            
            </summary>
            <value>True if this collection is empty.</value>
        </member>
        <member name="P:Csla.C5.ICollectionValue`1.Count">
            <summary>
            </summary>
            <value>The number of items in this collection</value>
        </member>
        <member name="P:Csla.C5.ICollectionValue`1.CountSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant).
            </summary>
            <value>A characterization of the speed of the 
            <code>Count</code> property in this collection.</value>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseCollectionChanged">
            <summary>
            Fire the CollectionChanged event
            </summary>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseCollectionCleared(System.Boolean,System.Int32)">
            <summary>
            Fire the CollectionCleared event
            </summary>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseCollectionCleared(System.Boolean,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Fire the CollectionCleared event
            </summary>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseItemsAdded(`0,System.Int32)">
            <summary>
            Fire the ItemsAdded event
            </summary>
            <param name="item">The item that was added</param>
            <param name="count"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseItemsRemoved(`0,System.Int32)">
            <summary>
            Fire the ItemsRemoved event
            </summary>
            <param name="item">The item that was removed</param>
            <param name="count"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseItemInserted(`0,System.Int32)">
            <summary>
            Fire the ItemInserted event
            </summary>
            <param name="item">The item that was added</param>
            <param name="index"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseItemRemovedAt(`0,System.Int32)">
            <summary> 
            Fire the ItemRemovedAt event
            </summary>
            <param name="item">The item that was removed</param>
            <param name="index"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseForSetThis(System.Int32,`0,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseForInsert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseForRemove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseForRemove(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="count"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseForRemoveAt(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseForUpdate(`0,`0)">
            <summary>
            
            </summary>
            <param name="newitem"></param>
            <param name="olditem"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseForUpdate(`0,`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="newitem"></param>
            <param name="olditem"></param>
            <param name="count"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseForAdd(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.raiseForRemoveAll(Csla.C5.ICollectionValue{`0})">
            <summary>
            
            </summary>
            <param name="wasRemoved"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy the items of this collection to part of an array.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> if <code>index</code> 
            is not a valid index
            into the array (i.e. negative or greater than the size of the array)
            or the array does not have room for the items.</exception>
            <param name="array">The array to copy to.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.ToArray">
            <summary>
            Create an array with the items of this collection (in the same order as an
            enumerator would output them).
            </summary>
            <returns>The array</returns>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.Apply(Csla.C5.Act{`0})">
            <summary>
            Apply an single argument action, <see cref="T:C5.Act`1"/> to this enumerable
            </summary>
            <param name="action">The action delegate</param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.Exists(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R = bool</code>) 
            defining the predicate</param>
            <returns>True if such an item exists</returns>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.Find(Csla.C5.Fun{`0,System.Boolean},`0@)">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection and return the first one in enumeration order.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <param name="item"></param>
            <returns>True is such an item exists</returns>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.All(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Check if all items in this collection satisfies a specific predicate.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R = bool</code>) 
            defining the predicate</param>
            <returns>True if all items satisfies the predicate</returns>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.Filter(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create an enumerable, enumerating the items of this collection that satisfies 
            a certain condition.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R = bool</code>) 
            defining the predicate</param>
            <returns>The filtered enumerable</returns>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.Choose">
            <summary>
            Choose some item of this collection. 
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException">if collection is empty.</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.GetEnumerator">
            <summary>
            Create an enumerator for this collection.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.Show(System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="stringbuilder"></param>
            <param name="rest"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.CollectionValueBase`1.ListenableEvents">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.CollectionValueBase`1.ActiveEvents">
            <summary>
            A flag bitmap of the events currently subscribed to by this collection.
            </summary>
            <value></value>
        </member>
        <member name="E:Csla.C5.CollectionValueBase`1.CollectionChanged">
            <summary>
            The change event. Will be raised for every change operation on the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.CollectionValueBase`1.CollectionCleared">
            <summary>
            The clear event. Will be raised for every Clear operation on the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.CollectionValueBase`1.ItemsAdded">
            <summary>
            The item added  event. Will be raised for every individual addition to the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.CollectionValueBase`1.ItemsRemoved">
            <summary>
            The item removed event. Will be raised for every individual removal from the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.CollectionValueBase`1.ItemInserted">
            <summary>
            The item added  event. Will be raised for every individual addition to the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.CollectionValueBase`1.ItemRemovedAt">
            <summary>
            The item removed event. Will be raised for every individual removal from the collection.
            </summary>
        </member>
        <member name="P:Csla.C5.CollectionValueBase`1.IsEmpty">
            <summary>
            Check if collection is empty.
            </summary>
            <value>True if empty</value>
        </member>
        <member name="P:Csla.C5.CollectionValueBase`1.Count">
            <summary>
            The number of items in this collection.
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.CollectionValueBase`1.CountSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant).
            </summary>
            <value>A characterization of the speed of the 
            <code>Count</code> property in this collection.</value>
        </member>
        <member name="T:Csla.C5.CollectionValueBase`1.RaiseForRemoveAllHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.RaiseForRemoveAllHandler.#ctor(Csla.C5.CollectionValueBase{`0})">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="F:Csla.C5.CollectionValueBase`1.RaiseForRemoveAllHandler.MustFire">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.RaiseForRemoveAllHandler.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.CollectionValueBase`1.RaiseForRemoveAllHandler.Raise">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.CollectionBase`1.isReadOnlyBase">
            <summary>
            The underlying field of the ReadOnly property
            </summary>
        </member>
        <member name="F:Csla.C5.CollectionBase`1.stamp">
            <summary>
            The current stamp value
            </summary>
        </member>
        <member name="F:Csla.C5.CollectionBase`1.size">
            <summary>
            The number of items in the collection
            </summary>
        </member>
        <member name="F:Csla.C5.CollectionBase`1.itemequalityComparer">
            <summary>
            The item equalityComparer of the collection
            </summary>
        </member>
        <member name="M:Csla.C5.CollectionBase`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="itemequalityComparer"></param>
        </member>
        <member name="M:Csla.C5.CollectionBase`1.checkRange(System.Int32,System.Int32)">
            <summary>
            Utility method for range checking.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the start or count is negative or
             if the range does not fit within collection size.</exception>
            <param name="start">start of range</param>
            <param name="count">size of range</param>
        </member>
        <member name="M:Csla.C5.CollectionBase`1.ComputeHashCode(Csla.C5.ICollectionValue{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Compute the unsequenced hash code of a collection
            </summary>
            <param name="items">The collection to compute hash code for</param>
            <param name="itemequalityComparer">The item equalityComparer</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Csla.C5.CollectionBase`1.StaticEquals(Csla.C5.ICollection{`0},Csla.C5.ICollection{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Examine if collection1 and collection2 are equal as unsequenced collections
            using the specified item equalityComparer (assumed compatible with the two collections).
            </summary>
            <param name="collection1">The first collection</param>
            <param name="collection2">The second collection</param>
            <param name="itemequalityComparer">The item equalityComparer to use for comparison</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Csla.C5.CollectionBase`1.GetUnsequencedHashCode">
            <summary>
            Get the unsequenced collection hash code of this collection: from the cached 
            value if present and up to date, else (re)compute.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Csla.C5.CollectionBase`1.UnsequencedEquals(Csla.C5.ICollection{`0})">
            <summary>
            Check if the contents of otherCollection is equal to the contents of this
            in the unsequenced sense.  Uses the item equality comparer of this collection
            </summary>
            <param name="otherCollection">The collection to compare to.</param>
            <returns>True if  equal</returns>
        </member>
        <member name="M:Csla.C5.CollectionBase`1.modifycheck(System.Int32)">
            <summary>
            Check if the collection has been modified since a specified time, expressed as a stamp value.
            </summary>
            <exception cref="T:Csla.C5.CollectionModifiedException"> if this collection has been updated 
            since a target time</exception>
            <param name="thestamp">The stamp identifying the target time</param>
        </member>
        <member name="M:Csla.C5.CollectionBase`1.updatecheck">
            <summary>
            Check if it is valid to perform update operations, and if so increment stamp.
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException">If colection is read-only</exception>
        </member>
        <member name="M:Csla.C5.CollectionBase`1.GetEnumerator">
            <summary>
            Create an enumerator for this collection.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:Csla.C5.CollectionBase`1.IsReadOnly">
            <summary>
            
            </summary>
            <value>True if this collection is read only</value>
        </member>
        <member name="P:Csla.C5.CollectionBase`1.Count">
            <summary>
            
            </summary>
            <value>The size of this collection</value>
        </member>
        <member name="P:Csla.C5.CollectionBase`1.CountSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant).
            </summary>
            <value>A characterization of the speed of the 
            <code>Count</code> property in this collection.</value>
        </member>
        <member name="P:Csla.C5.CollectionBase`1.EqualityComparer">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.CollectionBase`1.IsEmpty">
            <summary>
            
            </summary>
            <value>True if this collection is empty</value>
        </member>
        <member name="T:Csla.C5.IDirectedCollectionValue`1">
            <summary>
            A sized generic collection, that can be enumerated backwards.
            </summary>
        </member>
        <member name="T:Csla.C5.IDirectedEnumerable`1">
            <summary>
            A generic collection, that can be enumerated backwards.
            </summary>
        </member>
        <member name="M:Csla.C5.IDirectedEnumerable`1.Backwards">
            <summary>
            Create a collection containing the same items as this collection, but
            whose enumerator will enumerate the items backwards. The new collection
            will become invalid if the original is modified. Method typically used as in
            <code>foreach (T x in coll.Backwards()) {...}</code>
            </summary>
            <returns>The backwards collection.</returns>
        </member>
        <member name="P:Csla.C5.IDirectedEnumerable`1.Direction">
            <summary>
            <code>Forwards</code> if same, else <code>Backwards</code>
            </summary>
            <value>The enumeration direction relative to the original collection.</value>
        </member>
        <member name="M:Csla.C5.IDirectedCollectionValue`1.Backwards">
            <summary>
            Create a collection containing the same items as this collection, but
            whose enumerator will enumerate the items backwards. The new collection
            will become invalid if the original is modified. Method typically used as in
            <code>foreach (T x in coll.Backwards()) {...}</code>
            </summary>
            <returns>The backwards collection.</returns>
        </member>
        <member name="M:Csla.C5.IDirectedCollectionValue`1.FindLast(Csla.C5.Fun{`0,System.Boolean},`0@)">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection and return the first one in enumeration order.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <param name="item"></param>
            <returns>True is such an item exists</returns>
        </member>
        <member name="M:Csla.C5.DirectedCollectionBase`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="itemequalityComparer"></param>
        </member>
        <member name="M:Csla.C5.DirectedCollectionBase`1.Backwards">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.DirectedCollectionBase`1.FindLast(Csla.C5.Fun{`0,System.Boolean},`0@)">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection and return the first one in enumeration order.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <param name="item"></param>
            <returns>True is such an item exists</returns>
        </member>
        <member name="P:Csla.C5.DirectedCollectionBase`1.Direction">
            <summary>
            <code>Forwards</code> if same, else <code>Backwards</code>
            </summary>
            <value>The enumeration direction relative to the original collection.</value>
        </member>
        <member name="M:Csla.C5.SequencedBase`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="itemequalityComparer"></param>
        </member>
        <member name="M:Csla.C5.SequencedBase`1.ComputeHashCode(Csla.C5.ISequenced{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Compute the unsequenced hash code of a collection
            </summary>
            <param name="items">The collection to compute hash code for</param>
            <param name="itemequalityComparer">The item equalityComparer</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Csla.C5.SequencedBase`1.StaticEquals(Csla.C5.ISequenced{`0},Csla.C5.ISequenced{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Examine if tit and tat are equal as sequenced collections
            using the specified item equalityComparer (assumed compatible with the two collections).
            </summary>
            <param name="collection1">The first collection</param>
            <param name="collection2">The second collection</param>
            <param name="itemequalityComparer">The item equalityComparer to use for comparison</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Csla.C5.SequencedBase`1.GetSequencedHashCode">
            <summary>
            Get the sequenced collection hash code of this collection: from the cached 
            value if present and up to date, else (re)compute.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Csla.C5.SequencedBase`1.SequencedEquals(Csla.C5.ISequenced{`0})">
            <summary>
            Check if the contents of that is equal to the contents of this
            in the sequenced sense. Using the item equalityComparer of this collection.
            </summary>
            <param name="otherCollection">The collection to compare to.</param>
            <returns>True if  equal</returns>
        </member>
        <member name="M:Csla.C5.SequencedBase`1.GetEnumerator">
            <summary>
            Create an enumerator for this collection.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.SequencedBase`1.FindIndex(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection and return the index of the first one.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <returns>the index, if found, a negative value else</returns>
        </member>
        <member name="M:Csla.C5.SequencedBase`1.FindLastIndex(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection and return the index of the last one.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <returns>the index, if found, a negative value else</returns>
        </member>
        <member name="P:Csla.C5.SequencedBase`1.Direction">
            <summary>
            <code>Forwards</code> if same, else <code>Backwards</code>
            </summary>
            <value>The enumeration direction relative to the original collection.</value>
        </member>
        <member name="T:Csla.C5.IIndexedSorted`1">
            <summary>
            A collection where items are maintained in sorted order together
            with their indexes in that order.
            </summary>
        </member>
        <member name="T:Csla.C5.ISorted`1">
            <summary>
            A sorted collection, i.e. a collection where items are maintained and can be searched for in sorted order.
            Thus the sequence order is given as a sorting order.
            
            <para>The sorting order is defined by a comparer, an object of type IComparer&lt;T&gt; 
            (<see cref="T:C5.IComparer`1"/>). Implementors of this interface will normally let the user 
            define the comparer as an argument to a constructor. 
            Usually there will also be constructors without a comparer argument, in which case the 
            comparer should be the defalt comparer for the item type, <see cref="P:C5.Comparer`1.Default"/>.</para>
            
            <para>The comparer of the sorted collection is available as the <code>Comparer</code> property 
            (<see cref="P:C5.ISorted`1.Comparer"/>).</para>
            
            <para>The methods are grouped according to
            <list>
            <item>Extrema: report or report and delete an extremal item. This is reminiscent of simplified priority queues.</item>
            <item>Nearest neighbor: report predecessor or successor in the collection of an item. Cut belongs to this group.</item>
            <item>Range: report a view of a range of elements or remove all elements in a range.</item>
            <item>AddSorted: add a collection of items known to be sorted in the same order (should be faster) (to be removed?)</item>
            </list>
            </para>
            
            <para>Since this interface extends ISequenced&lt;T&gt;, sorted collections will also have an 
            item equalityComparer (<see cref="P:C5.IExtensible`1.EqualityComparer"/>). This equalityComparer will not be used in connection with 
            the inner workings of the sorted collection, but will be used if the sorted collection is used as 
            an item in a collection of unsequenced or sequenced collections, 
            (<see cref="T:C5.ICollection`1"/> and <see cref="T:C5.ISequenced`1"/>)</para>
            
            <para>Note that code may check if two sorted collections has the same sorting order 
            by checking if the Comparer properties are equal. This is done a few places in this library
            for optimization purposes.</para>
            </summary>
        </member>
        <member name="T:Csla.C5.ISequenced`1">
             <summary>
             An editable collection maintaining a definite sequence order of the items.
            
             <i>Implementations of this interface must compute the hash code and 
             equality exactly as prescribed in the method definitions in order to
             be consistent with other collection classes implementing this interface.</i>
             <i>This interface is usually implemented by explicit interface implementation,
             not as ordinary virtual methods.</i>
             </summary>
        </member>
        <member name="T:Csla.C5.ICollection`1">
            <summary>
            The simplest interface of a main stream generic collection
            with lookup, insertion and removal operations. 
            </summary>
        </member>
        <member name="T:Csla.C5.IExtensible`1">
            <summary>
            A generic collection to which one may add items. This is just the intersection
            of the main stream generic collection interfaces and the priority queue interface,
            <see cref="T:C5.ICollection`1"/> and <see cref="T:C5.IPriorityQueue`1"/>.
            </summary>
        </member>
        <member name="M:Csla.C5.IExtensible`1.Add(`0)">
            <summary>
            Add an item to this collection if possible. If this collection has set
            semantics, the item will be added if not already in the collection. If
            bag semantics, the item will always be added.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if item was added.</returns>
        </member>
        <member name="M:Csla.C5.IExtensible`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add the elements from another collection with a more specialized item type 
            to this collection. If this
            collection has set semantics, only items not already in the collection
            will be added.
            </summary>
            <typeparam name="U">The type of items to add</typeparam>
            <param name="items">The items to add</param>
        </member>
        <member name="M:Csla.C5.IExtensible`1.Check">
            <summary>
            Check the integrity of the internal data structures of this collection.
            <i>This is only relevant for developers of the library</i>
            </summary>
            <returns>True if check was passed.</returns>
        </member>
        <member name="P:Csla.C5.IExtensible`1.IsReadOnly">
            <summary>
            If true any call of an updating operation will throw an
            <code>ReadOnlyCollectionException</code>
            </summary>
            <value>True if this collection is read-only.</value>
        </member>
        <member name="P:Csla.C5.IExtensible`1.AllowsDuplicates">
            <summary>
            
            </summary>
            <value>False if this collection has set semantics, true if bag semantics.</value>
        </member>
        <member name="P:Csla.C5.IExtensible`1.EqualityComparer">
            <summary>
            (Here should be a discussion of the role of equalityComparers. Any ). 
            </summary>
            <value>The equalityComparer used by this collection to check equality of items. 
            Or null (????) if collection does not check equality at all or uses a comparer.</value>
        </member>
        <member name="P:Csla.C5.IExtensible`1.DuplicatesByCounting">
            <summary>
            By convention this is true for any collection with set semantics.
            </summary>
            <value>True if only one representative of a group of equal items 
            is kept in the collection together with the total count.</value>
        </member>
        <member name="M:Csla.C5.ICollection`1.Add(`0)">
            <summary>
            Add an item to this collection if possible. If this collection has set
            semantics, the item will be added if not already in the collection. If
            bag semantics, the item will always be added.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if item was added.</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy the items of this collection to a contiguous part of an array.
            </summary>
            <param name="array">The array to copy to</param>
            <param name="index">The index at which to copy the first item</param>
        </member>
        <member name="M:Csla.C5.ICollection`1.GetUnsequencedHashCode">
            <summary>
            The unordered collection hashcode is defined as the sum of 
            <code>h(hashcode(item))</code> over the items
            of the collection, where the function <code>h</code> is a function from 
            int to int of the form <code> t -> (a0*t+b0)^(a1*t+b1)^(a2*t+b2)</code>, where 
            the ax and bx are the same for all collection classes. 
            <para>The current implementation uses fixed values for the ax and bx, 
            specified as constants in the code.</para>
            </summary>
            <returns>The unordered hashcode of this collection.</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.UnsequencedEquals(Csla.C5.ICollection{`0})">
            <summary>
            Compare the contents of this collection to another one without regards to
            the sequence order. The comparison will use this collection's itemequalityComparer
            to compare individual items.
            </summary>
            <param name="otherCollection">The collection to compare to.</param>
            <returns>True if this collection and that contains the same items.</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.Contains(`0)">
            <summary>
            Check if this collection contains (an item equivalent to according to the
            itemequalityComparer) a particular value.
            </summary>
            <param name="item">The value to check for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.ContainsCount(`0)">
            <summary>
            Count the number of items of the collection equal to a particular value.
            Returns 0 if and only if the value is not in the collection.
            </summary>
            <param name="item">The value to count.</param>
            <returns>The number of copies found.</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check whether this collection contains all the values in another collection.
            If this collection has bag semantics (<code>AllowsDuplicates==true</code>)
            the check is made with respect to multiplicities, else multiplicities
            are not taken into account.
            </summary>
            <param name="items">The </param>
            <typeparam name="U"></typeparam>
            <returns>True if all values in <code>items</code>is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.Find(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.FindOrAdd(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found. Else, add the item to the collection.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the item was found (hence not added).</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.Update(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            with a (binary copy of) the supplied value. If the collection has bag semantics,
            it depends on the value of DuplicatesByCounting if this updates all equivalent copies in
            the collection or just one.
            </summary>
            <param name="item">Value to update.</param>
            <returns>True if the item was found and hence updated.</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.Update(`0,`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            with a (binary copy of) the supplied value. If the collection has bag semantics,
            it depends on the value of DuplicatesByCounting if this updates all equivalent copies in
            the collection or just one.
            </summary>
            <param name="item">Value to update.</param>
            <param name="olditem">On output the olditem, if found.</param>
            <returns>True if the item was found and hence updated.</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.UpdateOrAdd(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value; else add the value to the collection. 
            </summary>
            <param name="item">Value to add or update.</param>
            <returns>True if the item was found and updated (hence not added).</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.UpdateOrAdd(`0,`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value; else add the value to the collection. 
            </summary>
            <param name="item">Value to add or update.</param>
            <param name="olditem">On output the olditem, if found.</param>
            <returns>True if the item was found and updated (hence not added).</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.Remove(`0)">
            <summary>
            Remove a particular item from this collection. If the collection has bag
            semantics only one copy equivalent to the supplied item is removed. 
            </summary>
            <param name="item">The value to remove.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.Remove(`0,`0@)">
            <summary>
            Remove a particular item from this collection if found. If the collection
            has bag semantics only one copy equivalent to the supplied item is removed,
            which one is implementation dependent. 
            If an item was removed, report a binary copy of the actual item removed in 
            the argument.
            </summary>
            <param name="item">The value to remove.</param>
            <param name="removeditem">The value removed if any.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.ICollection`1.RemoveAllCopies(`0)">
            <summary>
            Remove all items equivalent to a given value.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Csla.C5.ICollection`1.RemoveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items in another collection from this one. If this collection
            has bag semantics, take multiplicities into account.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to remove.</param>
        </member>
        <member name="M:Csla.C5.ICollection`1.Clear">
            <summary>
            Remove all items from this collection.
            </summary>
        </member>
        <member name="M:Csla.C5.ICollection`1.RetainAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items not in some other collection from this one. If this collection
            has bag semantics, take multiplicities into account.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to retain.</param>
        </member>
        <member name="P:Csla.C5.ICollection`1.ContainsSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant). 
            <para>See <see cref="T:C5.Speed"/> for the set of symbols.</para>
            </summary>
            <value>A characterization of the speed of lookup operations
            (<code>Contains()</code> etc.) of the implementation of this collection.</value>
        </member>
        <member name="P:Csla.C5.ICollection`1.Count">
            <summary>
            </summary>
            <value>The number of items in this collection</value>
        </member>
        <member name="P:Csla.C5.ICollection`1.IsReadOnly">
            <summary>
            If true any call of an updating operation will throw an
            <code>ReadOnlyCollectionException</code>
            </summary>
            <value>True if this collection is read-only.</value>
        </member>
        <member name="M:Csla.C5.ISequenced`1.GetSequencedHashCode">
            <summary>
            The hashcode is defined as <code>h(...h(h(h(x1),x2),x3),...,xn)</code> for
            <code>h(a,b)=CONSTANT*a+b</code> and the x's the hash codes of the items of 
            this collection.
            </summary>
            <returns>The sequence order hashcode of this collection.</returns>
        </member>
        <member name="M:Csla.C5.ISequenced`1.SequencedEquals(Csla.C5.ISequenced{`0})">
            <summary>
            Compare this sequenced collection to another one in sequence order.
            </summary>
            <param name="otherCollection">The sequenced collection to compare to.</param>
            <returns>True if this collection and that contains equal (according to
            this collection's itemequalityComparer) in the same sequence order.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.FindMin">
            <summary>
            Find the current least item of this sorted collection.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if the collection is empty.</exception>
            <returns>The least item.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.DeleteMin">
            <summary>
            Remove the least item from this sorted collection.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if the collection is empty.</exception>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.FindMax">
            <summary>
            Find the current largest item of this sorted collection.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if the collection is empty.</exception>
            <returns>The largest item.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.DeleteMax">
            <summary>
            Remove the largest item from this sorted collection.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if the collection is empty.</exception>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.TryPredecessor(`0,`0@)">
            <summary>
            Find the strict predecessor of item in the sorted collection,
            that is, the greatest item in the collection smaller than the item.
            </summary>
            <param name="item">The item to find the predecessor for.</param>
            <param name="res">The predecessor, if any; otherwise the default value for T.</param>
            <returns>True if item has a predecessor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.TrySuccessor(`0,`0@)">
            <summary>
            Find the strict successor of item in the sorted collection,
            that is, the least item in the collection greater than the supplied value.
            </summary>
            <param name="item">The item to find the successor for.</param>
            <param name="res">The successor, if any; otherwise the default value for T.</param>
            <returns>True if item has a successor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.TryWeakPredecessor(`0,`0@)">
            <summary>
            Find the weak predecessor of item in the sorted collection,
            that is, the greatest item in the collection smaller than or equal to the item.
            </summary>
            <param name="item">The item to find the weak predecessor for.</param>
            <param name="res">The weak predecessor, if any; otherwise the default value for T.</param>
            <returns>True if item has a weak predecessor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.TryWeakSuccessor(`0,`0@)">
            <summary>
            Find the weak successor of item in the sorted collection,
            that is, the least item in the collection greater than or equal to the supplied value.
            </summary>
            <param name="item">The item to find the weak successor for.</param>
            <param name="res">The weak successor, if any; otherwise the default value for T.</param>
            <returns>True if item has a weak successor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.Predecessor(`0)">
            <summary>
            Find the strict predecessor in the sorted collection of a particular value,
            that is, the largest item in the collection less than the supplied value.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is less than or equal to the minimum of this collection.)</exception>
            <param name="item">The item to find the predecessor for.</param>
            <returns>The predecessor.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.Successor(`0)">
            <summary>
            Find the strict successor in the sorted collection of a particular value,
            that is, the least item in the collection greater than the supplied value.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is greater than or equal to the maximum of this collection.)</exception>
            <param name="item">The item to find the successor for.</param>
            <returns>The successor.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.WeakPredecessor(`0)">
            <summary>
            Find the weak predecessor in the sorted collection of a particular value,
            that is, the largest item in the collection less than or equal to the supplied value.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is less than the minimum of this collection.)</exception>
            <param name="item">The item to find the weak predecessor for.</param>
            <returns>The weak predecessor.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.WeakSuccessor(`0)">
             <summary>
             Find the weak successor in the sorted collection of a particular value,
             that is, the least item in the collection greater than or equal to the supplied value.
             </summary>
             <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
             supplied  value is greater than the maximum of this collection.)</exception>
            <param name="item">The item to find the weak successor for.</param>
             <returns>The weak successor.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.Cut(System.IComparable{`0},`0@,System.Boolean@,`0@,System.Boolean@)">
            <summary>
            Given a "cut" function from the items of the sorted collection to <code>int</code>
            whose only sign changes when going through items in increasing order
            can be 
            <list>
            <item>from positive to zero</item>
            <item>from positive to negative</item>
            <item>from zero to negative</item>
            </list>
            The "cut" function is supplied as the <code>CompareTo</code> method 
            of an object <code>c</code> implementing 
            <code>IComparable&lt;T&gt;</code>. 
            A typical example is the case where <code>T</code> is comparable and 
            <code>cutFunction</code> is itself of type <code>T</code>.
            <para>This method performs a search in the sorted collection for the ranges in which the
            "cut" function is negative, zero respectively positive. If <code>T</code> is comparable
            and <code>c</code> is of type <code>T</code>, this is a safe way (no exceptions thrown) 
            to find predecessor and successor of <code>c</code>.
            </para>
            <para> If the supplied cut function does not satisfy the sign-change condition, 
            the result of this call is undefined.
            </para>
            
            </summary>
            <param name="cutFunction">The cut function <code>T</code> to <code>int</code>, given
            by the <code>CompareTo</code> method of an object implementing 
            <code>IComparable&lt;T&gt;</code>.</param>
            <param name="low">Returns the largest item in the collection, where the
            cut function is positive (if any).</param>
            <param name="lowIsValid">Returns true if the cut function is positive somewhere
            on this collection.</param>
            <param name="high">Returns the least item in the collection, where the
            cut function is negative (if any).</param>
            <param name="highIsValid">Returns true if the cut function is negative somewhere
            on this collection.</param>
            <returns>True if the cut function is zero somewhere
            on this collection.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.RangeFrom(`0)">
            <summary>
            Query this sorted collection for items greater than or equal to a supplied value.
            <para>The returned collection is not a copy but a view into the collection.</para>
            <para>The view is fragile in the sense that changes to the underlying collection will 
            invalidate the view so that further operations on the view throws InvalidView exceptions.</para>
            </summary>
            <param name="bot">The lower bound (inclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.RangeFromTo(`0,`0)">
            <summary>
            Query this sorted collection for items between two supplied values.
            <para>The returned collection is not a copy but a view into the collection.</para>
            <para>The view is fragile in the sense that changes to the underlying collection will 
            invalidate the view so that further operations on the view throws InvalidView exceptions.</para>
            </summary>
            <param name="bot">The lower bound (inclusive).</param>
            <param name="top">The upper bound (exclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.RangeTo(`0)">
            <summary>
            Query this sorted collection for items less than a supplied value.
            <para>The returned collection is not a copy but a view into the collection.</para>
            <para>The view is fragile in the sense that changes to the underlying collection will 
            invalidate the view so that further operations on the view throws InvalidView exceptions.</para>
            </summary>
            <param name="top">The upper bound (exclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.RangeAll">
            <summary>
            Create a directed collection with the same items as this collection.
            <para>The returned collection is not a copy but a view into the collection.</para>
            <para>The view is fragile in the sense that changes to the underlying collection will 
            invalidate the view so that further operations on the view throws InvalidView exceptions.</para>
            </summary>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.ISorted`1.AddSorted``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add all the items from another collection with an enumeration order that 
            is increasing in the items.
            </summary>
            <exception cref="T:System.ArgumentException"> if the enumerated items turns out
            not to be in increasing order.</exception>
            <param name="items">The collection to add.</param>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Csla.C5.ISorted`1.RemoveRangeFrom(`0)">
            <summary>
            Remove all items of this collection above or at a supplied threshold.
            </summary>
            <param name="low">The lower threshold (inclusive).</param>
        </member>
        <member name="M:Csla.C5.ISorted`1.RemoveRangeFromTo(`0,`0)">
            <summary>
            Remove all items of this collection between two supplied thresholds.
            </summary>
            <param name="low">The lower threshold (inclusive).</param>
            <param name="hi">The upper threshold (exclusive).</param>
        </member>
        <member name="M:Csla.C5.ISorted`1.RemoveRangeTo(`0)">
            <summary>
            Remove all items of this collection below a supplied threshold.
            </summary>
            <param name="hi">The upper threshold (exclusive).</param>
        </member>
        <member name="P:Csla.C5.ISorted`1.Comparer">
            <summary>
            The comparer object supplied at creation time for this sorted collection.
            </summary>
            <value>The comparer</value>
        </member>
        <member name="T:Csla.C5.IIndexed`1">
            <summary>
            A sequenced collection, where indices of items in the order are maintained
            </summary>
        </member>
        <member name="M:Csla.C5.IIndexed`1.IndexOf(`0)">
            <summary>
            Searches for an item in the list going forwards from the start. 
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of item from start. A negative number if item not found, 
            namely the one's complement of the index at which the Add operation would put the item.</returns>
        </member>
        <member name="M:Csla.C5.IIndexed`1.LastIndexOf(`0)">
            <summary>
            Searches for an item in the list going backwards from the end.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of of item from the end. A negative number if item not found, 
            namely the two-complement of the index at which the Add operation would put the item.</returns>
        </member>
        <member name="M:Csla.C5.IIndexed`1.FindIndex(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection and return the index of the first one.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <returns>the index, if found, a negative value else</returns>
        </member>
        <member name="M:Csla.C5.IIndexed`1.FindLastIndex(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection and return the index of the last one.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <returns>the index, if found, a negative value else</returns>
        </member>
        <member name="M:Csla.C5.IIndexed`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at a specific position of the list.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"> if <code>index</code> is negative or
            &gt;= the size of the collection.</exception>
            <param name="index">The index of the item to remove.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.IIndexed`1.RemoveInterval(System.Int32,System.Int32)">
            <summary>
            Remove all items in an index interval.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> if start or count 
            is negative or start+count &gt; the size of the collection.</exception>
            <param name="start">The index of the first item to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="P:Csla.C5.IIndexed`1.Item(System.Int32)">
            <summary>
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"> if <code>index</code> is negative or
            &gt;= the size of the collection.</exception>
            <value>The <code>index</code>'th item of this list.</value>
            <param name="index">the index to lookup</param>
        </member>
        <member name="P:Csla.C5.IIndexed`1.IndexingSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.IIndexed`1.Item(System.Int32,System.Int32)">
            <summary>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <value>The directed collection of items in a specific index interval.</value>
            <param name="start">The low index of the interval (inclusive).</param>
            <param name="count">The size of the range.</param>
        </member>
        <member name="M:Csla.C5.IIndexedSorted`1.CountFrom(`0)">
            <summary>
            Determine the number of items at or above a supplied threshold.
            </summary>
            <param name="bot">The lower bound (inclusive)</param>
            <returns>The number of matcing items.</returns>
        </member>
        <member name="M:Csla.C5.IIndexedSorted`1.CountFromTo(`0,`0)">
            <summary>
            Determine the number of items between two supplied thresholds.
            </summary>
            <param name="bot">The lower bound (inclusive)</param>
            <param name="top">The upper bound (exclusive)</param>
            <returns>The number of matcing items.</returns>
        </member>
        <member name="M:Csla.C5.IIndexedSorted`1.CountTo(`0)">
            <summary>
            Determine the number of items below a supplied threshold.
            </summary>
            <param name="top">The upper bound (exclusive)</param>
            <returns>The number of matcing items.</returns>
        </member>
        <member name="M:Csla.C5.IIndexedSorted`1.RangeFrom(`0)">
            <summary>
            Query this sorted collection for items greater than or equal to a supplied value.
            </summary>
            <param name="bot">The lower bound (inclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.IIndexedSorted`1.RangeFromTo(`0,`0)">
            <summary>
            Query this sorted collection for items between two supplied values.
            </summary>
            <param name="bot">The lower bound (inclusive).</param>
            <param name="top">The upper bound (exclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.IIndexedSorted`1.RangeTo(`0)">
            <summary>
            Query this sorted collection for items less than a supplied value.
            </summary>
            <param name="top">The upper bound (exclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.IIndexedSorted`1.FindAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create a new indexed sorted collection consisting of the items of this
            indexed sorted collection satisfying a certain predicate.
            </summary>
            <param name="predicate">The filter delegate defining the predicate.</param>
            <returns>The new indexed sorted collection.</returns>
        </member>
        <member name="M:Csla.C5.IIndexedSorted`1.Map``1(Csla.C5.Fun{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Create a new indexed sorted collection consisting of the results of
            mapping all items of this list.
            <exception cref="T:System.ArgumentException"/> if the map is not increasing over 
            the items of this collection (with respect to the two given comparison 
            relations).
            </summary>
            <param name="mapper">The delegate definging the map.</param>
            <param name="comparer">The comparion relation to use for the result.</param>
            <returns>The new sorted collection.</returns>
        </member>
        <member name="T:Csla.C5.IPersistentSorted`1">
            <summary>
            The type of a sorted collection with persistence
            </summary>
        </member>
        <member name="M:Csla.C5.IPersistentSorted`1.Snapshot">
            <summary>
            Make a (read-only) snap shot of this collection.
            </summary>
            <returns>The snap shot.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.left(Csla.C5.TreeSet{`0}.Node)">
            <summary>
            Fetch the left child of n taking node-copying persistence into
            account if relevant. 
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.#ctor">
            <summary>
            Create a red-black tree collection with natural comparer and item equalityComparer.
            We assume that if <code>T</code> is comparable, its default equalityComparer 
            will be compatible with the comparer.
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">If <code>T</code> is not comparable.
            </exception>
        </member>
        <member name="M:Csla.C5.TreeSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a red-black tree collection with an external comparer. 
            <para>The itemequalityComparer will be a compatible 
            <see cref="T:C5.ComparerZeroHashCodeEqualityComparer`1"/> since the 
            default equalityComparer for T (<see cref="P:C5.EqualityComparer`1.Default"/>)
            is unlikely to be compatible with the external comparer. This makes the
            tree inadequate for use as item in a collection of unsequenced or sequenced sets or bags
            (<see cref="T:C5.ICollection`1"/> and <see cref="T:C5.ISequenced`1"/>)
            </para>
            </summary>
            <param name="comparer">The external comparer</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a red-black tree collection with an external comparer and an external
            item equalityComparer, assumed consistent.
            </summary>
            <param name="comparer">The external comparer</param>
            <param name="equalityComparer">The external item equalityComparer</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Choose">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException">If tree is empty</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.GetEnumerator">
            <summary>
            Create an enumerator for this tree
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.addIterative(`0,`0@,System.Boolean,System.Boolean@)">
            <summary>
            Add item to tree. If already there, return the found item in the second argument.
            </summary>
            <param name="item">Item to add</param>
            <param name="founditem">item found</param>
            <param name="update">whether item in node should be updated</param>
            <param name="wasfound">true if found in bag, false if not found or tre is a set</param>
            <returns>True if item was added</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Add(`0)">
            <summary>
            Add an item to this collection if possible. If this collection has set
            semantics, the item will be added if not already in the collection. If
            bag semantics, the item will always be added.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if item was added.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Add an item to this collection if possible. If this collection has set
            semantics, the item will be added if not already in the collection. If
            bag semantics, the item will always be added.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add the elements from another collection with a more specialized item type 
            to this collection. If this
            collection has set semantics, only items not already in the collection
            will be added.
            </summary>
            <typeparam name="U">The type of items to add</typeparam>
            <param name="items">The items to add</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.AddSorted``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add all the items from another collection with an enumeration order that 
            is increasing in the items. <para>The idea is that the implementation may use
            a faster algorithm to merge the two collections.</para>
            <exception cref="T:System.ArgumentException"/> if the enumerated items turns out
            not to be in increasing order.
            </summary>
            <param name="items">The collection to add.</param>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Contains(`0)">
            <summary>
            Check if this collection contains (an item equivalent to according to the
            itemequalityComparer) a particular value.
            </summary>
            <param name="item">The value to check for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Find(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.FindOrAdd(`0@)">
             <summary>
             Find or add the item to the tree. If the tree does not contain
             an item equivalent to this item add it, else return the exisiting
             one in the ref argument. 
            
             </summary>
             <param name="item"></param>
             <returns>True if item was found</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Update(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value. If the collection has bag semantics,
            this updates all equivalent copies in
            the collection.
            </summary>
            <param name="item">Value to update.</param>
            <returns>True if the item was found and hence updated.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Update(`0,`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            with a binary copy of the supplied value. If the collection has bag semantics,
            this updates all equivalent copies in
            the collection.
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.UpdateOrAdd(`0)">
             <summary>
             Check if this collection contains an item equivalent according to the
             itemequalityComparer to a particular value. If so, update the item in the collection 
             with a binary copy of the supplied value; else add the value to the collection. 
            
             <i>NOTE: the bag implementation is currently wrong! ?????</i>
             </summary>
             <param name="item">Value to add or update.</param>
             <returns>True if the item was found and updated (hence not added).</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.UpdateOrAdd(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Remove(`0)">
            <summary>
            Remove a particular item from this collection. If the collection has bag
            semantics only one copy equivalent to the supplied item is removed. 
            </summary>
            <param name="item">The value to remove.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Remove(`0,`0@)">
            <summary>
            Remove a particular item from this collection if found. If the collection
            has bag semantics only one copy equivalent to the supplied item is removed,
            which one is implementation dependent. 
            If an item was removed, report a binary copy of the actual item removed in 
            the argument.
            </summary>
            <param name="item">The value to remove.</param>
            <param name="removeditem">The removed value.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.removeIterative(`0@,System.Boolean,System.Int32@)">
            <summary>
            
            </summary>
            <param name="item">input: item to remove; output: item actually removed</param>
            <param name="all">If true, remove all copies</param>
            <param name="wasRemoved"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Clear">
            <summary>
            Remove all items from this collection.
            </summary>
        </member>
        <member name="M:Csla.C5.TreeSet`1.RemoveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items in another collection from this one. If this collection
            has bag semantics, take multiplicities into account.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to remove.</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.RetainAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items not in some other collection from this one. If this collection
            has bag semantics, take multiplicities into account.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to retain.</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if this collection contains all the values in another collection.
            If this collection has bag semantics (<code>AllowsDuplicates==true</code>)
            the check is made with respect to multiplicities, else multiplicities
            are not taken into account.
            </summary>
            <param name="items">The </param>
            <typeparam name="U"></typeparam>
            <returns>True if all values in <code>items</code>is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.FindAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create a new indexed sorted collection consisting of the items of this
            indexed sorted collection satisfying a certain predicate.
            </summary>
            <param name="filter">The filter delegate defining the predicate.</param>
            <returns>The new indexed sorted collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Map``1(Csla.C5.Fun{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Create a new indexed sorted collection consisting of the results of
            mapping all items of this list.
            <exception cref="T:System.ArgumentException"/> if the map is not increasing over 
            the items of this collection (with respect to the two given comparison 
            relations).
            </summary>
            <param name="mapper">The delegate definging the map.</param>
            <param name="c">The comparion relation to use for the result.</param>
            <returns>The new sorted collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.ContainsCount(`0)">
            <summary>
            Count the number of items of the collection equal to a particular value.
            Returns 0 if and only if the value is not in the collection.
            </summary>
            <param name="item">The value to count.</param>
            <returns>The number of copies found.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.RemoveAllCopies(`0)">
            <summary>
            Remove all items equivalent to a given value.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.IndexOf(`0)">
            <summary>
            Searches for an item in this indexed collection going forwards from the start.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of first occurrence from start of the item
            if found, else the two-complement 
            (always negative) of the index at which the item would be put if it was added.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.LastIndexOf(`0)">
            <summary>
            Searches for an item in the tree going backwords from the end.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of last occurrence from the end of item if found, 
            else the two-complement (always negative) of the index at which 
            the item would be put if it was added.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at a specific position of the list.
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt;= the size of the collection.
            </summary>
            <param name="i">The index of the item to remove.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.RemoveInterval(System.Int32,System.Int32)">
            <summary>
            Remove all items in an index interval.
            <exception cref="T:System.IndexOutOfRangeException"/>???. 
            </summary>
            <param name="start">The index of the first item to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Backwards">
            <summary>
            Create a collection containing the same items as this collection, but
            whose enumerator will enumerate the items backwards. The new collection
            will become invalid if the original is modified. Method typicaly used as in
            <code>foreach (T x in coll.Backwards()) {...}</code>
            </summary>
            <returns>The backwards collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.FindMin">
            <summary>
            Find the current least item of this priority queue.
            </summary>
            <returns>The least item.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.DeleteMin">
            <summary>
            Remove the least item from this  priority queue.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.FindMax">
            <summary>
            Find the current largest item of this priority queue.
            </summary>
            <returns>The largest item.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.DeleteMax">
            <summary>
            Remove the largest item from this  priority queue.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.TryPredecessor(`0,`0@)">
            <summary>
            Find the strict predecessor of item in the sorted collection,
            that is, the greatest item in the collection smaller than the item.
            </summary>
            <param name="item">The item to find the predecessor for.</param>
            <param name="res">The predecessor, if any; otherwise the default value for T.</param>
            <returns>True if item has a predecessor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.TrySuccessor(`0,`0@)">
            <summary>
            Find the strict successor of item in the sorted collection,
            that is, the least item in the collection greater than the supplied value.
            </summary>
            <param name="item">The item to find the successor for.</param>
            <param name="res">The successor, if any; otherwise the default value for T.</param>
            <returns>True if item has a successor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.TryWeakPredecessor(`0,`0@)">
            <summary>
            Find the weak predecessor of item in the sorted collection,
            that is, the greatest item in the collection smaller than or equal to the item.
            </summary>
            <param name="item">The item to find the weak predecessor for.</param>
            <param name="res">The weak predecessor, if any; otherwise the default value for T.</param>
            <returns>True if item has a weak predecessor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.TryWeakSuccessor(`0,`0@)">
            <summary>
            Find the weak successor of item in the sorted collection,
            that is, the least item in the collection greater than or equal to the supplied value.
            </summary>
            <param name="item">The item to find the weak successor for.</param>
            <param name="res">The weak successor, if any; otherwise the default value for T.</param>
            <returns>True if item has a weak successor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Predecessor(`0)">
            <summary>
            Find the strict predecessor in the sorted collection of a particular value,
            i.e. the largest item in the collection less than the supplied value.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is less than or equal to the minimum of this collection.)</exception>
            <param name="item">The item to find the predecessor for.</param>
            <returns>The predecessor.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.WeakPredecessor(`0)">
            <summary>
            Find the weak predecessor in the sorted collection of a particular value,
            i.e. the largest item in the collection less than or equal to the supplied value.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is less than the minimum of this collection.)</exception>
            <param name="item">The item to find the weak predecessor for.</param>
            <returns>The weak predecessor.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Successor(`0)">
            <summary>
            Find the strict successor in the sorted collection of a particular value,
            i.e. the least item in the collection greater than the supplied value.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is greater than or equal to the maximum of this collection.)</exception>
            <param name="item">The item to find the successor for.</param>
            <returns>The successor.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.WeakSuccessor(`0)">
            <summary>
            Find the weak successor in the sorted collection of a particular value,
            i.e. the least item in the collection greater than or equal to the supplied value.
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is greater than the maximum of this collection.)</exception>
            </summary>
            <param name="item">The item to find the weak successor for.</param>
            <returns>The weak successor.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.RangeFrom(`0)">
            <summary>
            Query this sorted collection for items greater than or equal to a supplied value.
            </summary>
            <param name="bot">The lower bound (inclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.RangeFromTo(`0,`0)">
            <summary>
            Query this sorted collection for items between two supplied values.
            </summary>
            <param name="bot">The lower bound (inclusive).</param>
            <param name="top">The upper bound (exclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.RangeTo(`0)">
            <summary>
            Query this sorted collection for items less than a supplied value.
            </summary>
            <param name="top">The upper bound (exclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.RangeAll">
            <summary>
            Create a directed collection with the same items as this collection.
            </summary>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Cut(System.IComparable{`0},`0@,System.Boolean@,`0@,System.Boolean@)">
            <summary>
            Perform a search in the sorted collection for the ranges in which a
            non-increasing (i.e. weakly decrerasing) function from the item type to 
            <code>int</code> is
            negative, zero respectively positive. If the supplied cut function is
            not non-increasing, the result of this call is undefined.
            </summary>
            <param name="c">The cut function <code>T</code> to <code>int</code>, given
            as an <code>IComparable&lt;T&gt;</code> object, where the cut function is
            the <code>c.CompareTo(T that)</code> method.</param>
            <param name="low">Returns the largest item in the collection, where the
            cut function is positive (if any).</param>
            <param name="lowIsValid">True if the cut function is positive somewhere
            on this collection.</param>
            <param name="high">Returns the least item in the collection, where the
            cut function is negative (if any).</param>
            <param name="highIsValid">True if the cut function is negative somewhere
            on this collection.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.CountFrom(`0)">
            <summary>
            Determine the number of items at or above a supplied threshold.
            </summary>
            <param name="bot">The lower bound (inclusive)</param>
            <returns>The number of matcing items.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.CountFromTo(`0,`0)">
            <summary>
            Determine the number of items between two supplied thresholds.
            </summary>
            <param name="bot">The lower bound (inclusive)</param>
            <param name="top">The upper bound (exclusive)</param>
            <returns>The number of matcing items.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.CountTo(`0)">
            <summary>
            Determine the number of items below a supplied threshold.
            </summary>
            <param name="top">The upper bound (exclusive)</param>
            <returns>The number of matcing items.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.RemoveRangeFrom(`0)">
            <summary>
            Remove all items of this collection above or at a supplied threshold.
            </summary>
            <param name="low">The lower threshold (inclusive).</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.RemoveRangeFromTo(`0,`0)">
            <summary>
            Remove all items of this collection between two supplied thresholds.
            </summary>
            <param name="low">The lower threshold (inclusive).</param>
            <param name="hi">The upper threshold (exclusive).</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.RemoveRangeTo(`0)">
            <summary>
            Remove all items of this collection below a supplied threshold.
            </summary>
            <param name="hi">The upper threshold (exclusive).</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Dispose">
            <summary>
            If this tree is a snapshot, remove registration in base tree
            </summary>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Snapshot">
            <summary>
            Make a (read-only) snapshot of this collection.
            </summary>
            <returns>The snapshot.</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.minidump(Csla.C5.TreeSet{`0}.Node,System.String)">
            <summary>
            Display this node on the console, and recursively its subnodes.
            </summary>
            <param name="n">Node to display</param>
            <param name="space">Indentation</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.dump">
            <summary>
            Print the tree structure to the console stdout.
            </summary>
        </member>
        <member name="M:Csla.C5.TreeSet`1.dump(System.String)">
            <summary>
            Print the tree structure to the console stdout.
            </summary>
        </member>
        <member name="M:Csla.C5.TreeSet`1.dump(System.String,System.String)">
            <summary>
            Display this tree on the console.
            </summary>
            <param name="msg">Identifying string of this call to dump</param>
            <param name="err">Extra (error)message to include</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.massert(System.Boolean,Csla.C5.TreeSet{`0}.Node,System.String,System.IO.TextWriter)">
            <summary>
            Print warning m on o if b is false.
            </summary>
            <param name="b">Condition that should hold</param>
            <param name="n">Place (used for id display)</param>
            <param name="m">Message</param>
            <param name="o">Output stream</param>
            <returns>b</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Check(System.String)">
            <summary>
            Checks red-black invariant. Dumps tree to console if bad
            </summary>
            <param name="name">Title of dump</param>
            <returns>false if invariant violation</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Check">
            <summary>
            Checks red-black invariant. Dumps tree to console if bad
            </summary>
            <returns>false if invariant violation</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Clone">
            <summary>
            Make a shallow copy of this TreeSet.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.TreeSet`1.ListenableEvents">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.TreeSet`1.AllowsDuplicates">
            <summary></summary>
            <value>False since this tree has set semantics.</value>
        </member>
        <member name="P:Csla.C5.TreeSet`1.DuplicatesByCounting">
            <summary>
            By convention this is true for any collection with set semantics.
            </summary>
            <value>True if only one representative of a group of equal items 
            is kept in the collection together with the total count.</value>
        </member>
        <member name="P:Csla.C5.TreeSet`1.ContainsSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant).
            </summary>
            <value>Speed.Log</value>
        </member>
        <member name="P:Csla.C5.TreeSet`1.Item(System.Int32)">
            <summary>
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt;= the size of the collection.
            </summary>
            <value>The i'th item of this list.</value>
            <param name="i">the index to lookup</param>
        </member>
        <member name="P:Csla.C5.TreeSet`1.IndexingSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.TreeSet`1.Item(System.Int32,System.Int32)">
            <summary>
            <exception cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <value>The directed collection of items in a specific index interval.</value>
            <param name="start">The low index of the interval (inclusive).</param>
            <param name="end">The high index of the interval (exclusive).</param>
        </member>
        <member name="P:Csla.C5.TreeSet`1.Comparer">
            <summary>
            The comparer object supplied at creation time for this collection
            </summary>
            <value>The comparer</value>
        </member>
        <member name="T:Csla.C5.TreeSet`1.Node">
            <summary>
            The type of node in a Red-Black binary tree
            </summary>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Node.update(Csla.C5.TreeSet{`0}.Node@,System.Boolean,Csla.C5.TreeSet{`0}.Node,System.Int32,System.Int32)">
            <summary>
            Update a child pointer
            </summary>
            <param name="cursor"></param>
            <param name="leftnode"></param>
            <param name="child"></param>
            <param name="maxsnapid"></param>
            <param name="generation"></param>
            <returns>True if node was *copied*</returns>
        </member>
        <member name="T:Csla.C5.TreeSet`1.Enumerator">
            <summary>
            An enumerator for a red-black tree collection. Based on an explicit stack
            of subtrees waiting to be enumerated. Currently only used for the tree set 
            enumerators (tree bag enumerators use an iterator block based enumerator).
            </summary>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Enumerator.#ctor(Csla.C5.TreeSet{`0})">
            <summary>
            Create a tree enumerator
            </summary>
            <param name="tree">The red-black tree to enumerate</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Enumerator.MoveNext">
            <summary>
            Move enumerator to next item in tree, or the first item if
            this is the first call to MoveNext. 
            <exception cref="T:Csla.C5.CollectionModifiedException"/> if underlying tree was modified.
            </summary>
            <returns>True if enumerator is valid now</returns>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Enumerator.Dispose">
            <summary>
            Call Dispose(true) and then suppress finalization of this enumerator.
            </summary>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Enumerator.Dispose(System.Boolean)">
            <summary>
            Remove the internal data (notably the stack array).
            </summary>
            <param name="disposing">True if called from Dispose(),
            false if called from the finalizer</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Enumerator.Finalize">
            <summary>
            Finalizer for enumerator
            </summary>
        </member>
        <member name="P:Csla.C5.TreeSet`1.Enumerator.Current">
            <summary>
            Undefined if enumerator is not valid (MoveNext hash been called returning true)
            </summary>
            <value>The current item of the enumerator.</value>
        </member>
        <member name="T:Csla.C5.TreeSet`1.SnapEnumerator">
            <summary>
            An enumerator for a snapshot of a node copy persistent red-black tree
            collection.
            </summary>
        </member>
        <member name="M:Csla.C5.TreeSet`1.SnapEnumerator.#ctor(Csla.C5.TreeSet{`0})">
            <summary>
            Creta an enumerator for a snapshot of a node copy persistent red-black tree
            collection
            </summary>
            <param name="tree">The snapshot</param>
        </member>
        <member name="M:Csla.C5.TreeSet`1.SnapEnumerator.MoveNext">
            <summary>
            Move enumerator to next item in tree, or the first item if
            this is the first call to MoveNext. 
            <exception cref="T:Csla.C5.CollectionModifiedException"/> if underlying tree was modified.
            </summary>
            <returns>True if enumerator is valid now</returns>
        </member>
        <member name="P:Csla.C5.TreeSet`1.SnapEnumerator.Current">
            <summary>
            Undefined if enumerator is not valid (MoveNext hash been called returning true)
            </summary>
            <value>The current value of the enumerator.</value>
        </member>
        <member name="T:Csla.C5.DirectedCollectionValueBase`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Csla.C5.DirectedCollectionValueBase`1.Backwards">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.DirectedCollectionValueBase`1.FindLast(Csla.C5.Fun{`0,System.Boolean},`0@)">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection and return the first one in enumeration order.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <param name="item"></param>
            <returns>True is such an item exists</returns>
        </member>
        <member name="P:Csla.C5.DirectedCollectionValueBase`1.Direction">
            <summary>
            <code>Forwards</code> if same, else <code>Backwards</code>
            </summary>
            <value>The enumeration direction relative to the original collection.</value>
        </member>
        <member name="M:Csla.C5.TreeSet`1.Range.Enumerator.MoveNext">
            <summary>
            Move enumerator to next item in tree, or the first item if
            this is the first call to MoveNext. 
            <exception cref="T:Csla.C5.CollectionModifiedException"/> if underlying tree was modified.
            </summary>
            <returns>True if enumerator is valid now</returns>
        </member>
        <member name="P:Csla.C5.TreeSet`1.Range.Enumerator.Current">
            <summary>
            Undefined if enumerator is not valid (MoveNext hash been called returning true)
            </summary>
            <value>The current value of the enumerator.</value>
        </member>
        <member name="T:Csla.C5.HashSet`1">
            <summary>
            A set collection class based on linear hashing
            </summary>
        </member>
        <member name="M:Csla.C5.HashSet`1.searchoradd(`0@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Search for an item equal (according to itemequalityComparer) to the supplied item.  
            </summary>
            <param name="item"></param>
            <param name="add">If true, add item to table if not found.</param>
            <param name="update">If true, update table entry if item found.</param>
            <param name="raise">If true raise events</param>
            <returns>True if found</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.#ctor">
            <summary>
            Create a hash set with natural item equalityComparer and default fill threshold (66%)
            and initial table size (16).
            </summary>
        </member>
        <member name="M:Csla.C5.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a hash set with external item equalityComparer and default fill threshold (66%)
            and initial table size (16).
            </summary>
            <param name="itemequalityComparer">The external item equalityComparer</param>
        </member>
        <member name="M:Csla.C5.HashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a hash set with external item equalityComparer and default fill threshold (66%)
            </summary>
            <param name="capacity">Initial table size (rounded to power of 2, at least 16)</param>
            <param name="itemequalityComparer">The external item equalityComparer</param>
        </member>
        <member name="M:Csla.C5.HashSet`1.#ctor(System.Int32,System.Double,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a hash set with external item equalityComparer.
            </summary>
            <param name="capacity">Initial table size (rounded to power of 2, at least 16)</param>
            <param name="fill">Fill threshold (in range 10% to 90%)</param>
            <param name="itemequalityComparer">The external item equalityComparer</param>
        </member>
        <member name="M:Csla.C5.HashSet`1.Contains(`0)">
            <summary>
            Check if an item is in the set 
            </summary>
            <param name="item">The item to look for</param>
            <returns>True if set contains item</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.Find(`0@)">
            <summary>
            Check if an item (collection equal to a given one) is in the set and
            if so report the actual item object found.
            </summary>
            <param name="item">On entry, the item to look for.
            On exit the item found, if any</param>
            <returns>True if set contains item</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.Update(`0)">
            <summary>
            Check if an item (collection equal to a given one) is in the set and
            if so replace the item object in the set with the supplied one.
            </summary>
            <param name="item">The item object to update with</param>
            <returns>True if item was found (and updated)</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.Update(`0,`0@)">
            <summary>
            Check if an item (collection equal to a given one) is in the set and
            if so replace the item object in the set with the supplied one.
            </summary>
            <param name="item">The item object to update with</param>
            <param name="olditem"></param>
            <returns>True if item was found (and updated)</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.FindOrAdd(`0@)">
            <summary>
            Check if an item (collection equal to a given one) is in the set.
            If found, report the actual item object in the set,
            else add the supplied one.
            </summary>
            <param name="item">On entry, the item to look for or add.
            On exit the actual object found, if any.</param>
            <returns>True if item was found</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.UpdateOrAdd(`0)">
            <summary>
            Check if an item (collection equal to a supplied one) is in the set and
            if so replace the item object in the set with the supplied one; else
            add the supplied one.
            </summary>
            <param name="item">The item to look for and update or add</param>
            <returns>True if item was updated</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.UpdateOrAdd(`0,`0@)">
            <summary>
            Check if an item (collection equal to a supplied one) is in the set and
            if so replace the item object in the set with the supplied one; else
            add the supplied one.
            </summary>
            <param name="item">The item to look for and update or add</param>
            <param name="olditem"></param>
            <returns>True if item was updated</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.Remove(`0)">
            <summary>
            Remove an item from the set
            </summary>
            <param name="item">The item to remove</param>
            <returns>True if item was (found and) removed </returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.Remove(`0,`0@)">
            <summary>
            Remove an item from the set, reporting the actual matching item object.
            </summary>
            <param name="item">The value to remove.</param>
            <param name="removeditem">The removed value.</param>
            <returns>True if item was found.</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.RemoveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items in a supplied collection from this set.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to remove.</param>
        </member>
        <member name="M:Csla.C5.HashSet`1.Clear">
            <summary>
            Remove all items from the set, resetting internal table to initial size.
            </summary>
        </member>
        <member name="M:Csla.C5.HashSet`1.RetainAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items *not* in a supplied collection from this set.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to retain</param>
        </member>
        <member name="M:Csla.C5.HashSet`1.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if all items in a supplied collection is in this set
            (ignoring multiplicities). 
            </summary>
            <param name="items">The items to look for.</param>
            <typeparam name="U"></typeparam>
            <returns>True if all items are found.</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.ToArray">
            <summary>
            Create an array containing all items in this set (in enumeration order).
            </summary>
            <returns>The array</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.ContainsCount(`0)">
            <summary>
            Count the number of times an item is in this set (either 0 or 1).
            </summary>
            <param name="item">The item to look for.</param>
            <returns>1 if item is in set, 0 else</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.RemoveAllCopies(`0)">
            <summary>
            Remove all (at most 1) copies of item from this set.
            </summary>
            <param name="item">The item to remove</param>
        </member>
        <member name="M:Csla.C5.HashSet`1.Choose">
            <summary>
            Choose some item of this collection. 
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException">if collection is empty.</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.GetEnumerator">
            <summary>
            Create an enumerator for this set.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.Add(`0)">
            <summary>
            Add an item to this set.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if item was added (i.e. not found)</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Add an item to this set.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Csla.C5.HashSet`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add the elements from another collection with a more specialized item type 
            to this collection. Since this
            collection has set semantics, only items not already in the collection
            will be added.
            </summary>
            <typeparam name="U">The type of items to add</typeparam>
            <param name="items">The items to add</param>
        </member>
        <member name="M:Csla.C5.HashSet`1.Check">
            <summary>
            Test internal structure of data (invariants)
            </summary>
            <returns>True if pass</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.BucketCostDistribution">
            <summary>
            Produce statistics on distribution of bucket sizes. Current implementation is incomplete.
            </summary>
            <returns>Histogram data.</returns>
        </member>
        <member name="M:Csla.C5.HashSet`1.Clone">
            <summary>
            Make a shallow copy of this HashSet.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.HashSet`1.Features">
            <summary>
            Show which implementation features was chosen at compilation time
            </summary>
        </member>
        <member name="P:Csla.C5.HashSet`1.ListenableEvents">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.HashSet`1.ContainsSpeed">
            <summary>
            The complexity of the Contains operation
            </summary>
            <value>Always returns Speed.Constant</value>
        </member>
        <member name="P:Csla.C5.HashSet`1.AllowsDuplicates">
            <summary>
            Report if this is a set collection.
            </summary>
            <value>Always false</value>
        </member>
        <member name="P:Csla.C5.HashSet`1.DuplicatesByCounting">
            <summary>
            By convention this is true for any collection with set semantics.
            </summary>
            <value>True if only one representative of a group of equal items 
            is kept in the collection together with the total count.</value>
        </member>
        <member name="T:Csla.C5.HashSet`1.Feature">
            <summary>
            Enum class to assist printing of compilation alternatives.
            </summary>
        </member>
        <member name="F:Csla.C5.HashSet`1.Feature.Dummy">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:Csla.C5.HashSet`1.Feature.RefTypeBucket">
            <summary>
            Buckets are of reference type
            </summary>
        </member>
        <member name="F:Csla.C5.HashSet`1.Feature.ValueTypeBucket">
            <summary>
            Primary buckets are of value type
            </summary>
        </member>
        <member name="F:Csla.C5.HashSet`1.Feature.LinearProbing">
            <summary>
            Using linear probing to resolve index clashes
            </summary>
        </member>
        <member name="F:Csla.C5.HashSet`1.Feature.ShrinkTable">
            <summary>
            Shrink table when very sparsely filled
            </summary>
        </member>
        <member name="F:Csla.C5.HashSet`1.Feature.Chaining">
            <summary>
            Use chaining to resolve index clashes
            </summary>
        </member>
        <member name="F:Csla.C5.HashSet`1.Feature.InterHashing">
            <summary>
            Use hash function on item hash code
            </summary>
        </member>
        <member name="F:Csla.C5.HashSet`1.Feature.RandomInterHashing">
            <summary>
            Use a universal family of hash functions on item hash code
            </summary>
        </member>
        <member name="T:Csla.Wpf.ErrorDialog">
            <summary>
            Displays an error dialog for any exceptions
            that occur in a CslaDataProvider.
            </summary>
        </member>
        <member name="M:Csla.Wpf.ErrorDialog.#ctor">
            <summary>
            Creates a new instance of the control.
            </summary>
        </member>
        <member name="F:Csla.Wpf.ErrorDialog.DialogTitleProperty">
            <summary>
            Gets or sets the title of the error
            dialog.
            </summary>
        </member>
        <member name="F:Csla.Wpf.ErrorDialog.DialogFirstLineProperty">
            <summary>
            Gets or sets the first line of text displayed
            within the error dialog (before the
            exception message).
            </summary>
        </member>
        <member name="F:Csla.Wpf.ErrorDialog.ShowExceptionDetailProperty">
            <summary>
            Gets or sets a value indicating whether
            the dialog should include exception details
            or just the exception summary message.
            </summary>
        </member>
        <member name="F:Csla.Wpf.ErrorDialog.DialogIconProperty">
            <summary>
            Gets or sets a value indicating whether
            the dialog should include exception details
            or just the exception summary message.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ErrorDialog.DialogTitle">
            <summary>
            Gets or sets the title of the error
            dialog.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ErrorDialog.DialogFirstLine">
            <summary>
            Gets or sets the first line of text displayed
            within the error dialog (before the
            exception message).
            </summary>
        </member>
        <member name="P:Csla.Wpf.ErrorDialog.ShowExceptionDetail">
            <summary>
            Gets or sets the first line of text displayed
            within the error dialog (before the
            exception message).
            </summary>
        </member>
        <member name="P:Csla.Wpf.ErrorDialog.DialogIcon">
            <summary>
            Gets or sets the icon displayed in
            the dialog.
            </summary>
        </member>
        <member name="T:Csla.Wpf.BrokenRuleSeverityConverter">
            <summary>
            Converts validation severity values into corresponding
            images.
            </summary>
        </member>
        <member name="M:Csla.Wpf.BrokenRuleSeverityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts validation severity values into corresponding
            images.
            </summary>
            <param name="value">Original value.</param>
            <param name="targetType">Desired output type (ignored).</param>
            <param name="parameter">Extra parameter (ignored).</param>
            <param name="culture">Desired culture (ignored).</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Wpf.BrokenRuleSeverityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the original value.
            </summary>
            <param name="value">Original value.</param>
            <param name="targetType">Desired output type (ignored).</param>
            <param name="parameter">Extra parameter (ignored).</param>
            <param name="culture">Desired culture (ignored).</param>
        </member>
        <member name="T:Csla.Windows.HasBrokenRulesEventArgs">
            <summary>
            Event args object containing information about a
            broken rule.
            </summary>
        </member>
        <member name="T:Csla.Windows.CslaActionCancelEventArgs">
            <summary>
            Event args providing information about
            a canceled action.
            </summary>
        </member>
        <member name="M:Csla.Windows.CslaActionCancelEventArgs.#ctor(System.Boolean,System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="cancel">
            Indicates whether a cancel should occur.
            </param>
            <param name="commandName">
            Name of the command.
            </param>
        </member>
        <member name="P:Csla.Windows.CslaActionCancelEventArgs.CommandName">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="M:Csla.Windows.HasBrokenRulesEventArgs.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the object.
            </summary>
            <param name="commandName">
            Name of the command.
            </param>
            <param name="hasErrors">
            Indicates whether error severity exists.
            </param>
            <param name="hasWarnings">
            Indicates whether warning severity exists.
            </param>
            <param name="hasInformation">
            Indicates whether information severity exists.
            </param>
            <param name="autoShowBrokenRules">
            Indicates whether to automatically show broken rules.
            </param>
        </member>
        <member name="M:Csla.Windows.HasBrokenRulesEventArgs.#ctor(System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the object.
            </summary>
            <param name="cancel">
            Indicates whether to cancel.
            </param>
            <param name="commandName">
            Name of the command.
            </param>
            <param name="hasErrors">
            Indicates whether error severity exists.
            </param>
            <param name="hasWarnings">
            Indicates whether warning severity exists.
            </param>
            <param name="hasInformation">
            Indicates whether information severity exists.
            </param>
            <param name="autoShowBrokenRules">
            Indicates whether to automatically show broken rules.
            </param>
        </member>
        <member name="P:Csla.Windows.HasBrokenRulesEventArgs.HasErrors">
            <summary>
            Gets a value indicating whether
            an error severity rule exists.
            </summary>
        </member>
        <member name="P:Csla.Windows.HasBrokenRulesEventArgs.HasWarning">
            <summary>
            Gets a value indicating whether
            a warning severity rule exists.
            </summary>
        </member>
        <member name="P:Csla.Windows.HasBrokenRulesEventArgs.HasInformation">
            <summary>
            Gets a value indicating whether
            an information severity rule exists.
            </summary>
        </member>
        <member name="P:Csla.Windows.HasBrokenRulesEventArgs.AutoShowBrokenRules">
            <summary>
            Gets a value indicating whether
            to show broken rules.
            </summary>
        </member>
        <member name="T:Csla.Linq.IIndexSet`1">
            <summary>
            Interface that defines a what a set of indexes should do
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndexSet`1.InsertItem(`0)">
            <summary>
            Insert an item into all indexes
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndexSet`1.InsertItem(`0,System.String)">
            <summary>
            Insert an item into the index for the given property
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndexSet`1.RemoveItem(`0)">
            <summary>
            Remove an item from all indexes
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndexSet`1.RemoveItem(`0,System.String)">
            <summary>
            Remove an item from the index for the given property
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndexSet`1.ReIndexItem(`0)">
            <summary>
            Reindex the item for all indexes
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndexSet`1.ReIndexItem(`0,System.String)">
            <summary>
            Reindex the item in the index for a given property
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndexSet`1.ClearIndexes">
            <summary>
            Clear all the indexes
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndexSet`1.ClearIndex(System.String)">
            <summary>
            Clear the index for a given property
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndexSet`1.Search(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            Search for items using a given index and a given expression
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndexSet`1.HasIndexFor(System.String)">
            <summary>
            Determine whether there is an index for a given property present
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndexSet`1.HasIndexFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Determine whether the index set has an index that enables search for a given expression
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndexSet`1.LoadIndex(System.String)">
            <summary>
            Tell the index set that it is time to allow for loading of an on demand index
            </summary>
        </member>
        <member name="P:Csla.Linq.IIndexSet`1.Item(System.String)">
            <summary>
            Return an index based on an indexer using a property name
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.WcfPortal">
            <summary>
            Exposes server-side DataPortal functionality
            through WCF.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.IWcfPortal">
            <summary>
            Defines the service contract for the WCF data
            portal.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.IWcfPortal.Create(Csla.Server.Hosts.Silverlight.CriteriaRequest)">
            <summary>
            Create a new business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.IWcfPortal.Fetch(Csla.Server.Hosts.Silverlight.CriteriaRequest)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.IWcfPortal.Update(Csla.Server.Hosts.Silverlight.UpdateRequest)">
            <summary>
            Update a business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.IWcfPortal.Delete(Csla.Server.Hosts.Silverlight.CriteriaRequest)">
            <summary>
            Delete a business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.WcfPortal.Create(Csla.Server.Hosts.Silverlight.CriteriaRequest)">
            <summary>
            Create a new business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.WcfPortal.Fetch(Csla.Server.Hosts.Silverlight.CriteriaRequest)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.WcfPortal.Update(Csla.Server.Hosts.Silverlight.UpdateRequest)">
            <summary>
            Update a business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.WcfPortal.Delete(Csla.Server.Hosts.Silverlight.CriteriaRequest)">
            <summary>
            Delete a business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.WcfPortal.ConvertRequest(Csla.Server.Hosts.Silverlight.UpdateRequest)">
            <summary>
            Override to convert the request data before it
            is transferred over the network.
            </summary>
            <param name="request">Request object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.WcfPortal.ConvertRequest(Csla.Server.Hosts.Silverlight.CriteriaRequest)">
            <summary>
            Override to convert the request data before it
            is transferred over the network.
            </summary>
            <param name="request">Request object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.WcfPortal.ConvertResponse(Csla.Server.Hosts.Silverlight.WcfResponse)">
            <summary>
            Override to convert the response data after it
            comes back from the network.
            </summary>
            <param name="response">Response object.</param>
        </member>
        <member name="T:Csla.Security.UnauthenticatedIdentity">
            <summary>
            Implementation of a .NET identity object representing
            an unauthenticated user. Used by the
            UnauthenticatedPrincipal class.
            </summary>
        </member>
        <member name="T:Csla.Security.CslaIdentity">
            <summary>
            Provides a base class to simplify creation of
            a .NET identity object for use with BusinessPrincipalBase.
            </summary>
            <summary>
            Provides a base class to simplify creation of
            a .NET identity object for use with BusinessPrincipalBase.
            </summary>
        </member>
        <member name="T:Csla.ReadOnlyBase`1">
            <summary>
            This is a base class from which readonly business classes
            can be derived.
            </summary>
            <remarks>
            This base class only supports data retrieve, not updating or
            deleting. Any business classes derived from this base class
            should only implement readonly properties.
            </remarks>
            <typeparam name="T">Type of the business object.</typeparam>
        </member>
        <member name="T:Csla.Core.BindableBase">
            <summary>
            This class implements INotifyPropertyChanged
            and INotifyPropertyChanging in a 
            serialization-safe manner.
            </summary>
        </member>
        <member name="T:Csla.Core.MobileObject">
            <summary>
            Inherit from this base class to easily
            create a serializable class.
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.IMobileObject">
            <summary>
            Interface to be implemented by any object
            that supports serialization by the
            MobileFormatter.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.IMobileObject.GetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its data. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.IMobileObject.GetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its child references. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the serialization.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.IMobileObject.SetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should be deserialized. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.IMobileObject.SetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should deserialize its child references. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the deserialization.
            </param>
        </member>
        <member name="M:Csla.Core.MobileObject.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Core.MobileObject.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to insert your child object
            references into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.Core.MobileObject.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Core.MobileObject.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to retrieve your child object
            references from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.Core.BindableBase.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.BindableBase.OnIsDirtyChanged">
            <summary>
            Call this method to raise the PropertyChanged event
            for all object properties.
            </summary>
            <remarks>
            This method is for backward compatibility with
            CSLA .NET 1.x.
            </remarks>
        </member>
        <member name="M:Csla.Core.BindableBase.OnUnknownPropertyChanged">
            <summary>
            Call this method to raise the PropertyChanged event
            for all object properties.
            </summary>
            <remarks>
            This method is automatically called by MarkDirty. It
            actually raises PropertyChanged for an empty string,
            which tells data binding to refresh all properties.
            </remarks>
        </member>
        <member name="M:Csla.Core.BindableBase.OnPropertyChanged(System.String)">
            <summary>
            Call this method to raise the PropertyChanged event
            for a specific property.
            </summary>
            <param name="propertyName">Name of the property that
            has changed.</param>
            <remarks>
            This method may be called by properties in the business
            class to indicate the change in a specific property.
            </remarks>
        </member>
        <member name="M:Csla.Core.BindableBase.OnIsDirtyChanging">
            <summary>
            Call this method to raise the PropertyChanging event
            for all object properties.
            </summary>
            <remarks>
            This method is for backward compatibility with
            CSLA .NET 1.x.
            </remarks>
        </member>
        <member name="M:Csla.Core.BindableBase.OnUnknownPropertyChanging">
            <summary>
            Call this method to raise the PropertyChanging event
            for all object properties.
            </summary>
            <remarks>
            This method is automatically called by MarkDirty. It
            actually raises PropertyChanging for an empty string,
            which tells data binding to refresh all properties.
            </remarks>
        </member>
        <member name="M:Csla.Core.BindableBase.OnPropertyChanging(System.String)">
            <summary>
            Call this method to raise the PropertyChanging event
            for a specific property.
            </summary>
            <param name="propertyName">Name of the property that
            has Changing.</param>
            <remarks>
            This method may be called by properties in the business
            class to indicate the change in a specific property.
            </remarks>
        </member>
        <member name="E:Csla.Core.BindableBase.PropertyChanged">
            <summary>
            Implements a serialization-safe PropertyChanged event.
            </summary>
        </member>
        <member name="E:Csla.Core.BindableBase.PropertyChanging">
            <summary>
            Implements a serialization-safe PropertyChanging event.
            </summary>
        </member>
        <member name="T:Csla.Core.IReadOnlyObject">
            <summary>
            Specifies that the object is a readonly
            business object.
            </summary>
        </member>
        <member name="T:Csla.Core.IBusinessObject">
            <summary>
            This is the core interface implemented
            by all CSLA .NET base classes.
            </summary>
        </member>
        <member name="M:Csla.Core.IReadOnlyObject.CanReadProperty(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            calling property.
            </summary>
            <param name="propertyName">Name of the property to read.</param>
        </member>
        <member name="T:Csla.Security.IAuthorizeReadWrite">
            <summary>
            Defines the authorization interface through which an
            object can indicate which properties the current
            user can read and write.
            </summary>
        </member>
        <member name="M:Csla.Security.IAuthorizeReadWrite.CanWriteProperty(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to write the
            to the specified property.
            </summary>
            <returns><see langword="true" /> if write is allowed.</returns>
            <param name="propertyName">Name of the property to read.</param>
        </member>
        <member name="M:Csla.Security.IAuthorizeReadWrite.CanReadProperty(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            specified property.
            </summary>
            <returns><see langword="true" /> if read is allowed.</returns>
            <param name="propertyName">Name of the property to read.</param>
        </member>
        <member name="M:Csla.Security.IAuthorizeReadWrite.CanExecuteMethod(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute 
            the specified method.
            </summary>
            <returns><see langword="true" /> if execute is allowed.</returns>
            <param name="methodName">Name of the method to execute.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetIdValue">
            <summary>
            Override this method to return a unique identifying
            value for this object.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.ToString">
            <summary>
            Returns a text representation of this object by
            returning the <see cref="M:Csla.ReadOnlyBase`1.GetIdValue"/> value
            in text form.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.AddInstanceAuthorizationRules">
            <summary>
            Override this method to add authorization
            rules for your object's properties.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.AddAuthorizationRules">
            <summary>
            Override this method to add per-type
            authorization rules for your type's properties.
            </summary>
            <remarks>
            AddSharedAuthorizationRules is automatically called by CSLA .NET
            when your object should associate per-type authorization roles
            with its properties.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanReadProperty(System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            calling property.
            </summary>
            <returns><see langword="true" /> if read is allowed.</returns>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanReadProperty(System.String,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            calling property.
            </summary>
            <returns><see langword="true" /> if read is allowed.</returns>
            <param name="propertyName">Name of the property to read.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanReadProperty">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            calling property.
            </summary>
            <returns><see langword="true" /> if read is allowed.</returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanReadProperty(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            specified property.
            </summary>
            <param name="propertyName">Name of the property to read.</param>
            <returns><see langword="true" /> if read is allowed.</returns>
            <remarks>
            <para>
            If a list of allowed roles is provided then only users in those
            roles can read. If no list of allowed roles is provided then
            the list of denied roles is checked.
            </para><para>
            If a list of denied roles is provided then users in the denied
            roles are denied read access. All other users are allowed.
            </para><para>
            If neither a list of allowed nor denied roles is provided then
            all users will have read access.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanExecuteMethod(System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the calling method.
            </summary>
            <returns><see langword="true" /> if execute is allowed.</returns>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanExecuteMethod(System.String,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the specified method.
            </summary>
            <returns><see langword="true" /> if execute is allowed.</returns>
            <param name="methodName">Name of the method to execute.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanExecuteMethod">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the calling method.
            </summary>
            <returns><see langword="true" /> if execute is allowed.</returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanExecuteMethod(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the specified method.
            </summary>
            <param name="methodName">Name of the method to execute.</param>
            <returns><see langword="true" /> if execute is allowed.</returns>
            <remarks>
            <para>
            If a list of allowed roles is provided then only users in those
            roles can read. If no list of allowed roles is provided then
            the list of denied roles is checked.
            </para><para>
            If a list of denied roles is provided then users in the denied
            roles are denied read access. All other users are allowed.
            </para><para>
            If neither a list of allowed nor denied roles is provided then
            all users will have read access.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetClone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>A new object containing the exact data of the original object.</returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>
            A new object containing the exact data of the original object.
            </returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.DataPortal_Fetch(System.Object)">
            <summary>
            Override this method to allow retrieval of an existing business
            object based on data in the database.
            </summary>
            <param name="criteria">An object containing criteria values to identify the object.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.Child_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.Child_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.Child_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterProperty``1(System.Type,Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the type.
            </summary>
            <typeparam name="P">
            Type of property.
            </typeparam>
            <param name="objectType">
            Type of object to which the property belongs.
            </param>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">
            Type of property.
            </typeparam>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <returns></returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <returns></returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,``0)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <returns></returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty``1(System.String,``0,``0)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <param name="defaultValue">
            Value to be returned if the user is not
            authorized to read the property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty``1(System.String,``0,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <param name="defaultValue">
            Value to be returned if the user is not
            authorized to read the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty``1(Csla.PropertyInfo{``0},``0,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="defaultValue">
            Value to be returned if the user is not
            authorized to read the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0},``0)">
            <summary>
            Gets a property's value as 
            a specified type, first checking authorization.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0},``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value as a specified type, 
            first checking authorization.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's managed field value, 
            first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value from the list of 
            managed field values, first checking authorization,
            and converting the value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0},Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value from the list of 
            managed field values, first checking authorization,
            and converting the value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty``1(Csla.PropertyInfo{``0},Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value as a specified type, 
            first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.ReadPropertyConvert``2(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value from the list of 
            managed field values, converting the 
            value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.ReadProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.ReadProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.LoadPropertyConvert``2(Csla.PropertyInfo{``0},``1)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.LoadProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.LoadProperty(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.LoadPropertyAsync``2(Csla.PropertyInfo{``0},Csla.Core.AsyncFactoryDelegate{``0,``1},``1)">
            <summary>
            Loads a property value asynchronously.
            </summary>
            <typeparam name="R">Type of the property</typeparam>
            <typeparam name="P">Type of the parameter.</typeparam>
            <param name="property">Property to load.</param>
            <param name="factory">AsyncFactory delegate.</param>
            <param name="parameter">Parameter value.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.LoadPropertyAsync``3(Csla.PropertyInfo{``0},Csla.Core.AsyncFactoryDelegate{``0,``1,``2},``1,``2)">
            <summary>
            Loads a property value asynchronously.
            </summary>
            <typeparam name="R">Type of the property</typeparam>
            <typeparam name="P1">Type of the parameter.</typeparam>
            <typeparam name="P2">Type of the parameter.</typeparam>
            <param name="property">Property to load.</param>
            <param name="factory">AsyncFactory delegate.</param>
            <param name="p1">Parameter value.</param>
            <param name="p2">Parameter value.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.LoadPropertyAsync``4(Csla.PropertyInfo{``0},Csla.Core.AsyncFactoryDelegate{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Loads a property value asynchronously.
            </summary>
            <typeparam name="R">Type of the property</typeparam>
            <typeparam name="P1">Type of the parameter.</typeparam>
            <typeparam name="P2">Type of the parameter.</typeparam>
            <typeparam name="P3">Type of the parameter.</typeparam>
            <param name="property">Property to load.</param>
            <param name="factory">AsyncFactory delegate.</param>
            <param name="p1">Parameter value.</param>
            <param name="p2">Parameter value.</param>
            <param name="p3">Parameter value.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.LoadPropertyAsync``5(Csla.PropertyInfo{``0},Csla.Core.AsyncFactoryDelegate{``0,``1,``2,``3,``4},``1,``2,``3,``4)">
            <summary>
            Loads a property value asynchronously.
            </summary>
            <typeparam name="R">Type of the property</typeparam>
            <typeparam name="P1">Type of the parameter.</typeparam>
            <typeparam name="P2">Type of the parameter.</typeparam>
            <typeparam name="P3">Type of the parameter.</typeparam>
            <typeparam name="P4">Type of the parameter.</typeparam>
            <param name="property">Property to load.</param>
            <param name="factory">AsyncFactory delegate.</param>
            <param name="p1">Parameter value.</param>
            <param name="p2">Parameter value.</param>
            <param name="p3">Parameter value.</param>
            <param name="p4">Parameter value.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.LoadPropertyAsync``6(Csla.PropertyInfo{``0},Csla.Core.AsyncFactoryDelegate{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5)">
            <summary>
            Loads a property value asynchronously.
            </summary>
            <typeparam name="R">Type of the property</typeparam>
            <typeparam name="P1">Type of the parameter.</typeparam>
            <typeparam name="P2">Type of the parameter.</typeparam>
            <typeparam name="P3">Type of the parameter.</typeparam>
            <typeparam name="P4">Type of the parameter.</typeparam>
            <typeparam name="P5">Type of the parameter.</typeparam>
            <param name="property">Property to load.</param>
            <param name="factory">AsyncFactory delegate.</param>
            <param name="p1">Parameter value.</param>
            <param name="p2">Parameter value.</param>
            <param name="p3">Parameter value.</param>
            <param name="p4">Parameter value.</param>
            <param name="p5">Parameter value.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.MarkBusy">
            <summary>
            Marks the object as being busy (it is
            running an async operation).
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.MarkIdle">
            <summary>
            Marks the object as being not busy
            (it is not running an async operation).
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnBusyChanged(System.String,System.Boolean)">
            <summary>
            Raises the BusyChanged event.
            </summary>
            <param name="propertyName">Name of the property
            that has changed.</param>
            <param name="busy">New busy value.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnBusyChanged(Csla.Core.BusyChangedEventArgs)">
            <summary>
            Raises the BusyChanged event.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to insert your child object
            references into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to retrieve your child object
            references from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnUnhandledAsyncException(Csla.Core.ErrorEventArgs)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="error">Error arguments.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnUnhandledAsyncException(System.Object,System.Exception)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="originalSender">Original sender of the
            event.</param>
            <param name="error">Execption that occurred.</param>
        </member>
        <member name="P:Csla.ReadOnlyBase`1.AuthorizationRules">
            <summary>
            Provides access to the AuthorizationRules object for this
            object.
            </summary>
            <remarks>
            Use this object to add a list of allowed and denied roles for
            reading and writing properties of the object. Typically these
            values are added once when the business object is instantiated.
            </remarks>
        </member>
        <member name="P:Csla.ReadOnlyBase`1.FieldManager">
            <summary>
            Gets the PropertyManager object for this
            business object.
            </summary>
        </member>
        <member name="P:Csla.ReadOnlyBase`1.IsBusy">
            <summary>
            Gets a value indicating whether this
            object or any of its child objects are
            running an async operation.
            </summary>
        </member>
        <member name="P:Csla.ReadOnlyBase`1.IsSelfBusy">
            <summary>
            Gets a value indicating whether this
            object is
            running an async operation.
            </summary>
        </member>
        <member name="E:Csla.ReadOnlyBase`1.BusyChanged">
            <summary>
            Event raised when the IsBusy property value
            has changed.
            </summary>
        </member>
        <member name="E:Csla.ReadOnlyBase`1.UnhandledAsyncException">
            <summary>
            Event raised when an exception occurs on a background
            thread during an asynchronous operation.
            </summary>
        </member>
        <member name="T:Csla.Security.ICheckRoles">
            <summary>
            Interface defining an object that
            checks IsInRole.
            </summary>
        </member>
        <member name="M:Csla.Security.ICheckRoles.IsInRole(System.String)">
            <summary>
            Returns a value indicating whether the current
            user is in the specified security role.
            </summary>
            <param name="role">
            Role to check.
            </param>
        </member>
        <member name="M:Csla.Security.CslaIdentity.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Security.CslaIdentity.GetCslaIdentity``1(System.Object)">
            <summary>
            Invokes the data portal to get an instance of
            the identity object.
            </summary>
            <typeparam name="T">
            Type of the CslaIdentity subclass to retrieve.
            </typeparam>
            <param name="criteria">
            Object containing the user's credentials.
            </param>
            <returns></returns>
        </member>
        <member name="M:Csla.Security.CslaIdentity.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method called when the object is deserialized.
            </summary>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Csla.Security.CslaIdentity.RegisterProperty``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="T">Type of object to which the property belongs.</typeparam>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <returns>The provided IPropertyInfo object.</returns>
        </member>
        <member name="M:Csla.Security.CslaIdentity.RegisterProperty``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <returns>The provided IPropertyInfo object.</returns>
        </member>
        <member name="M:Csla.Security.CslaIdentity.RegisterProperty``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,``1)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="T">Type of Target</typeparam>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Security.CslaIdentity.UnauthenticatedIdentity">
            <summary>
            Creates an instance of the class.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.Security.CslaIdentity.Roles">
            <summary>
            Gets or sets the list of roles for this user.
            </summary>
        </member>
        <member name="P:Csla.Security.CslaIdentity.AuthenticationType">
            <summary>
            Gets the authentication type for this identity.
            </summary>
        </member>
        <member name="P:Csla.Security.CslaIdentity.IsAuthenticated">
            <summary>
            Gets a value indicating whether this identity represents
            an authenticated user.
            </summary>
        </member>
        <member name="P:Csla.Security.CslaIdentity.Name">
            <summary>
            Gets the username value.
            </summary>
        </member>
        <member name="M:Csla.Security.UnauthenticatedIdentity.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="T:Csla.Security.MembershipIdentity">
            <summary>
            Implements a .NET identity object that automatically
            authenticates against the ASP.NET membership provider.
            </summary>
            <summary>
            Implements a .NET identity object that automatically
            authenticates against the ASP.NET membership provider.
            </summary>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.LoadCustomData">
            <summary>
            Override this method in a subclass to load custom
            data beyond the automatically loaded values from
            the membership and role providers.
            </summary>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.#ctor">
            <summary>
            Creates an instance of the class.
            </summary>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.GetMembershipIdentity``1(System.String,System.String,System.Boolean)">
            <summary>
            Authenticates the user's credentials against the ASP.NET
            membership provider.
            </summary>
            <typeparam name="T">
            Type of object (subclass of MembershipIdentity) to retrieve.
            </typeparam>
            <param name="userName">Username to authenticate.</param>
            <param name="password">Password to authenticate.</param>
            <param name="isRunOnWebServer">
            Specifies whether to access the membership provider locally (true),
            or through the data portal (false) presumably to reach an application
            server.
            </param>
            <returns></returns>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method invoked when the object is deserialized.
            </summary>
            <param name="context">Serialization context.</param>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.Roles">
            <summary>
            Gets or sets a list of roles for this user.
            </summary>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.AuthenticationType">
            <summary>
            Gets the authentication type for this identity.
            </summary>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.IsAuthenticated">
            <summary>
            Gets a value indicating whether this identity represents
            an authenticated user.
            </summary>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.Name">
            <summary>
            Gets the username value.
            </summary>
        </member>
        <member name="T:Csla.Security.MembershipIdentity.Criteria">
            <summary>
            Criteria object containing the user credentials
            to be authenticated.
            </summary>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.Criteria.#ctor(System.String,System.String,System.Type,System.Boolean)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="name">Username.</param>
            <param name="password">Password.</param>
            <param name="membershipIdentityType">Membership identity type.</param>
            <param name="isRunOnWebServer">
            Access membership provider locally (true) or via the data portal
            on an application server (false).
            </param>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.Criteria.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to get custom field values
            from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.Criteria.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to set custom field values
            into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.Criteria.Name">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.Criteria.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.Criteria.MembershipIdentityType">
            <summary>
            Gets or sets the membership identity type.
            </summary>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.Criteria.IsRunOnWebServer">
            <summary>
            Gets or sets whether the membership provider
            should be access on the client (true) or application
            server (false).
            </summary>
        </member>
        <member name="T:Csla.Data.ServiceClientManager`2">
            <summary>
            Provides an automated way to reuse 
            a service client proxy objects within 
            the context of a single data portal operation.
            </summary>
            <typeparam name="C">
            Type of ClientBase object to use.
            </typeparam>
            <typeparam name="T">
            Channel type for the ClientBase object.
            </typeparam>
        </member>
        <member name="M:Csla.Data.ServiceClientManager`2.GetManager(System.String)">
            <summary>
            Gets the client proxy object for the
            specified name.
            </summary>
            <param name="name">Unique name for the proxy object.</param>
            <returns></returns>
        </member>
        <member name="P:Csla.Data.ServiceClientManager`2.Client">
            <summary>
            Gets a reference to the current client proxy object.
            </summary>
        </member>
        <member name="T:Csla.C5.CharEqualityComparer">
            <summary>
            An equality comparer for type char, also known as System.Char.
            </summary>
        </member>
        <member name="M:Csla.C5.CharEqualityComparer.GetHashCode(System.Char)">
            <summary>
            Get the hash code of this char
            </summary>
            <param name="item">The char</param>
            <returns>The same</returns>
        </member>
        <member name="M:Csla.C5.CharEqualityComparer.Equals(System.Char,System.Char)">
            <summary>
            Check if two chars are equal
            </summary>
            <param name="item1">first char</param>
            <param name="item2">second char</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.CharEqualityComparer.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.SByteEqualityComparer">
            <summary>
            An equality comparer for type sbyte, also known as System.SByte. 
            <para>This class is a singleton and the instance can be accessed
            via the static <see cref="P:C5.SByteEqualityComparer.Default"/> property</para>
            </summary>
        </member>
        <member name="M:Csla.C5.SByteEqualityComparer.GetHashCode(System.SByte)">
            <summary>
            Get the hash code of this sbyte, that is, itself
            </summary>
            <param name="item">The sbyte</param>
            <returns>The same</returns>
        </member>
        <member name="M:Csla.C5.SByteEqualityComparer.Equals(System.SByte,System.SByte)">
            <summary>
            Determine whether two sbytes are equal
            </summary>
            <param name="item1">first sbyte</param>
            <param name="item2">second sbyte</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.SByteEqualityComparer.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.ByteEqualityComparer">
            <summary>
            An equality comparer for type byte, also known as System.Byte.
            <para>This class is a singleton and the instance can be accessed
            via the <see cref="P:C5.ByteEqualityComparer.Default"/> property</para>
            </summary>
        </member>
        <member name="M:Csla.C5.ByteEqualityComparer.GetHashCode(System.Byte)">
            <summary>
            Get the hash code of this byte, i.e. itself
            </summary>
            <param name="item">The byte</param>
            <returns>The same</returns>
        </member>
        <member name="M:Csla.C5.ByteEqualityComparer.Equals(System.Byte,System.Byte)">
            <summary>
            Check if two bytes are equal
            </summary>
            <param name="item1">first byte</param>
            <param name="item2">second byte</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.ByteEqualityComparer.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.ShortEqualityComparer">
            <summary>
            An equality comparer for type short, also known as System.Int16. 
            <para>This class is a singleton and the instance can be accessed
            via the static <see cref="P:C5.ShortEqualityComparer.Default"/> property</para>
            </summary>
        </member>
        <member name="M:Csla.C5.ShortEqualityComparer.GetHashCode(System.Int16)">
            <summary>
            Get the hash code of this short, that is, itself
            </summary>
            <param name="item">The short</param>
            <returns>The same</returns>
        </member>
        <member name="M:Csla.C5.ShortEqualityComparer.Equals(System.Int16,System.Int16)">
            <summary>
            Determine whether two shorts are equal
            </summary>
            <param name="item1">first short</param>
            <param name="item2">second short</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.ShortEqualityComparer.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.UShortEqualityComparer">
            <summary>
            An equality comparer for type ushort, also known as System.UInt16. 
            <para>This class is a singleton and the instance can be accessed
            via the static <see cref="P:C5.UShortEqualityComparer.Default"/> property</para>
            </summary>
        </member>
        <member name="M:Csla.C5.UShortEqualityComparer.GetHashCode(System.UInt16)">
            <summary>
            Get the hash code of this ushort, that is, itself
            </summary>
            <param name="item">The ushort</param>
            <returns>The same</returns>
        </member>
        <member name="M:Csla.C5.UShortEqualityComparer.Equals(System.UInt16,System.UInt16)">
            <summary>
            Determine whether two ushorts are equal
            </summary>
            <param name="item1">first ushort</param>
            <param name="item2">second ushort</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.UShortEqualityComparer.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.IntEqualityComparer">
            <summary>
            An equality comparer for type int, also known as System.Int32. 
            <para>This class is a singleton and the instance can be accessed
            via the static <see cref="P:C5.IntEqualityComparer.Default"/> property</para>
            </summary>
        </member>
        <member name="M:Csla.C5.IntEqualityComparer.GetHashCode(System.Int32)">
            <summary>
            Get the hash code of this integer, that is, itself
            </summary>
            <param name="item">The integer</param>
            <returns>The same</returns>
        </member>
        <member name="M:Csla.C5.IntEqualityComparer.Equals(System.Int32,System.Int32)">
            <summary>
            Determine whether two integers are equal
            </summary>
            <param name="item1">first integer</param>
            <param name="item2">second integer</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.IntEqualityComparer.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.UIntEqualityComparer">
            <summary>
            An equality comparer for type uint, also known as System.UInt32. 
            <para>This class is a singleton and the instance can be accessed
            via the static <see cref="P:C5.UIntEqualityComparer.Default"/> property</para>
            </summary>
        </member>
        <member name="M:Csla.C5.UIntEqualityComparer.GetHashCode(System.UInt32)">
            <summary>
            Get the hash code of this unsigned integer
            </summary>
            <param name="item">The integer</param>
            <returns>The same bit pattern as a signed integer</returns>
        </member>
        <member name="M:Csla.C5.UIntEqualityComparer.Equals(System.UInt32,System.UInt32)">
            <summary>
            Determine whether two unsigned integers are equal
            </summary>
            <param name="item1">first unsigned integer</param>
            <param name="item2">second unsigned integer</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.UIntEqualityComparer.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.LongEqualityComparer">
            <summary>
            An equality comparer for type long, also known as System.Int64. 
            <para>This class is a singleton and the instance can be accessed
            via the static <see cref="P:C5.LongEqualityComparer.Default"/> property</para>
            </summary>
        </member>
        <member name="M:Csla.C5.LongEqualityComparer.GetHashCode(System.Int64)">
            <summary>
            Get the hash code of this long integer
            </summary>
            <param name="item">The long integer</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Csla.C5.LongEqualityComparer.Equals(System.Int64,System.Int64)">
            <summary>
            Determine whether two long integers are equal
            </summary>
            <param name="item1">first long integer</param>
            <param name="item2">second long integer</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.LongEqualityComparer.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.ULongEqualityComparer">
            <summary>
            An equality comparer for type uint, also known as System.UInt64. 
            <para>This class is a singleton and the instance can be accessed
            via the static <see cref="P:C5.ULongEqualityComparer.Default"/> property</para>
            </summary>
        </member>
        <member name="M:Csla.C5.ULongEqualityComparer.GetHashCode(System.UInt64)">
            <summary>
            Get the hash code of this unsigned long integer
            </summary>
            <param name="item">The unsigned long integer</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Csla.C5.ULongEqualityComparer.Equals(System.UInt64,System.UInt64)">
            <summary>
            Determine whether two unsigned long integers are equal
            </summary>
            <param name="item1">first unsigned long integer</param>
            <param name="item2">second unsigned long integer</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.ULongEqualityComparer.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.FloatEqualityComparer">
            <summary>
            An equality comparer for type float, also known as System.Single. 
            <para>This class is a singleton and the instance can be accessed
            via the static <see cref="P:C5.FloatEqualityComparer.Default"/> property</para>
            </summary>
        </member>
        <member name="M:Csla.C5.FloatEqualityComparer.GetHashCode(System.Single)">
            <summary>
            Get the hash code of this float
            </summary>
            <param name="item">The float</param>
            <returns>The same</returns>
        </member>
        <member name="M:Csla.C5.FloatEqualityComparer.Equals(System.Single,System.Single)">
            <summary>
            Check if two floats are equal
            </summary>
            <param name="item1">first float</param>
            <param name="item2">second float</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.FloatEqualityComparer.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.DoubleEqualityComparer">
            <summary>
            An equality comparer for type double, also known as System.Double.
            <para>This class is a singleton and the instance can be accessed
            via the static <see cref="P:C5.DoubleEqualityComparer.Default"/> property</para>
            </summary>
        </member>
        <member name="M:Csla.C5.DoubleEqualityComparer.GetHashCode(System.Double)">
            <summary>
            Get the hash code of this double
            </summary>
            <param name="item">The double</param>
            <returns>The same</returns>
        </member>
        <member name="M:Csla.C5.DoubleEqualityComparer.Equals(System.Double,System.Double)">
            <summary>
            Check if two doubles are equal
            </summary>
            <param name="item1">first double</param>
            <param name="item2">second double</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.DoubleEqualityComparer.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.DecimalEqualityComparer">
            <summary>
            An equality comparer for type decimal, also known as System.Decimal. 
            <para>This class is a singleton and the instance can be accessed
            via the static <see cref="P:C5.DecimalEqualityComparer.Default"/> property</para>
            </summary>
        </member>
        <member name="M:Csla.C5.DecimalEqualityComparer.GetHashCode(System.Decimal)">
            <summary>
            Get the hash code of this decimal.
            </summary>
            <param name="item">The decimal</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Csla.C5.DecimalEqualityComparer.Equals(System.Decimal,System.Decimal)">
            <summary>
            Determine whether two decimals are equal
            </summary>
            <param name="item1">first decimal</param>
            <param name="item2">second decimal</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.DecimalEqualityComparer.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.CircularQueue`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Csla.C5.IQueue`1">
            <summary>
            The interface describing the operations of a FIFO queue data structure.
            </summary>
            <typeparam name="T">The item type</typeparam>
        </member>
        <member name="M:Csla.C5.IQueue`1.Enqueue(`0)">
            <summary>
            Enqueue an item at the back of the queue. 
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:Csla.C5.IQueue`1.Dequeue">
            <summary>
            Dequeue an item from the front of the queue.
            </summary>
            <returns>The item</returns>
        </member>
        <member name="P:Csla.C5.IQueue`1.AllowsDuplicates">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.IQueue`1.Item(System.Int32)">
            <summary>
            Get the <code>index</code>'th element of the queue.  The front of the queue has index 0.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.IStack`1">
            <summary>
            The interface describing the operations of a LIFO stack data structure.
            </summary>
            <typeparam name="T">The item type</typeparam>
        </member>
        <member name="M:Csla.C5.IStack`1.Push(`0)">
            <summary>
            Push an item to the top of the stack.
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:Csla.C5.IStack`1.Pop">
            <summary>
            Pop the item at the top of the stack from the stack.
            </summary>
            <returns>The popped item.</returns>
        </member>
        <member name="P:Csla.C5.IStack`1.AllowsDuplicates">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.IStack`1.Item(System.Int32)">
            <summary>
            Get the <code>index</code>'th element of the stack.  The bottom of the stack has index 0.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:Csla.C5.CircularQueue`1.array">
            <summary>
            The internal container array is doubled when necessary, but never shrinked.
            </summary>
        </member>
        <member name="M:Csla.C5.CircularQueue`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.CircularQueue`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Csla.C5.CircularQueue`1.Enqueue(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.CircularQueue`1.Dequeue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.CircularQueue`1.Push(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.CircularQueue`1.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.CircularQueue`1.Choose">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.CircularQueue`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.CircularQueue`1.Backwards">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.CircularQueue`1.Csla#C5#IDirectedEnumerable{T}#Backwards">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.CircularQueue`1.Check">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.CircularQueue`1.ListenableEvents">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.CircularQueue`1.AllowsDuplicates">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.CircularQueue`1.Item(System.Int32)">
            <summary>
            Get the i'th item in the queue. The front of the queue is at index 0.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.Wpf.ExecuteEventArgs">
            <summary>
            Arguments passed to a method invoked
            by the Execute trigger action.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ExecuteEventArgs.TriggerSource">
            <summary>
            The control that raised the event that
            triggered invocation of this method.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ExecuteEventArgs.MethodParameter">
            <summary>
            The MethodParameter value provided by
            the designer.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ExecuteEventArgs.TriggerParameter">
            <summary>
            The EventArgs parameter from the event
            that triggered invocation of this method.
            </summary>
        </member>
        <member name="T:Csla.Validation.ValidationRules">
            <summary>
            Tracks the business rules broken within a business object.
            </summary>
        </member>
        <member name="M:Csla.Validation.ValidationRules.GetRuleDescriptions">
            <summary>
            Returns an array containing the text descriptions of all
            validation rules associated with this object.
            </summary>
            <returns>String array.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddInstanceRule(Csla.Validation.RuleHandler,System.String)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddInstanceRule(Csla.Validation.RuleHandler,System.String,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddInstanceRule``1(Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},System.String)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
            <typeparam name="T">Type of the business object to be validated.</typeparam>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddInstanceRule``1(Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},System.String,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
            <typeparam name="T">Type of the business object to be validated.</typeparam>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddInstanceRule(Csla.Validation.RuleHandler,Csla.Validation.RuleArgs)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddInstanceRule(Csla.Validation.RuleHandler,Csla.Validation.RuleArgs,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddInstanceRule``2(Csla.Validation.RuleHandler{``0,``1},``1)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <typeparam name="T">Type of the target object.</typeparam>
            <typeparam name="R">Type of the arguments parameter.</typeparam>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddInstanceRule``2(Csla.Validation.RuleHandler{``0,``1},``1,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <typeparam name="T">Type of the target object.</typeparam>
            <typeparam name="R">Type of the arguments parameter.</typeparam>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule(Csla.Validation.AsyncRuleHandler,Csla.Core.IPropertyInfo,Csla.Core.IPropertyInfo[])">
            <summary>
            Adds an async rule to the list of rules to be enforced.
            </summary>
            <param name="handler">
            The method that implements the rule.
            </param>
            <param name="primaryProperty">
            The primary property checked by this rule.
            </param>
            <param name="additionalProperties">
            A list of other property values required by
            this rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule(Csla.Validation.AsyncRuleHandler,Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Adds an async rule to the list of rules to be enforced.
            </summary>
            <param name="handler">
            The method that implements the rule.
            </param>
            <param name="primaryProperty">
            The primary property checked by this rule.
            </param>
            <param name="priority">Priority for the rule</param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule(Csla.Validation.AsyncRuleHandler,Csla.Validation.AsyncRuleArgs)">
            <summary>
            Adds an async rule to the list of rules to be enforced.
            </summary>
            <param name="handler">
            The method that implements the rule.
            </param>
            <param name="args">
            An AsyncRuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule(Csla.Validation.AsyncRuleHandler,Csla.Validation.AsyncRuleArgs,System.Int32)">
            <summary>
            Adds an async rule to the list of rules to be enforced.
            </summary>
            <param name="handler">
            The method that implements the rule.
            </param>
            <param name="args">
            An AsyncRuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
            <param name="priority">Priority for the rule</param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule(Csla.Validation.RuleHandler,Csla.Core.IPropertyInfo)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyInfo">
            The PropertyInfo object describing the property.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule(Csla.Validation.RuleHandler,System.String)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule(Csla.Validation.RuleHandler,Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyInfo">
            The PropertyInfo object describing the property.
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule(Csla.Validation.RuleHandler,System.String,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule``1(Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},Csla.Core.IPropertyInfo)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyInfo">
            The PropertyInfo object describing the property.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule``1(Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},System.String)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule``1(Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},Csla.Validation.RuleArgs)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule``1(Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyInfo">
            The PropertyInfo object describing the property.
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule``1(Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},System.String,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule(Csla.Validation.RuleHandler,Csla.Validation.RuleArgs)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule(Csla.Validation.RuleHandler,Csla.Validation.RuleArgs,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule``2(Csla.Validation.RuleHandler{``0,``1},``1)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <typeparam name="T">Type of the target object.</typeparam>
            <typeparam name="R">Type of the arguments parameter.</typeparam>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddRule``2(Csla.Validation.RuleHandler{``0,``1},``1,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <typeparam name="T">Type of the target object.</typeparam>
            <typeparam name="R">Type of the arguments parameter.</typeparam>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddDependentProperty(Csla.Core.IPropertyInfo,Csla.Core.IPropertyInfo)">
            <summary>
            Adds a property to the list of dependencies for
            the specified property
            </summary>
            <param name="propertyInfo">
            PropertyInfo for the property.
            </param>
            <param name="dependentPropertyInfo">
            PropertyInfo for the depandent property.
            </param>
            <remarks>
            When rules are checked for propertyName, they will
            also be checked for any dependent properties associated
            with that property.
            </remarks>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddDependentProperty(System.String,System.String)">
            <summary>
            Adds a property to the list of dependencies for
            the specified property
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="dependentPropertyName">
            The name of the depandent property.
            </param>
            <remarks>
            When rules are checked for propertyName, they will
            also be checked for any dependent properties associated
            with that property.
            </remarks>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddDependantProperty(System.String,System.String)">
            <summary>
            Adds a property to the list of dependencies for
            the specified property
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="dependantPropertyName">
            The name of the depandent property.
            </param>
            <remarks>
            When rules are checked for propertyName, they will
            also be checked for any dependent properties associated
            with that property.
            </remarks>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddDependentProperty(Csla.Core.IPropertyInfo,Csla.Core.IPropertyInfo,System.Boolean)">
            <summary>
            Adds a property to the list of dependencies for
            the specified property
            </summary>
            <param name="propertyInfo">
            PropertyInfo for the property.
            </param>
            <param name="dependentPropertyInfo">
            PropertyInfo for the depandent property.
            </param>
            <param name="isBidirectional">
            If <see langword="true"/> then a 
            reverse dependancy is also established
            from dependentPropertyName to propertyName.
            </param>
            <remarks>
            When rules are checked for propertyName, they will
            also be checked for any dependent properties associated
            with that property. If isBidirectional is 
            <see langword="true"/> then an additional association
            is set up so when rules are checked for
            dependentPropertyName the rules for propertyName
            will also be checked.
            </remarks>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddDependentProperty(System.String,System.String,System.Boolean)">
            <summary>
            Adds a property to the list of dependencies for
            the specified property
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="dependentPropertyName">
            The name of the depandent property.
            </param>
            <param name="isBidirectional">
            If <see langword="true"/> then a 
            reverse dependancy is also established
            from dependentPropertyName to propertyName.
            </param>
            <remarks>
            When rules are checked for propertyName, they will
            also be checked for any dependent properties associated
            with that property. If isBidirectional is 
            <see langword="true"/> then an additional association
            is set up so when rules are checked for
            dependentPropertyName the rules for propertyName
            will also be checked.
            </remarks>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddDependantProperty(System.String,System.String,System.Boolean)">
            <summary>
            Adds a property to the list of dependencies for
            the specified property
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="dependantPropertyName">
            The name of the depandent property.
            </param>
            <param name="isBidirectional">
            If <see langword="true"/> then a 
            reverse dependancy is also established
            from dependantPropertyName to propertyName.
            </param>
            <remarks>
            When rules are checked for propertyName, they will
            also be checked for any dependent properties associated
            with that property. If isBidirectional is 
            <see langword="true"/> then an additional association
            is set up so when rules are checked for
            dependantPropertyName the rules for propertyName
            will also be checked.
            </remarks>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddDataAnnotations">
            <summary>
            Adds validation rules corresponding to property
            data annotation attributes.
            </summary>
        </member>
        <member name="M:Csla.Validation.ValidationRules.AddDataAnnotations(System.EventHandler{Csla.Validation.AddRuleArgs})">
            <summary>
            Adds validation rules corresponding to property
            data annotation attributes.
            </summary>
            <param name="ruleAdder">
            Method invoked to add rules as data annotation
            attributes are found on properties.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.CheckRules(Csla.Core.IPropertyInfo)">
            <summary>
            Invokes all rule methods associated with
            the specified property and any 
            dependent properties.
            </summary>
            <param name="propertyInfo">
            Property to validate.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.CheckRules(System.String)">
            <summary>
            Invokes all rule methods associated with
            the specified property and any 
            dependent properties.
            </summary>
            <param name="propertyName">The name of the property to validate.</param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.CheckRules">
            <summary>
            Invokes all rule methods for all properties
            in the object.
            </summary>
        </member>
        <member name="M:Csla.Validation.ValidationRules.CheckRules(System.Collections.Generic.List{Csla.Validation.IRuleMethod})">
            <summary>
            Given a list
            containing IRuleMethod objects, this
            method executes all those rule methods.
            </summary>
        </member>
        <member name="M:Csla.Validation.ValidationRules.GetBrokenRules">
            <summary>
            Returns a reference to the readonly collection of broken
            business rules.
            </summary>
            <remarks>
            The reference returned points to the actual collection object.
            This means that as rules are marked broken or unbroken over time,
            the underlying data will change. Because of this, the UI developer
            can bind a display directly to this collection to get a dynamic
            display of the broken rules at all times.
            </remarks>
            <returns>A reference to the collection of broken rules.</returns>
        </member>
        <member name="M:Csla.Validation.ValidationRules.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to insert your child object
            references into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.Validation.ValidationRules.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to retrieve your child object
            references from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="P:Csla.Validation.ValidationRules.ProcessThroughPriority">
            <summary>
            Gets or sets the priority through which
            CheckRules should process before short-circuiting
            processing on broken rules.
            </summary>
            <value>Defaults to 0.</value>
            <remarks>
            All rules for each property are processed by CheckRules
            though this priority. Rules with lower priorities are
            only processed if no previous rule has been marked as
            broken.
            </remarks>
        </member>
        <member name="P:Csla.Validation.ValidationRules.SuppressRuleChecking">
            <summary>
            Gets or sets a value indicating whether calling
            CheckRules should result in rule
            methods being invoked.
            </summary>
            <value>True to suppress all rule method invocation.</value>
        </member>
        <member name="P:Csla.Validation.ValidationRules.IsValid">
            <summary>
            Returns a value indicating whether there are any broken rules
            at this time. 
            </summary>
            <returns>A value indicating whether any rules are broken.</returns>
        </member>
        <member name="T:Csla.Validation.CommonRules">
            <summary>
            Implements common business rules.
            </summary>
        </member>
        <member name="M:Csla.Validation.CommonRules.StringRequired(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring a string value contains one or more
            characters.
            </summary>
            <param name="target">Object containing the data to validate</param>
            <param name="e">Arguments parameter specifying the name of the string
            property to validate</param>
            <returns><see langword="false" /> if the rule is broken</returns>
            <remarks>
            This implementation uses late binding, and will only work
            against string property values.
            </remarks>
        </member>
        <member name="M:Csla.Validation.CommonRules.StringMaxLength(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring a string value doesn't exceed
            a specified length.
            </summary>
            <param name="target">Object containing the data to validate</param>
            <param name="e">Arguments parameter specifying the name of the string
            property to validate</param>
            <returns><see langword="false" /> if the rule is broken</returns>
            <remarks>
            This implementation uses late binding, and will only work
            against string property values.
            </remarks>
        </member>
        <member name="M:Csla.Validation.CommonRules.StringMinLength(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring a string value has a
            minimum length.
            </summary>
            <param name="target">Object containing the data to validate</param>
            <param name="e">Arguments parameter specifying the name of the string
            property to validate</param>
            <returns><see langword="false" /> if the rule is broken</returns>
            <remarks>
            This implementation uses late binding, and will only work
            against string property values.
            </remarks>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValue(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring an integer value doesn't exceed
            a specified value.
            </summary>
            <param name="target">Object containing the data to validate.</param>
            <param name="e">Arguments parameter specifying the name of the
            property to validate.</param>
            <returns><see langword="false"/> if the rule is broken.</returns>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValue(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring an integer value doesn't go below
            a specified value.
            </summary>
            <param name="target">Object containing the data to validate.</param>
            <param name="e">Arguments parameter specifying the name of the
            property to validate.</param>
            <returns><see langword="false"/> if the rule is broken.</returns>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValue``1(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring that a numeric value
            doesn't exceed a specified maximum.
            </summary>
            <typeparam name="T">Type of the property to validate.</typeparam>
            <param name="target">Object containing value to validate.</param>
            <param name="e">Arguments variable specifying the
            name of the property to validate, along with the max
            allowed value.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValue``1(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring that a numeric value
            doesn't exceed a specified minimum.
            </summary>
            <typeparam name="T">Type of the property to validate.</typeparam>
            <param name="target">Object containing value to validate.</param>
            <param name="e">Arguments variable specifying the
            name of the property to validate, along with the min
            allowed value.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExMatch(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule that checks to make sure a value
            matches a given regex pattern.
            </summary>
            <param name="target">Object containing the data to validate</param>
            <param name="e">RegExRuleArgs parameter specifying the name of the 
            property to validate and the regex pattern.</param>
            <returns>False if the rule is broken</returns>
            <remarks>
            This implementation uses late binding.
            </remarks>
        </member>
        <member name="M:Csla.Validation.CommonRules.CanRead(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule indicating whether the user is authorized
            to read the property value.
            </summary>
            <param name="target">Target object.</param>
            <param name="e">Rule arguments.</param>
            <remarks>
            Combine this property with short-circuiting to
            prevent evaluation of other rules in the case
            that the user isn't allowed to read the value.
            </remarks>
        </member>
        <member name="M:Csla.Validation.CommonRules.CanWrite(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule indicating whether the user is authorized
            to change the property value.
            </summary>
            <param name="target">Target object.</param>
            <param name="e">Rule arguments.</param>
            <remarks>
            Combine this property with short-circuiting to
            prevent evaluation of other rules in the case
            that the user isn't allowed to change the value.
            </remarks>
        </member>
        <member name="M:Csla.Validation.CommonRules.DataAnnotation(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule method that executes a rule contained in an 
            System.ComponentModel.DataAnnotations.ValidationAttribute
            object.
            </summary>
            <param name="target">
            Business object containing the value to validate.
            </param>
            <param name="e">
            DataAnnotationRuleArgs object.
            </param>
            <returns>True if the rule is satisfied, false if the rule fails.</returns>
        </member>
        <member name="T:Csla.Validation.CommonRules.MaxLengthRuleArgs">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="M:Csla.Validation.CommonRules.StringMaxLength(System.Object,Csla.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="T:Csla.Validation.DecoratedRuleArgs">
            <summary>
            Object providing extra information to methods that
            implement business rules.
            </summary>
        </member>
        <member name="T:Csla.Validation.RuleArgs">
            <summary>
            Object providing extra information to methods that
            implement business rules.
            </summary>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(System.String)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(Csla.Core.IPropertyInfo)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo object for the property.</param>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(System.String,Csla.Validation.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Validation.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(System.String,System.String,Csla.Validation.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(System.String,Csla.Validation.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Validation.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(System.String,System.String,Csla.Validation.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleArgs.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="M:Csla.Validation.RuleArgs.GetPropertyName(Csla.Validation.RuleArgs)">
            <summary>
            Gets the property name from the RuleArgs
            object, using the friendly name if one
            is defined.
            </summary>
            <param name="e">Object from which to 
            extract the name.</param>
            <returns>
            The friendly property name if it exists,
            otherwise the property name itself.
            </returns>
        </member>
        <member name="P:Csla.Validation.RuleArgs.PropertyName">
            <summary>
            The name of the property to be validated.
            </summary>
        </member>
        <member name="P:Csla.Validation.RuleArgs.PropertyFriendlyName">
            <summary>
            Gets or sets a friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.
            </summary>
        </member>
        <member name="P:Csla.Validation.RuleArgs.Description">
            <summary>
            Set by the rule handler method to describe the broken
            rule.
            </summary>
            <value>A human-readable description of
            the broken rule.</value>
            <remarks>
            Setting this property only has an effect if
            the rule method returns <see langword="false" />.
            </remarks>
        </member>
        <member name="P:Csla.Validation.RuleArgs.Severity">
            <summary>
            Gets or sets the severity of the broken rule.
            </summary>
            <value>The severity of the broken rule.</value>
            <remarks>
            Setting this property only has an effect if
            the rule method returns <see langword="false" />.
            </remarks>
        </member>
        <member name="P:Csla.Validation.RuleArgs.StopProcessing">
            <summary>
            Gets or sets a value indicating whether this
            broken rule should stop the processing of subsequent
            rules for this property.
            </summary>
            <value><see langword="true" /> if no further
            rules should be process for this property.</value>
            <remarks>
            Setting this property only has an effect if
            the rule method returns <see langword="false" />.
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(Csla.Core.IPropertyInfo)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property to be validated.</param>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,Csla.Validation.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Validation.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,Csla.Validation.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,Csla.Validation.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Validation.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,Csla.Validation.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property to be validated.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,Csla.Validation.RuleSeverity,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Validation.RuleSeverity,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,Csla.Validation.RuleSeverity,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,Csla.Validation.RuleSeverity,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Validation.RuleSeverity,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,Csla.Validation.RuleSeverity,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.ToString">
            <summary>
            Return a string representation of
            the object using the rule:// URI
            format.
            </summary>
        </member>
        <member name="P:Csla.Validation.DecoratedRuleArgs.Item(System.String)">
            <summary>
            Gets or sets an argument value for use
            by the rule method.
            </summary>
            <param name="key">The name under which the value is stored.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="maxLength">Max length of characters allowed.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxLengthRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">PropertyInfo for the property to validate.</param>
            <param name="maxLength">Max length of characters allowed.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxLength">Max length of characters allowed.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="maxLength">Max length of characters allowed.</param>
            <param name="format">Format string for the max length
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxLengthRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">PropertyInfo for the property to validate.</param>
            <param name="maxLength">Max length of characters allowed.</param>
            <param name="format">Format string for the max length
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxLength">Max length of characters allowed.</param>
            <param name="format">Format string for the max length
            value in the broken rule string.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.MaxLengthRuleArgs.MaxLength">
            <summary>
            Get the max length for the string.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.MinLengthRuleArgs">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="M:Csla.Validation.CommonRules.StringMinLength(System.Object,Csla.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinLengthRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="minLength">min length of characters allowed.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinLengthRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="minLength">min length of characters allowed.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinLengthRuleArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minLength">min length of characters allowed.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinLengthRuleArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="minLength">min length of characters allowed.</param>
            <param name="format">Format string for the min length
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinLengthRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="minLength">min length of characters allowed.</param>
            <param name="format">Format string for the min length
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinLengthRuleArgs.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minLength">min length of characters allowed.</param>
            <param name="format">Format string for the min length
            value in the broken rule string.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.MinLengthRuleArgs.MinLength">
            <summary>
            Get the min length for the string.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="M:Csla.Validation.CommonRules.IntegerMaxValue(System.Object,Csla.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.MaxValue">
            <summary>
            Get the max value for the property.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.IntegerMinValueRuleArgs">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="M:Csla.Validation.CommonRules.IntegerMinValue(System.Object,Csla.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.MinValue">
            <summary>
            Get the min value for the property.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.MaxValueRuleArgs`1">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="P:Csla.Validation.CommonRules.MaxValueRuleArgs`1.MaxValue"/> rule method.
            </summary>
            <typeparam name="T">Type of the property to validate.</typeparam>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(System.String,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(Csla.Core.IPropertyInfo,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(System.String,System.String,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(System.String,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(Csla.Core.IPropertyInfo,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(System.String,System.String,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.MaxValueRuleArgs`1.MaxValue">
            <summary>
            Get the max value for the property.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.MinValueRuleArgs`1">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="P:Csla.Validation.CommonRules.MinValueRuleArgs`1.MinValue"/> rule method.
            </summary>
            <typeparam name="T">Type of the property to validate.</typeparam>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValueRuleArgs`1.#ctor(System.String,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValueRuleArgs`1.#ctor(Csla.Core.IPropertyInfo,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValueRuleArgs`1.#ctor(System.String,System.String,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValueRuleArgs`1.#ctor(System.String,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValueRuleArgs`1.#ctor(Csla.Core.IPropertyInfo,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValueRuleArgs`1.#ctor(System.String,System.String,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.MinValueRuleArgs`1.MinValue">
            <summary>
            Get the min value for the property.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.RegExPatterns">
            <summary>
            List of built-in regex patterns.
            </summary>
        </member>
        <member name="F:Csla.Validation.CommonRules.RegExPatterns.SSN">
            <summary>
            US Social Security number pattern.
            </summary>
        </member>
        <member name="F:Csla.Validation.CommonRules.RegExPatterns.Email">
            <summary>
            Email address pattern.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.RegExRuleArgs">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="M:Csla.Validation.CommonRules.RegExMatch(System.Object,Csla.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,Csla.Validation.CommonRules.RegExPatterns)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Validation.CommonRules.RegExPatterns)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,Csla.Validation.CommonRules.RegExPatterns)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="pattern">Custom regex pattern to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.String)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="pattern">Custom regex pattern to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="pattern">Custom regex pattern to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="regEx"><see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="regEx"><see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="regEx"><see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,Csla.Validation.CommonRules.RegExPatterns,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Validation.CommonRules.RegExPatterns,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,Csla.Validation.CommonRules.RegExPatterns,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="pattern">Custom regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.String,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="pattern">Custom regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,System.String,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="pattern">Custom regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.Text.RegularExpressions.Regex,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="regEx"><see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Text.RegularExpressions.Regex,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="regEx"><see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,System.Text.RegularExpressions.Regex,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="regEx"><see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.GetPattern(Csla.Validation.CommonRules.RegExPatterns)">
            <summary>
            Returns the specified built-in regex pattern.
            </summary>
            <param name="pattern">Pattern to return.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx">
            <summary>
            The <see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object used to validate
            the property.
            </summary>
        </member>
        <member name="P:Csla.Validation.CommonRules.RegExRuleArgs.NullResult">
            <summary>
            Gets a value indicating whether a null value
            means the rule will return true or false.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions">
            <summary>
            List of options for the NullResult
            property.
            </summary>
        </member>
        <member name="F:Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions.ReturnFalse">
            <summary>
            Indicates that a null value
            should always result in the 
            rule returning false.
            </summary>
        </member>
        <member name="F:Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions.ReturnTrue">
            <summary>
            Indicates that a null value
            should always result in the 
            rule returning true.
            </summary>
        </member>
        <member name="F:Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions.ConvertToEmptyString">
            <summary>
            Indicates that a null value
            should be converted to an
            empty string before the
            regular expression is
            evaluated.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.DataAnnotationRuleArgs">
            <summary>
            Arguments provided to the DataAnnotation
            rule method
            </summary>
        </member>
        <member name="M:Csla.Validation.CommonRules.DataAnnotationRuleArgs.#ctor(System.String,System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="name">
            Name of the property to be validated.
            </param>
            <param name="attribute">
            System.ComponentModel.DataAnnotations.ValidationAttribute object
            containing the rule implementation.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.DataAnnotationRuleArgs.ToString">
            <summary>
            Gets a string representation of the object.
            </summary>
        </member>
        <member name="P:Csla.Validation.CommonRules.DataAnnotationRuleArgs.Attribute">
            <summary>
            The attribute containing the rule implementation.
            </summary>
        </member>
        <member name="T:Csla.Security.PrincipalCache">
            <summary>
            Provides a cache for a limited number of
            principal objects at the AppDomain level.
            </summary>
        </member>
        <member name="M:Csla.Security.PrincipalCache.GetPrincipal(System.String)">
            <summary>
            Gets a principal from the cache based on
            the identity name. If no match is found null
            is returned.
            </summary>
            <param name="name">
            The identity name associated with the principal.
            </param>
        </member>
        <member name="M:Csla.Security.PrincipalCache.AddPrincipal(System.Security.Principal.IPrincipal)">
            <summary>
            Adds a principal to the cache.
            </summary>
            <param name="principal">
            IPrincipal object to be added.
            </param>
        </member>
        <member name="M:Csla.Security.PrincipalCache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:Csla.Security.BusinessPrincipalBase">
            <summary>
            Base class from which custom principal
            objects should inherit to operate
            properly with the data portal.
            </summary>
        </member>
        <member name="M:Csla.Security.BusinessPrincipalBase.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Security.BusinessPrincipalBase.IsInRole(System.String)">
            <summary>
            Returns a value indicating whether the
            user is in a given role.
            </summary>
            <param name="role">Name of the role.</param>
        </member>
        <member name="M:Csla.Security.BusinessPrincipalBase.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="identity">Identity object for the user.</param>
        </member>
        <member name="M:Csla.Security.BusinessPrincipalBase.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to get custom field values
            from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="M:Csla.Security.BusinessPrincipalBase.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to set custom field values
            ito the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="P:Csla.Security.BusinessPrincipalBase.Identity">
            <summary>
            Returns the user's identity object.
            </summary>
        </member>
        <member name="T:Csla.PropertyInfo`1">
            <summary>
            Maintains metadata about a property.
            </summary>
            <typeparam name="T">
            Data type of the property.
            </typeparam>
        </member>
        <member name="T:Csla.Core.IPropertyInfo">
            <summary>
            Maintains metadata about a property.
            </summary>
        </member>
        <member name="M:Csla.Core.IPropertyInfo.NewFieldData(System.String)">
            <summary>
            Gets a new field data container for the property.
            </summary>
        </member>
        <member name="P:Csla.Core.IPropertyInfo.Name">
            <summary>
            Gets the property name value.
            </summary>
        </member>
        <member name="P:Csla.Core.IPropertyInfo.Type">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:Csla.Core.IPropertyInfo.FriendlyName">
            <summary>
            Gets the friendly display name
            for the property.
            </summary>
        </member>
        <member name="P:Csla.Core.IPropertyInfo.DefaultValue">
            <summary>
            Gets the default initial value for the property.
            </summary>
            <remarks>
            This value is used to initialize the property's
            value, and is returned from a property get
            if the user is not authorized to 
            read the property.
            </remarks>
        </member>
        <member name="P:Csla.Core.IPropertyInfo.RelationshipType">
            <summary>
            Gets the relationship between the declaring object
            and the object reference in the property.
            </summary>
        </member>
        <member name="P:Csla.Core.IPropertyInfo.Index">
            <summary>
            Gets or sets the index position for the managed
            field storage behind the property. FOR
            INTERNAL CSLA .NET USE ONLY.
            </summary>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor(System.String)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor(System.String,System.String,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="relationship">Relationship with
            referenced object.</param>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor(System.String,System.String,`0)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="defaultValue">
            Default value for the property.
            </param>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor(System.String,System.String,`0,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="defaultValue">
            Default value for the property.
            </param>
            <param name="relationship">Relationship with
            referenced object.</param>
        </member>
        <member name="M:Csla.PropertyInfo`1.NewFieldData(System.String)">
            <summary>
            Create and return a new IFieldData object
            to store an instance value for this
            property.
            </summary>
            <param name="name">
            Property name.
            </param>
        </member>
        <member name="P:Csla.PropertyInfo`1.Name">
            <summary>
            Gets the property name value.
            </summary>
        </member>
        <member name="P:Csla.PropertyInfo`1.Type">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:Csla.PropertyInfo`1.FriendlyName">
            <summary>
            Gets the friendly display name
            for the property.
            </summary>
            <remarks>
            If no friendly name was provided, the
            property name itself is returned as a
            result.
            </remarks>
        </member>
        <member name="P:Csla.PropertyInfo`1.DefaultValue">
            <summary>
            Gets the default initial value for the property.
            </summary>
            <remarks>
            This value is used to initialize the property's
            value, and is returned from a property get
            if the user is not authorized to 
            read the property.
            </remarks>
        </member>
        <member name="P:Csla.PropertyInfo`1.RelationshipType">
            <summary>
            Gets the relationship between the declaring object
            and the object reference in the property.
            </summary>
        </member>
        <member name="P:Csla.PropertyInfo`1.Index">
            <summary>
            Gets or sets the index position for the managed
            field storage behind the property. FOR
            INTERNAL CSLA .NET USE ONLY.
            </summary>
        </member>
        <member name="T:Csla.Threading.BusyLock">
            <summary>
            Implementation of a lock that waits while
            a target object is busy.
            </summary>
            <remarks>
            Do not call this from a Silverlight UI thread, as it will block
            the entire browser.
            </remarks>
        </member>
        <member name="M:Csla.Threading.BusyLock.WaitOne(Csla.Core.INotifyBusy)">
            <summary>
            Wait until the specified object is not busy 
            (IsBusy is false).
            </summary>
            <param name="obj">Target object.</param>
        </member>
        <member name="M:Csla.Threading.BusyLock.WaitOne(Csla.Core.INotifyBusy,System.TimeSpan)">
            <summary>
            Wait until the specified object is not busy 
            (IsBusy is false).
            </summary>
            <param name="obj">Target object.</param>
            <param name="timeout">Timeout value.</param>
        </member>
        <member name="T:Csla.Threading.BusyLocker">
            <summary>
            Implementation of a lock that waits while
            a target object is busy.
            </summary>
        </member>
        <member name="M:Csla.Threading.BusyLocker.#ctor(Csla.Core.INotifyBusy,System.TimeSpan)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="target">Target object.</param>
            <param name="timeout">Timeout value.</param>
        </member>
        <member name="M:Csla.Threading.BusyLocker.WaitOne">
            <summary>
            Waits for the target object to become not busy.
            </summary>
        </member>
        <member name="M:Csla.Threading.BusyLocker.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="T:Csla.Core.ISavable">
            <summary>
            Specifies that the object can save
            itself.
            </summary>
        </member>
        <member name="M:Csla.Core.ISavable.Save">
            <summary>
            Saves the object to the database.
            </summary>
            <returns>A new object containing the saved values.</returns>
        </member>
        <member name="M:Csla.Core.ISavable.Save(System.Boolean)">
            <summary>
            Saves the object to the database.
            </summary>
            <returns>A new object containing the saved values.</returns>
            <param name="forceUpdate">true to force the save to be an update.</param>
        </member>
        <member name="M:Csla.Core.ISavable.BeginSave">
            <summary>
            Saves the object to the database asynchronously. The saved event will contain
            the new object when the save operation completes.
            </summary>
        </member>
        <member name="M:Csla.Core.ISavable.BeginSave(System.Object)">
            <summary>
            Saves the object to the database asynchronously. The saved event will contain
            the new object when the save operation completes.
            </summary>
            <param name="userState">
            User state object.
            </param>
        </member>
        <member name="M:Csla.Core.ISavable.SaveComplete(System.Object)">
            <summary>
            INTERNAL CSLA .NET USE ONLY.
            </summary>
            <param name="newObject">
            The new object returned as a result of the save.
            </param>
        </member>
        <member name="E:Csla.Core.ISavable.Saved">
            <summary>
            Event raised when an object has been saved.
            </summary>
        </member>
        <member name="T:Csla.Core.IParent">
            <summary>
            Defines the interface that must be implemented
            by any business object that contains child
            objects.
            </summary>
        </member>
        <member name="M:Csla.Core.IParent.RemoveChild(Csla.Core.IEditableBusinessObject)">
            <summary>
            This method is called by a child object when it
            wants to be removed from the collection.
            </summary>
            <param name="child">The child object to remove.</param>
        </member>
        <member name="M:Csla.Core.IParent.ApplyEditChild(Csla.Core.IEditableBusinessObject)">
            <summary>
            Override this method to be notified when a child object's
            <see cref="M:Csla.Core.BusinessBase.ApplyEdit"/> method has
            completed.
            </summary>
            <param name="child">The child object that was edited.</param>
        </member>
        <member name="T:Csla.Server.ChildDataPortal">
            <summary>
            Invoke data portal methods on child
            objects.
            </summary>
        </member>
        <member name="M:Csla.Server.ChildDataPortal.Create(System.Type,System.Object[])">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="parameters">
            Criteria parameters passed from caller.
            </param>
        </member>
        <member name="M:Csla.Server.ChildDataPortal.Fetch(System.Type,System.Object[])">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="parameters">
            Criteria parameters passed from caller.
            </param>
        </member>
        <member name="M:Csla.Server.ChildDataPortal.Update(System.Object,System.Object[])">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="parameters">
            Parameters passed to method.
            </param>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.ISilverlightRequest">
            <summary>
            Interface for all requests from Silverlight client
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.ISilverlightRequest.Principal">
            <summary>
            Principal that will be set for the request
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.ISilverlightRequest.GlobalContext">
            <summary>
            Global context object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.ISilverlightRequest.ClientContext">
            <summary>
            Client context object.
            </summary>
        </member>
        <member name="T:Csla.IDataPortalResult">
            <summary>
            IDataPortalResult defines the results of DataPortal operation
            </summary>
        </member>
        <member name="P:Csla.IDataPortalResult.Object">
            <summary>
            Gets the resulting object.
            </summary>
        </member>
        <member name="P:Csla.IDataPortalResult.Error">
            <summary>
            Gets any resulting error information.
            </summary>
        </member>
        <member name="T:Csla.Core.ManagedObjectBase">
            <summary>
            Base class for an object that is serializable
            using MobileFormatter.
            </summary>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.RegisterProperty``1(System.Type,Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the type.
            </summary>
            <typeparam name="P">
            Type of property.
            </typeparam>
            <param name="objectType">
            Type of object to which the property belongs.
            </param>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.RegisterProperty``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="T">Type of object to which the property belongs.</typeparam>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <returns>The provided IPropertyInfo object.</returns>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.RegisterProperty``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <returns>The provided IPropertyInfo object.</returns>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.RegisterProperty``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,``1)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="T">Type of Target</typeparam>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.ReadPropertyConvert``2(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value from the list of 
            managed field values, converting the 
            value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.ReadProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.ReadProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.LoadPropertyConvert``2(Csla.PropertyInfo{``0},``1)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.LoadProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.LoadProperty(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to manually retrieve child
            object data from the serializations stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="formatter">Reference to the MobileFormatter.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to manually serialize child
            objects into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="formatter">Reference to the MobileFormatter.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="P:Csla.Core.ManagedObjectBase.FieldManager">
            <summary>
            Gets a reference to the field mananger
            for this object.
            </summary>
        </member>
        <member name="T:Csla.C5.Act">
            <summary>
            
            </summary>
        </member>
        <member name="T:Csla.C5.Act`1">
             <summary>
             <para>
             The type Act[T] corresponds to System.Action[T] in the .Net
             Framework class library.
            </para>
             </summary>
             <typeparam name="A1"></typeparam>
             <param name="x1"></param>
        </member>
        <member name="T:Csla.C5.Act`2">
            <summary>
            
            </summary>
            <typeparam name="A1"></typeparam>
            <typeparam name="A2"></typeparam>
            <param name="x1"></param>
            <param name="x2"></param>
        </member>
        <member name="T:Csla.C5.Act`3">
            <summary>
            
            </summary>
            <typeparam name="A1"></typeparam>
            <typeparam name="A2"></typeparam>
            <typeparam name="A3"></typeparam>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="x3"></param>
        </member>
        <member name="T:Csla.C5.Act`4">
            <summary>
            
            </summary>
            <typeparam name="A1"></typeparam>
            <typeparam name="A2"></typeparam>
            <typeparam name="A3"></typeparam>
            <typeparam name="A4"></typeparam>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="x3"></param>
            <param name="x4"></param>
        </member>
        <member name="T:Csla.C5.Fun`1">
            <summary>
            
            </summary>
            <typeparam name="R"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.Fun`2">
            <summary>
            Delegate type Fun[A1,R] is the type of functions (methods) from A1
            to R, used to compute some transformation for a given collection
            item. 
            <para>
            The type Fun[T,U] corresponds to System.Converter[T,U] in the .Net
            Framework class library, and the type Fun[T,bool] corresponds
            System.Predicate[T] in the .Net Framework class library.</para>
            </summary>
            <typeparam name="A1"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="x1"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.Fun`3">
            <summary>
            
            </summary>
            <typeparam name="A1"></typeparam>
            <typeparam name="A2"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="x1"></param>
            <param name="x2"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.Fun`4">
            <summary>
            
            </summary>
            <typeparam name="A1"></typeparam>
            <typeparam name="A2"></typeparam>
            <typeparam name="A3"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="x3"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.Fun`5">
            <summary>
            
            </summary>
            <typeparam name="A1"></typeparam>
            <typeparam name="A2"></typeparam>
            <typeparam name="A3"></typeparam>
            <typeparam name="A4"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="x3"></param>
            <param name="x4"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.Workflow.WorkflowManager">
            <summary>
            Manages execution of a WF workflow.
            </summary>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.#ctor(System.Workflow.Runtime.WorkflowRuntime)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="workflowRuntime">
            A workflow runtime instance to use
            for all operations.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.ExecuteWorkflow(System.String)">
            <summary>
            Synchronously executes a workflow.
            </summary>
            <param name="typeName">
            Assembly qualified type name of the workflow.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.ExecuteWorkflow(System.Type)">
            <summary>
            Synchronously executes a workflow.
            </summary>
            <param name="workflowType">
            Type object referencing the workflow.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.ExecuteWorkflow(System.String,System.Boolean)">
            <summary>
            Synchronously executes a workflow.
            </summary>
            <param name="typeName">
            Assembly qualified type name of the workflow.
            </param>
            <param name="disposeRuntime">
            Value indicating whether to dispose
            the WF runtime when workflow
            completes.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.ExecuteWorkflow(System.Type,System.Boolean)">
            <summary>
            Synchronously executes a workflow.
            </summary>
            <param name="workflowType">
            Type object referencing the workflow.
            </param>
            <param name="disposeRuntime">
            Value indicating whether to dispose
            the WF runtime when workflow
            completes.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.ExecuteWorkflow(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Synchronously executes a workflow.
            </summary>
            <param name="typeName">
            Assembly qualified type name of the workflow.
            </param>
            <param name="parameters">
            Name/value list of parameters to be passed
            to the workflow instance.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.ExecuteWorkflow(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Synchronously executes a workflow.
            </summary>
            <param name="typeName">
            Assembly qualified type name of the workflow.
            </param>
            <param name="parameters">
            Name/value list of parameters to be passed
            to the workflow instance.
            </param>
            <param name="disposeRuntime">
            Value indicating whether to dispose
            the WF runtime when workflow
            completes.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.ExecuteWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Synchronously executes a workflow.
            </summary>
            <param name="workflowType">
            Type object referencing the workflow.
            </param>
            <param name="parameters">
            Name/value list of parameters to be passed
            to the workflow instance.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.ExecuteWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Synchronously executes a workflow.
            </summary>
            <param name="workflowType">
            Type object referencing the workflow.
            </param>
            <param name="parameters">
            Name/value list of parameters to be passed
            to the workflow instance.
            </param>
            <param name="disposeRuntime">
            Value indicating whether to dispose
            the WF runtime when workflow
            completes.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.ResumeWorkflow">
            <summary>
            Resumes synchronous execution of
            the workflow.
            </summary>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.ResumeWorkflow(System.Boolean)">
            <summary>
            Resumes synchronous execution of
            the workflow.
            </summary>
            <param name="disposeRuntime">
            Value indicating whether to dispose
            the WF runtime when workflow
            completes.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.ResumeWorkflow(System.Guid)">
            <summary>
            Resumes synchronous execution of
            a workflow.
            </summary>
            <param name="instanceId">
            Id of the workflow instance to resume.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.ResumeWorkflow(System.Guid,System.Boolean)">
            <summary>
            Resumes synchronous execution of
            a workflow.
            </summary>
            <param name="instanceId">
            Id of the workflow instance to resume.
            </param>
            <param name="disposeRuntime">
            Value indicating whether to dispose
            the WF runtime when workflow
            completes.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.InitializeRuntime">
            <summary>
            Initializes the workflow runtime.
            </summary>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.BeginWorkflow(System.String)">
            <summary>
            Asynchronously starts executing workflow.
            </summary>
            <param name="typeName">
            Assembly qualified type name of the workflow.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.BeginWorkflow(System.Type)">
            <summary>
            Asynchronously starts executing workflow.
            </summary>
            <param name="workflowType">
            Type object referencing the workflow.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.BeginWorkflow(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Asynchronously starts executing workflow.
            </summary>
            <param name="typeName">
            Assembly qualified type name of the workflow.
            </param>
            <param name="parameters">
            Name/value list of parameters to be passed
            to the workflow instance.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.BeginWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Asynchronously starts executing workflow.
            </summary>
            <param name="workflowType">
            Type object referencing the workflow.
            </param>
            <param name="parameters">
            Name/value list of parameters to be passed
            to the workflow instance.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.BeginResumeWorkflow(System.Guid)">
            <summary>
            Loads a workflow from persisted storage
            and resumes asynchronous execution of
            that workflow.
            </summary>
            <param name="instanceId">
            Id of the workflow instance to load and resume.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.BeginResumeWorkflow">
            <summary>
            Resumes asynchronous execution of
            the current workflow.
            </summary>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.WaitForEnd">
            <summary>
            Waits for the workflow to complete
            or terminate.
            </summary>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.WaitForEnd(System.Boolean)">
            <summary>
            Waits for the workflow to complete
            or terminate.
            </summary>
            <param name="disposeRuntime">
            Value indicating whether to dispose
            the WF runtime when workflow
            completes.
            </param>
        </member>
        <member name="M:Csla.Workflow.WorkflowManager.DisposeRuntime">
            <summary>
            Diposes the workflow runtime.
            </summary>
        </member>
        <member name="P:Csla.Workflow.WorkflowManager.Error">
            <summary>
            Gets the error exception returned
            from the workflow if the
            workflow terminated abnormally.
            </summary>
        </member>
        <member name="P:Csla.Workflow.WorkflowManager.Status">
            <summary>
            Gets the current status of the workflow.
            </summary>
        </member>
        <member name="P:Csla.Workflow.WorkflowManager.WorkflowInstance">
            <summary>
            Gets the workflow instance being
            executed.
            </summary>
        </member>
        <member name="P:Csla.Workflow.WorkflowManager.RuntimeInstance">
            <summary>
            Gets the workflow runtime instance
            that is executing the workflow.
            </summary>
        </member>
        <member name="T:Csla.Windows.CslaActionEventArgs">
            <summary>
            Event args for an action.
            </summary>
        </member>
        <member name="M:Csla.Windows.CslaActionEventArgs.#ctor(System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="commandName">
            Name of the command.
            </param>
        </member>
        <member name="P:Csla.Windows.CslaActionEventArgs.CommandName">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="T:Csla.Web.Design.CslaDataSourceConfiguration">
            <summary>
            CslaDataSource configuration form.
            </summary>
        </member>
        <member name="M:Csla.Web.Design.CslaDataSourceConfiguration.#ctor">
            <summary>
            Create instance of object.
            </summary>
        </member>
        <member name="M:Csla.Web.Design.CslaDataSourceConfiguration.#ctor(System.Web.UI.DataSourceControl,System.String)">
            <summary>
            Create instance of object.
            </summary>
            <param name="control">Reference to the data source control.</param>
            <param name="oldTypeName">Existing type name.</param>
        </member>
        <member name="F:Csla.Web.Design.CslaDataSourceConfiguration.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Csla.Web.Design.CslaDataSourceConfiguration.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Csla.Web.Design.CslaDataSourceConfiguration.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Csla.Web.Design.CslaDataSourceConfiguration.TypeName">
            <summary>
            Gets the type name entered by the user.
            </summary>
        </member>
        <member name="T:Csla.Validation.RuleSeverity">
            <summary>
            Values for validation rule severities.
            </summary>
        </member>
        <member name="F:Csla.Validation.RuleSeverity.Error">
            <summary>
            Represents a serious
            business rule violation that
            should cause an object to
            be considered invalid.
            </summary>
        </member>
        <member name="F:Csla.Validation.RuleSeverity.Warning">
            <summary>
            Represents a business rule
            violation that should be
            displayed to the user, but which
            should not make an object be
            invalid.
            </summary>
        </member>
        <member name="F:Csla.Validation.RuleSeverity.Information">
            <summary>
            Represents a business rule
            result that should be displayed
            to the user, but which is less
            severe than a warning.
            </summary>
        </member>
        <member name="T:Csla.Validation.AsyncRuleHandler">
            <summary>
            Delegate defining an asynchronous validation rule method.
            </summary>
            <param name="context">
            Context parameters provided to the validation rule method.
            </param>
        </member>
        <member name="T:Csla.Security.NoAccessBehavior">
            <summary>
            Options available for handling no
            access to a property due to
            authorization rules.
            </summary>
        </member>
        <member name="F:Csla.Security.NoAccessBehavior.SuppressException">
            <summary>
            Suppress exceptions.
            </summary>
        </member>
        <member name="F:Csla.Security.NoAccessBehavior.ThrowException">
            <summary>
            Throw security exception.
            </summary>
        </member>
        <member name="T:Csla.Data.DataMapper">
            <summary>
            Map data from a source into a target object
            by copying public property values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Data.DataMapper.Map(System.Collections.IDictionary,System.Object)">
            <summary>
            Copies values from the source into the
            properties of the target.
            </summary>
            <param name="source">A name/value dictionary containing the source values.</param>
            <param name="target">An object with properties to be set from the dictionary.</param>
            <remarks>
            The key names in the dictionary must match the property names on the target
            object. Target properties may not be readonly or indexed.
            </remarks>
        </member>
        <member name="M:Csla.Data.DataMapper.Map(System.Collections.IDictionary,System.Object,System.String[])">
            <summary>
            Copies values from the source into the
            properties of the target.
            </summary>
            <param name="source">A name/value dictionary containing the source values.</param>
            <param name="target">An object with properties to be set from the dictionary.</param>
            <param name="ignoreList">A list of property names to ignore. 
            These properties will not be set on the target object.</param>
            <remarks>
            The key names in the dictionary must match the property names on the target
            object. Target properties may not be readonly or indexed.
            </remarks>
        </member>
        <member name="M:Csla.Data.DataMapper.Map(System.Collections.IDictionary,System.Object,System.Boolean,System.String[])">
            <summary>
            Copies values from the source into the
            properties of the target.
            </summary>
            <param name="source">A name/value dictionary containing the source values.</param>
            <param name="target">An object with properties to be set from the dictionary.</param>
            <param name="ignoreList">A list of property names to ignore. 
            These properties will not be set on the target object.</param>
            <param name="suppressExceptions">If <see langword="true" />, any exceptions will be supressed.</param>
            <remarks>
            The key names in the dictionary must match the property names on the target
            object. Target properties may not be readonly or indexed.
            </remarks>
        </member>
        <member name="M:Csla.Data.DataMapper.Map(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Copies values from the source into the target.
            </summary>
            <param name="source">An object with properties to be loaded into the dictionary.</param>
            <param name="target">A name/value dictionary containing the source values.</param>
        </member>
        <member name="M:Csla.Data.DataMapper.Map(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.String[])">
            <summary>
            Copies values from the source into the target.
            </summary>
            <param name="source">An object with properties to be loaded into the dictionary.</param>
            <param name="target">A name/value dictionary containing the source values.</param>
            <param name="ignoreList">A list of property names to ignore. 
            These properties will not be set on the target object.</param>
        </member>
        <member name="M:Csla.Data.DataMapper.Map(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.String[])">
            <summary>
            Copies values from the source into the target.
            </summary>
            <param name="source">An object with properties to be loaded into the dictionary.</param>
            <param name="target">A name/value dictionary containing the source values.</param>
            <param name="ignoreList">A list of property names to ignore. 
            These properties will not be set on the target object.</param>
            <param name="suppressExceptions">If <see langword="true" />, any exceptions will be supressed.</param>
        </member>
        <member name="M:Csla.Data.DataMapper.Map(System.Object,System.Object)">
            <summary>
            Copies values from the source into the
            properties of the target.
            </summary>
            <param name="source">An object containing the source values.</param>
            <param name="target">An object with properties to be set from the dictionary.</param>
            <remarks>
            The property names and types of the source object must match the property names and types
            on the target object. Source properties may not be indexed. 
            Target properties may not be readonly or indexed.
            </remarks>
        </member>
        <member name="M:Csla.Data.DataMapper.Map(System.Object,System.Object,System.String[])">
            <summary>
            Copies values from the source into the
            properties of the target.
            </summary>
            <param name="source">An object containing the source values.</param>
            <param name="target">An object with properties to be set from the dictionary.</param>
            <param name="ignoreList">A list of property names to ignore. 
            These properties will not be set on the target object.</param>
            <remarks>
            The property names and types of the source object must match the property names and types
            on the target object. Source properties may not be indexed. 
            Target properties may not be readonly or indexed.
            </remarks>
        </member>
        <member name="M:Csla.Data.DataMapper.Map(System.Object,System.Object,System.Boolean,System.String[])">
            <summary>
            Copies values from the source into the
            properties of the target.
            </summary>
            <param name="source">An object containing the source values.</param>
            <param name="target">An object with properties to be set from the dictionary.</param>
            <param name="ignoreList">A list of property names to ignore. 
            These properties will not be set on the target object.</param>
            <param name="suppressExceptions">If <see langword="true"/>, any exceptions will be supressed.</param>
            <remarks>
            <para>
            The property names and types of the source object must match the property names and types
            on the target object. Source properties may not be indexed. 
            Target properties may not be readonly or indexed.
            </para><para>
            Properties to copy are determined based on the source object. Any properties
            on the source object marked with the <see cref="T:System.ComponentModel.BrowsableAttribute"/> equal
            to false are ignored.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Data.DataMapper.Map(System.Object,System.Object,Csla.Data.DataMap)">
            <summary>
            Copies values from the source into the
            properties of the target.
            </summary>
            <param name="source">An object containing the source values.</param>
            <param name="target">An object with properties to be set from the dictionary.</param>
            <param name="map">A DataMap object containing the mappings to use during the copy process.</param>
            <remarks>
            The property names and types of the source object must match the property names and types
            on the target object. Source properties may not be indexed. 
            Target properties may not be readonly or indexed.
            </remarks>
        </member>
        <member name="M:Csla.Data.DataMapper.Map(System.Object,System.Object,Csla.Data.DataMap,System.Boolean)">
            <summary>
            Copies values from the source into the
            properties of the target.
            </summary>
            <param name="source">An object containing the source values.</param>
            <param name="target">An object with properties to be set from the dictionary.</param>
            <param name="suppressExceptions">If <see langword="true" />, any exceptions will be supressed.</param>
            <param name="map">A DataMap object containing the mappings to use during the copy process.</param>
            <remarks>
            The property names and types of the source object must match the property names and types
            on the target object. Source properties may not be indexed. 
            Target properties may not be readonly or indexed.
            </remarks>
        </member>
        <member name="M:Csla.Data.DataMapper.Load(System.Collections.IDictionary,System.Object,System.Func{System.String,System.Object})">
            <summary>
            Copies values from the source into the
            target.
            </summary>
            <param name="source">
            Dictionary containing the source values.
            </param>
            <param name="target">
            Business object with managed fields that
            will contain the copied values.
            </param>
            <param name="nameMapper">
            A function that translates the target
            property names into key values for the
            source dictionary.
            </param>
        </member>
        <member name="M:Csla.Data.DataMapper.Load(System.Object,System.Collections.IDictionary,System.Func{System.String,System.Object})">
            <summary>
            Copies values from the source into the
            target.
            </summary>
            <param name="source">
            Business object with managed fields that
            contain the source values.
            </param>
            <param name="target">
            Dictionary that will contain the resulting values.
            </param>
            <param name="nameMapper">
            A function that translates the source
            property names into key values for the
            target dictionary.
            </param>
        </member>
        <member name="M:Csla.Data.DataMapper.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets an object's property with the specified value,
            coercing that value to the appropriate type if possible.
            </summary>
            <param name="target">Object containing the property to set.</param>
            <param name="propertyName">Name of the property to set.</param>
            <param name="value">Value to set into the property.</param>
        </member>
        <member name="M:Csla.Data.DataMapper.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Sets an object's field with the specified value,
            coercing that value to the appropriate type if possible.
            </summary>
            <param name="target">Object containing the field to set.</param>
            <param name="fieldName">Name of the field (public or non-public) to set.</param>
            <param name="value">Value to set into the field.</param>
        </member>
        <member name="T:Csla.Data.DataMap">
            <summary>
            Defines a mapping between two sets of
            properties/fields for use by
            DataMapper.
            </summary>
        </member>
        <member name="M:Csla.Data.DataMap.#ctor(System.Type,System.Type)">
            <summary>
            Initializes an instance of the type.
            </summary>
            <param name="sourceType">
            Type of source object.
            </param>
            <param name="targetType">
            Type of target object.
            </param>
        </member>
        <member name="M:Csla.Data.DataMap.AddPropertyMapping(System.String,System.String)">
            <summary>
            Adds a property to property
            mapping.
            </summary>
            <param name="sourceProperty">
            Name of source property.
            </param>
            <param name="targetProperty">
            Name of target property.
            </param>
        </member>
        <member name="M:Csla.Data.DataMap.AddFieldMapping(System.String,System.String)">
            <summary>
            Adds a field to field mapping.
            </summary>
            <param name="sourceField">
            Name of source field.
            </param>
            <param name="targetField">
            Name of target field.
            </param>
        </member>
        <member name="M:Csla.Data.DataMap.AddFieldToPropertyMapping(System.String,System.String)">
            <summary>
            Adds a field to property mapping.
            </summary>
            <param name="sourceField">
            Name of source field.
            </param>
            <param name="targetProperty">
            Name of target property.
            </param>
        </member>
        <member name="M:Csla.Data.DataMap.AddPropertyToFieldMapping(System.String,System.String)">
            <summary>
            Adds a property to field mapping.
            </summary>
            <param name="sourceProperty">
            Name of source property.
            </param>
            <param name="targetField">
            Name of target field.
            </param>
        </member>
        <member name="T:Csla.TransactionalAttribute">
            <summary>
            Marks a DataPortal_XYZ method to run within
            the specified transactional context.
            </summary>
            <remarks>
            <para>
            Each business object method may be marked with this attribute
            to indicate which type of transactional technology should
            be used by the server-side DataPortal. The possible options
            are listed in the
            <see cref="T:Csla.TransactionalTypes">TransactionalTypes</see> enum.
            </para><para>
            If the Transactional attribute is not applied to a 
            DataPortal_XYZ method then the
            <see cref="F:Csla.TransactionalTypes.Manual">Manual</see> option
            is assumed.
            </para><para>
            If the Transactional attribute is applied with no explicit
            choice for transactionType then the
            <see cref="F:Csla.TransactionalTypes.EnterpriseServices">EnterpriseServices</see> 
            option is assumed.
            </para><para>
            Both the EnterpriseServices and TransactionScope options provide
            2-phase distributed transactional support.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.TransactionalAttribute.#ctor">
            <summary>
            Marks a method to run within a COM+
            transactional context.
            </summary>
        </member>
        <member name="M:Csla.TransactionalAttribute.#ctor(Csla.TransactionalTypes)">
            <summary>
            Marks a method to run within the specified
            type of transactional context.
            </summary>
            <param name="transactionType">
            Specifies the transactional context within which the
            method should run.</param>
        </member>
        <member name="P:Csla.TransactionalAttribute.TransactionType">
            <summary>
            Gets the type of transaction requested by the
            business object method.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.WcfPortal">
            <summary>
            Exposes server-side DataPortal functionality
            through WCF.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.IWcfPortal">
            <summary>
            Defines the service contract for the WCF data
            portal.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.IWcfPortal.Create(Csla.Server.Hosts.WcfChannel.CreateRequest)">
            <summary>
            Create a new business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.IWcfPortal.Fetch(Csla.Server.Hosts.WcfChannel.FetchRequest)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.IWcfPortal.Update(Csla.Server.Hosts.WcfChannel.UpdateRequest)">
            <summary>
            Update a business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.IWcfPortal.Delete(Csla.Server.Hosts.WcfChannel.DeleteRequest)">
            <summary>
            Delete a business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.WcfPortal.Create(Csla.Server.Hosts.WcfChannel.CreateRequest)">
            <summary>
            Create a new business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.WcfPortal.Fetch(Csla.Server.Hosts.WcfChannel.FetchRequest)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.WcfPortal.Update(Csla.Server.Hosts.WcfChannel.UpdateRequest)">
            <summary>
            Update a business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.WcfPortal.Delete(Csla.Server.Hosts.WcfChannel.DeleteRequest)">
            <summary>
            Delete a business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="T:Csla.DataPortalClient.WebServicesProxy">
            <summary>
            Implements a data portal proxy to relay data portal
            calls to a remote application server by using 
            Web services.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.WebServicesProxy.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to create a
            new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.WebServicesProxy.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to load an
            existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.WebServicesProxy.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to update a
            business object.
            </summary>
            <param name="obj">The business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.WebServicesProxy.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to delete a
            business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="P:Csla.DataPortalClient.WebServicesProxy.IsServerRemote">
            <summary>
            Get a value indicating whether this proxy will invoke
            a remote data portal server, or run the "server-side"
            data portal in the caller's process and AppDomain.
            </summary>
        </member>
        <member name="T:Csla.Core.RemovingItemEventArgs">
            <summary>
            Contains event data for the RemovingItem
            event.
            </summary>
        </member>
        <member name="M:Csla.Core.RemovingItemEventArgs.#ctor(System.Object)">
            <summary>
            Create an instance of the object.
            </summary>
            <param name="removingItem">
            A reference to the item that was 
            removed from the list.
            </param>
        </member>
        <member name="P:Csla.Core.RemovingItemEventArgs.RemovingItem">
            <summary>
            Gets a reference to the item that was
            removed from the list.
            </summary>
        </member>
        <member name="T:Csla.ICriteria">
            <summary>
            Defines the base requirements for a criteria
            object supported by the data portal.
            </summary>
        </member>
        <member name="P:Csla.ICriteria.ObjectType">
            <summary>
            Type of the business object to be instantiated by
            the server-side DataPortal. 
            </summary>
        </member>
        <member name="T:Csla.DataPortalOperations">
            <summary>
            List of data portal operations.
            </summary>
        </member>
        <member name="F:Csla.DataPortalOperations.Create">
            <summary>
            Create operation.
            </summary>
        </member>
        <member name="F:Csla.DataPortalOperations.Fetch">
            <summary>
            Fetch operation.
            </summary>
        </member>
        <member name="F:Csla.DataPortalOperations.Update">
            <summary>
            Update operation (includes
            insert, update and delete self).
            </summary>
        </member>
        <member name="F:Csla.DataPortalOperations.Delete">
            <summary>
            Delete operation.
            </summary>
        </member>
        <member name="F:Csla.DataPortalOperations.Execute">
            <summary>
            Execute operation.
            </summary>
        </member>
        <member name="T:Csla.Linq.IRangeTestableIndex`1">
            <summary>
            Implemented by objects that support range
            comparisons.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
        </member>
        <member name="T:Csla.Linq.IIndex`1">
            <summary>
            Interface that determines functionality of an index
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndex`1.WhereEqual(`0)">
            <summary>
            Iterator that returns objects where there is a match based on the passed item
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndex`1.WhereEqual(System.Object,System.Func{`0,System.Boolean})">
            <summary>
            Iterator that returns objects based on the expression and the value passed in
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndex`1.ReIndex(`0)">
            <summary>
            Reindex an item in this index
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndex`1.InvalidateIndex">
            <summary>
            Set the index as not loaded anymore
            </summary>
        </member>
        <member name="M:Csla.Linq.IIndex`1.LoadComplete">
            <summary>
            Set the index as as loaded
            </summary>
        </member>
        <member name="P:Csla.Linq.IIndex`1.IndexField">
            <summary>
            Field this index is indexing on
            </summary>
        </member>
        <member name="P:Csla.Linq.IIndex`1.Loaded">
            <summary>
            Determine whether the given index is loaded or not
            </summary>
        </member>
        <member name="P:Csla.Linq.IIndex`1.IndexMode">
            <summary>
            Determine the index mode (always, ondemand, never)
            </summary>
        </member>
        <member name="M:Csla.Linq.IRangeTestableIndex`1.WhereLessThan(System.Object)">
            <summary>
            Implements a less than clause.
            </summary>
            <param name="pivotVal">Pivot value.</param>
        </member>
        <member name="M:Csla.Linq.IRangeTestableIndex`1.WhereGreaterThan(System.Object)">
            <summary>
            Implements a greater than clause.
            </summary>
            <param name="pivotVal">Pivot value.</param>
        </member>
        <member name="M:Csla.Linq.IRangeTestableIndex`1.WhereLessThanOrEqualTo(System.Object)">
            <summary>
            Implements a less than or equal clause.
            </summary>
            <param name="pivotVal">Pivot value.</param>
        </member>
        <member name="M:Csla.Linq.IRangeTestableIndex`1.WhereGreaterThanOrEqualTo(System.Object)">
            <summary>
            Implements a greater than or equal clause.
            </summary>
            <param name="pivotVal">Pivot value.</param>
        </member>
        <member name="T:Csla.Data.ObjectContextManager`1">
            <summary>
            Provides an automated way to reuse 
            Entity Framework object context objects 
            within the context
            of a single data portal operation.
            </summary>
            <typeparam name="C">
            Type of database 
            object context object to use.
            </typeparam>
            <remarks>
            This type stores the object context object 
            in <see cref="P:Csla.ApplicationContext.LocalContext"/>
            and uses reference counting through
            <see cref="T:System.IDisposable"/> to keep the data context object
            open for reuse by child objects, and to automatically
            dispose the object when the last consumer
            has called Dispose."
            </remarks>
        </member>
        <member name="M:Csla.Data.ObjectContextManager`1.GetManager(System.String)">
            <summary>
            Gets the ObjectContextManager object for the 
            specified database.
            </summary>
            <param name="database">
            Database name as shown in the config file.
            </param>
        </member>
        <member name="M:Csla.Data.ObjectContextManager`1.GetManager(System.String,System.String)">
            <summary>
            Gets the ObjectContextManager object for the 
            specified database.
            </summary>
            <param name="database">
            Database name as shown in the config file.
            </param>
            <param name="label">Label for this context.</param>
        </member>
        <member name="M:Csla.Data.ObjectContextManager`1.GetManager(System.String,System.Boolean)">
            <summary>
            Gets the ObjectContextManager object for the 
            specified database.
            </summary>
            <param name="database">
            The database name or connection string.
            </param>
            <param name="isDatabaseName">
            True to indicate that the connection string
            should be retrieved from the config file. If
            False, the database parameter is directly 
            used as a connection string.
            </param>
            <returns>ContextManager object for the name.</returns>
        </member>
        <member name="M:Csla.Data.ObjectContextManager`1.GetManager(System.String,System.Boolean,System.String)">
            <summary>
            Gets the ObjectContextManager object for the 
            specified database.
            </summary>
            <param name="database">
            The database name or connection string.
            </param>
            <param name="isDatabaseName">
            True to indicate that the connection string
            should be retrieved from the config file. If
            False, the database parameter is directly 
            used as a connection string.
            </param>
            <param name="label">Label for this context.</param>
            <returns>ContextManager object for the name.</returns>
        </member>
        <member name="M:Csla.Data.ObjectContextManager`1.Dispose">
            <summary>
            Dispose object, dereferencing or
            disposing the context it is
            managing.
            </summary>
        </member>
        <member name="P:Csla.Data.ObjectContextManager`1.ObjectContext">
            <summary>
            Gets the EF object context object.
            </summary>
        </member>
        <member name="P:Csla.Data.ObjectContextManager`1.RefCount">
            <summary>
            Gets the current reference count for this
            object.
            </summary>
        </member>
        <member name="T:Csla.Core.IPropertyInfoFactory">
            <summary>
            Defines the interface for a factory object
            that creates IPropertyInfo objects.
            </summary>
        </member>
        <member name="M:Csla.Core.IPropertyInfoFactory.Create``1(System.Type,System.String)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
        </member>
        <member name="M:Csla.Core.IPropertyInfoFactory.Create``1(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
        </member>
        <member name="M:Csla.Core.IPropertyInfoFactory.Create``1(System.Type,System.String,System.String,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="relationship">Relationship with
            referenced object.</param>
        </member>
        <member name="M:Csla.Core.IPropertyInfoFactory.Create``1(System.Type,System.String,System.String,``0)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="defaultValue">
            Default value for the property.
            </param>
        </member>
        <member name="M:Csla.Core.IPropertyInfoFactory.Create``1(System.Type,System.String,System.String,``0,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="defaultValue">
            Default value for the property.
            </param>
            <param name="relationship">Relationship with
            referenced object.</param>
        </member>
        <member name="T:Csla.C5.Sorting">
            <summary>
            A utility class with functions for sorting arrays with respect to an IComparer&lt;T&gt;
            </summary>
        </member>
        <member name="M:Csla.C5.Sorting.IntroSort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort part of array in place using IntroSort
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the <code>start</code>
            and <code>count</code> arguments does not describe a valid range.</exception>
            <param name="array">Array to sort</param>
            <param name="start">Index of first position to sort</param>
            <param name="count">Number of elements to sort</param>
            <param name="comparer">IComparer&lt;T&gt; to sort by</param>
        </member>
        <member name="M:Csla.C5.Sorting.IntroSort``1(``0[])">
            <summary>
            Sort an array in place using IntroSort and default comparer
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">If T is not comparable</exception>
            <param name="array">Array to sort</param>
        </member>
        <member name="M:Csla.C5.Sorting.InsertionSort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort part of array in place using Insertion Sort
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the <code>start</code>
            and <code>count</code> arguments does not describe a valid range.</exception>
            <param name="array">Array to sort</param>
            <param name="start">Index of first position to sort</param>
            <param name="count">Number of elements to sort</param>
            <param name="comparer">IComparer&lt;T&gt; to sort by</param>
        </member>
        <member name="M:Csla.C5.Sorting.HeapSort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort part of array in place using Heap Sort
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the <code>start</code>
            and <code>count</code> arguments does not describe a valid range.</exception>
            <param name="array">Array to sort</param>
            <param name="start">Index of first position to sort</param>
            <param name="count">Number of elements to sort</param>
            <param name="comparer">IComparer&lt;T&gt; to sort by</param>
        </member>
        <member name="T:Csla.C5.C5Random">
            <summary>
            A modern random number generator based on G. Marsaglia: 
            Seeds for Random Number Generators, Communications of the
            ACM 46, 5 (May 2003) 90-93; and a posting by Marsaglia to 
            comp.lang.c on 2003-04-03.
            </summary>
        </member>
        <member name="M:Csla.C5.C5Random.NextDouble">
            <summary>
            Get a new random System.Double value
            </summary>
            <returns>The random double</returns>
        </member>
        <member name="M:Csla.C5.C5Random.Sample">
            <summary>
            Get a new random System.Double value
            </summary>
            <returns>The random double</returns>
        </member>
        <member name="M:Csla.C5.C5Random.Next">
            <summary>
            Get a new random System.Int32 value
            </summary>
            <returns>The random int</returns>
        </member>
        <member name="M:Csla.C5.C5Random.Next(System.Int32)">
            <summary>
            Get a random non-negative integer less than a given upper bound
            </summary>
            <exception cref="T:System.ArgumentException">If max is negative</exception>
            <param name="max">The upper bound (exclusive)</param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.C5Random.Next(System.Int32,System.Int32)">
            <summary>
            Get a random integer between two given bounds
            </summary>
            <exception cref="T:System.ArgumentException">If max is less than min</exception>
            <param name="min">The lower bound (inclusive)</param>
            <param name="max">The upper bound (exclusive)</param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.C5Random.NextBytes(System.Byte[])">
            <summary>
            Fill a array of byte with random bytes
            </summary>
            <param name="buffer">The array to fill</param>
        </member>
        <member name="M:Csla.C5.C5Random.#ctor">
            <summary>
            Create a random number generator seed by system time.
            </summary>
        </member>
        <member name="M:Csla.C5.C5Random.#ctor(System.Int64)">
            <summary>
            Create a random number generator with a given seed
            </summary>
            <exception cref="T:System.ArgumentException">If seed is zero</exception>
            <param name="seed">The seed</param>
        </member>
        <member name="M:Csla.C5.C5Random.#ctor(System.UInt32[])">
            <summary>
            Create a random number generator with a specified internal start state.
            </summary>
            <exception cref="T:System.ArgumentException">If Q is not of length exactly 16</exception>
            <param name="Q">The start state. Must be a collection of random bits given by an array of exactly 16 uints.</param>
        </member>
        <member name="T:Csla.Wpf.BusyAnimation">
            <summary>
            Control that displays a busy animation.
            </summary>
        </member>
        <member name="F:Csla.Wpf.BusyAnimation.IsRunningProperty">
            <summary>
            Gets or sets a value indicating whether the busy
            animation is running.
            </summary>
        </member>
        <member name="F:Csla.Wpf.BusyAnimation.StateDurationProperty">
            <summary>
            Gets or sets the state duration for the animation.
            </summary>
        </member>
        <member name="M:Csla.Wpf.BusyAnimation.#ctor">
            <summary>
            Creates an instance of the control.
            </summary>
        </member>
        <member name="P:Csla.Wpf.BusyAnimation.StateDuration">
            <summary>
            Gets or sets the state duration for the animation.
            </summary>
        </member>
        <member name="P:Csla.Wpf.BusyAnimation.IsRunning">
            <summary>
            Gets or sets a value indicating whether the busy
            animation is running.
            </summary>
        </member>
        <member name="T:Csla.Windows.ErrorEncounteredEventArgs">
            <summary>
            Event args indicating an error.
            </summary>
        </member>
        <member name="M:Csla.Windows.ErrorEncounteredEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="commandName">
            Name of the command.
            </param>
            <param name="ex">
            Reference to the exception.
            </param>
        </member>
        <member name="P:Csla.Windows.ErrorEncounteredEventArgs.Ex">
            <summary>
            Gets a reference to the exception object.
            </summary>
        </member>
        <member name="T:Csla.Validation.IRuleMethod">
            <summary>
            Tracks all information for a rule.
            </summary>
        </member>
        <member name="M:Csla.Validation.IRuleMethod.Invoke(System.Object)">
            <summary>
            Invokes the rule to validate the data.
            </summary>
            <returns>
            <see langword="true" /> if the data is valid, 
            <see langword="false" /> if the data is invalid.
            </returns>
        </member>
        <member name="P:Csla.Validation.IRuleMethod.Priority">
            <summary>
            Gets the priority of the rule method.
            </summary>
            <value>The priority value.</value>
            <remarks>
            Priorities are processed in descending
            order, so priority 0 is processed
            before priority 1, etc.</remarks>
        </member>
        <member name="P:Csla.Validation.IRuleMethod.RuleName">
            <summary>
            Gets the name of the rule.
            </summary>
            <remarks>
            The rule's name must be unique and is used
            to identify a broken rule in the BrokenRules
            collection.
            </remarks>
        </member>
        <member name="P:Csla.Validation.IRuleMethod.RuleArgs">
            <summary>
            Returns the name of the field, property or column
            to which the rule applies.
            </summary>
        </member>
        <member name="T:Csla.Validation.AsyncRuleCompleteHandler">
            <summary>
            Delegate for handling the completion of an
            async validation rule.
            </summary>
            <param name="sender">
            Object calling the handler.
            </param>
            <param name="result">
            Result arguments from the validation rule.
            </param>
        </member>
        <member name="T:Csla.NameValueListBase`2">
            <summary>
            This is the base class from which readonly name/value
            collections should be derived.
            </summary>
            <typeparam name="K">Type of the key values.</typeparam>
            <typeparam name="V">Type of the values.</typeparam>
        </member>
        <member name="T:Csla.Core.ReadOnlyBindingList`1">
            <summary>
            A readonly version of BindingList(Of T)
            </summary>
            <typeparam name="C">Type of item contained in the list.</typeparam>
            <remarks>
            This is a subclass of BindingList(Of T) that implements
            a readonly list, preventing adding and removing of items
            from the list. Use the IsReadOnly property
            to unlock the list for loading/unloading data.
            </remarks>
        </member>
        <member name="T:Csla.Core.ExtendedBindingList`1">
            <summary>
            Extends BindingList of T by adding extra
            behaviors.
            </summary>
            <typeparam name="T">Type of item contained in list.</typeparam>
        </member>
        <member name="T:Csla.Core.MobileBindingList`1">
            <summary>
            Inherit from this base class to easily
            create a serializable list class.
            </summary>
            <typeparam name="T">
            Type of the items contained in the list.
            </typeparam>
        </member>
        <member name="M:Csla.Core.MobileBindingList`1.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to get custom field values
            from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
        </member>
        <member name="M:Csla.Core.MobileBindingList`1.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to get custom child object
            values from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="formatter">Reference to the MobileFormatter.</param>
        </member>
        <member name="M:Csla.Core.MobileBindingList`1.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to set custom field values
            into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
        </member>
        <member name="M:Csla.Core.MobileBindingList`1.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to set custom child object
            values into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="formatter">Reference to the MobileFormatter.</param>
        </member>
        <member name="T:Csla.Core.IExtendedBindingList">
            <summary>
            Extends <see cref="T:System.ComponentModel.IBindingList"/> by adding extra
            events.
            </summary>
        </member>
        <member name="E:Csla.Core.IExtendedBindingList.RemovingItem">
            <summary>
            Event indicating that an item is being
            removed from the list.
            </summary>
        </member>
        <member name="T:Csla.Core.INotifyChildChanged">
            <summary>
            Implemented by classes that notify when 
            a child object has changed.
            </summary>
        </member>
        <member name="E:Csla.Core.INotifyChildChanged.ChildChanged">
            <summary>
            Event indictating that a child object
            has changed.
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.ISerializationNotification">
            <summary>
            Interface defining callback methods used
            by the MobileFormatter.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.ISerializationNotification.Deserialized">
            <summary>
            Method called on an object after deserialization
            is complete.
            </summary>
            <remarks>
            This method is called on all objects in an
            object graph after all the objects have been
            deserialized.
            </remarks>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnRemovingItem(`0)">
            <summary>
            Raise the RemovingItem event.
            </summary>
            <param name="removedItem">
            A reference to the item that 
            is being removed.
            </param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.RemoveItem(System.Int32)">
            <summary>
            Remove the item at the
            specified index.
            </summary>
            <param name="index">
            The zero-based index of the item
            to remove.
            </param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a range of items to the list.
            </summary>
            <param name="range">List of items to add.</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnBusyChanged(Csla.Core.BusyChangedEventArgs)">
            <summary>
            Override this method to be notified when the
            IsBusy property has changed.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnBusyChanged(System.String,System.Boolean)">
            <summary>
            Raises the BusyChanged event for a specific property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="busy">New busy value.</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnUnhandledAsyncException(Csla.Core.ErrorEventArgs)">
            <summary>
            Method invoked when an unhandled async exception has
            occurred.
            </summary>
            <param name="error">Event arguments.</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnUnhandledAsyncException(System.Object,System.Exception)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="originalSender">Original sender of event.</param>
            <param name="error">Exception that occurred.</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.InsertItem(System.Int32,`0)">
            <summary>
            Invoked when an item is inserted into the list.
            </summary>
            <param name="index">Index of new item.</param>
            <param name="item">Reference to new item.</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnAddEventHooks(`0)">
            <summary>
            Method invoked when events are hooked for a child
            object.
            </summary>
            <param name="item">Reference to child object.</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnRemoveEventHooks(`0)">
            <summary>
            Method invoked when events are unhooked for a child
            object.
            </summary>
            <param name="item">Reference to child object.</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnDeserialized">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnChildChanged(Csla.Core.ChildChangedEventArgs)">
            <summary>
            Raises the ChildChanged event, indicating that a child
            object has been changed.
            </summary>
            <param name="e">
            ChildChangedEventArgs object.
            </param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.RaiseChildChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Creates a ChildChangedEventArgs and raises the event.
            </summary>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.Child_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles any PropertyChanged event from 
            a child object and echoes it up as
            a ChildChanged event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="e">Property changed args.</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.Child_Changed(System.Object,Csla.Core.ChildChangedEventArgs)">
            <summary>
            Handles any ChildChanged event from
            a child object and echoes it up as
            a ChildChanged event.
            </summary>
        </member>
        <member name="E:Csla.Core.ExtendedBindingList`1.RemovingItem">
            <summary>
            Implements a serialization-safe RemovingItem event.
            </summary>
        </member>
        <member name="E:Csla.Core.ExtendedBindingList`1.BusyChanged">
            <summary>
            Event indicating that the busy status of the
            object has changed.
            </summary>
        </member>
        <member name="P:Csla.Core.ExtendedBindingList`1.IsBusy">
            <summary>
            Gets the busy status for this object and its child objects.
            </summary>
        </member>
        <member name="P:Csla.Core.ExtendedBindingList`1.IsSelfBusy">
            <summary>
            Gets the busy status for this object.
            </summary>
        </member>
        <member name="E:Csla.Core.ExtendedBindingList`1.UnhandledAsyncException">
            <summary>
            Event indicating that an exception occurred during
            an async operation.
            </summary>
        </member>
        <member name="E:Csla.Core.ExtendedBindingList`1.ChildChanged">
            <summary>
            Event raised when a child object has been changed.
            </summary>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.ClearItems">
            <summary>
            Prevents clearing the collection.
            </summary>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.AddNewCore">
            <summary>
            Prevents insertion of items into the collection.
            </summary>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.InsertItem(System.Int32,`0)">
            <summary>
            Prevents insertion of items into the collection.
            </summary>
            <param name="index">Index at which to insert the item.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index if the collection is
            not in readonly mode.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index with the 
            specified item if the collection is not in
            readonly mode.
            </summary>
            <param name="index">Index of the item to replace.</param>
            <param name="item">New item for the list.</param>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.SearchByExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Iterates through a set of items according to the expression passed to it.
            </summary>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to retrieve your child object
            references from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="P:Csla.Core.ReadOnlyBindingList`1.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the list is readonly.
            </summary>
            <remarks>
            Subclasses can set this value to unlock the collection
            in order to alter the collection's data.
            </remarks>
            <value>True indicates that the list is readonly.</value>
        </member>
        <member name="P:Csla.Core.ReadOnlyBindingList`1.IsBusy">
            <summary>
            Gets a value indicating whether this object or its
            child objects are busy.
            </summary>
        </member>
        <member name="P:Csla.Core.ReadOnlyBindingList`1.IndexingProvider">
            <summary>
            Allows users of CSLA to override the indexing behavior of BLB
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.Value(`0)">
            <summary>
            Returns the value corresponding to the
            specified key.
            </summary>
            <param name="key">Key value for which to retrieve a value.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.Key(`1)">
            <summary>
            Returns the key corresponding to the
            first occurance of the specified value
            in the list.
            </summary>
            <param name="value">Value for which to retrieve the key.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.ContainsKey(`0)">
            <summary>
            Gets a value indicating whether the list contains the
            specified key.
            </summary>
            <param name="key">Key value for which to search.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.ContainsValue(`1)">
            <summary>
            Gets a value indicating whether the list contains the
            specified value.
            </summary>
            <param name="value">Value for which to search.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.GetItemByValue(`1)">
            <summary>
            Get the item for the first matching
            value in the collection.
            </summary>
            <param name="value">
            Value to search for in the list.
            </param>
            <returns>Item from the list.</returns>
        </member>
        <member name="M:Csla.NameValueListBase`2.GetItemByKey(`0)">
            <summary>
            Get the item for the first matching
            key in the collection.
            </summary>
            <param name="key">
            Key to search for in the list.
            </param>
            <returns>Item from the list.</returns>
        </member>
        <member name="M:Csla.NameValueListBase`2.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.GetClone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>A new object containing the exact data of the original object.</returns>
        </member>
        <member name="M:Csla.NameValueListBase`2.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.DataPortal_Fetch(System.Object)">
            <summary>
            Override this method to allow retrieval of an existing business
            object based on data in the database.
            </summary>
            <param name="criteria">An object containing criteria values to identify the object.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="T:Csla.NameValueListBase`2.NameValuePair">
            <summary>
            Contains a key and value pair.
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.NameValuePair.#ctor(`0,`1)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.NameValuePair.ToString">
            <summary>
            Returns a string representation of the
            value for this item.
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.NameValuePair.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to manually get custom field
            values from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.NameValuePair.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to manually set custom field
            values into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="P:Csla.NameValueListBase`2.NameValuePair.Key">
            <summary>
            The Key or Name value.
            </summary>
        </member>
        <member name="P:Csla.NameValueListBase`2.NameValuePair.Value">
            <summary>
            The Value corresponding to the key/name.
            </summary>
        </member>
        <member name="T:Csla.NameValueListBase`2.Criteria">
            <summary>
            Default Criteria for retrieving simple
            name/value lists.
            </summary>
            <remarks>
            This criteria merely specifies the type of
            collection to be retrieved. That type information
            is used by the DataPortal to create the correct
            type of collection object during data retrieval.
            </remarks>
        </member>
        <member name="T:Csla.CriteriaBase">
            <summary>
            Base type from which Criteria classes can be
            derived in a business class. 
            </summary>
        </member>
        <member name="F:Csla.CriteriaBase.TypeNameProperty">
            <summary>
            Defines the TypeName property.
            </summary>
        </member>
        <member name="M:Csla.CriteriaBase.#ctor">
            <summary>
            Initializes empty CriteriaBase. The type of
            business object to be created by the DataPortal
            MUST be supplied by the subclass.
            </summary>
        </member>
        <member name="M:Csla.CriteriaBase.#ctor(System.Type)">
            <summary>
            Initializes CriteriaBase with the type of
            business object to be created by the DataPortal.
            </summary>
            <param name="type">The type of the
            business object the data portal should create.</param>
        </member>
        <member name="P:Csla.CriteriaBase.ObjectType">
            <summary>
            Type of the business object to be instantiated by
            the server-side DataPortal. 
            </summary>
        </member>
        <member name="P:Csla.CriteriaBase.TypeName">
            <summary>
            Assembly qualified type name of the business 
            object to be instantiated by
            the server-side DataPortal. 
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.Criteria.#ctor(System.Type)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="collectionType">
            The <see cref="T:System.Type"/> of the business
            collection class.
            </param>
        </member>
        <member name="M:Csla.NameValueListBase`2.Criteria.#ctor">
            <summary>
            Creates an instance of the type.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.WcfChannel.WcfResponse">
            <summary>
            Response message for returning
            the results of a data portal call.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.WcfResponse.#ctor(System.Object)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="result">Result object to be returned.</param>
        </member>
        <member name="P:Csla.Server.Hosts.WcfChannel.WcfResponse.Result">
            <summary>
            Criteria object describing business object.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.IMobileFactoryLoader">
            <summary>
            Defines an interface to be implemented by
            a factory object that returns MobileFactory
            objects based on the MobileFactory attributes
            used to decorate CSLA Light business objects.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.IMobileFactoryLoader.GetFactory(System.String)">
            <summary>
            Returns a MobileFactory object.
            </summary>
            <param name="factoryName">
            Name of the factory to create, typically
            an assembly qualified type name.
            </param>
        </member>
        <member name="T:Csla.Data.TransactionManager`2">
            <summary>
            Provides an automated way to reuse open
            database connections and associated
            ADO.NET transactions within the context
            of a single data portal operation.
            </summary>
            <typeparam name="C">
            Type of database connection object to use.
            </typeparam>
            <typeparam name="T">
            Type of ADO.NET transaction object to use.
            </typeparam>
            <remarks>
            This type stores the open ADO.NET transaction
            in <see cref="P:Csla.ApplicationContext.LocalContext"/>
            and uses reference counting through
            <see cref="T:System.IDisposable"/> to keep the transaction
            open for reuse by child objects, and to automatically
            dispose the transaction when the last consumer
            has called Dispose."
            </remarks>
        </member>
        <member name="M:Csla.Data.TransactionManager`2.GetManager(System.String)">
            <summary>
            Gets the TransactionManager object for the 
            specified database.
            </summary>
            <param name="database">
            Database name as shown in the config file.
            </param>
        </member>
        <member name="M:Csla.Data.TransactionManager`2.GetManager(System.String,System.String)">
            <summary>
            Gets the TransactionManager object for the 
            specified database.
            </summary>
            <param name="database">
            Database name as shown in the config file.
            </param>
            <param name="label">Label for this transaction.</param>
        </member>
        <member name="M:Csla.Data.TransactionManager`2.GetManager(System.String,System.Boolean)">
            <summary>
            Gets the TransactionManager object for the 
            specified database.
            </summary>
            <param name="database">
            The database name or connection string.
            </param>
            <param name="isDatabaseName">
            True to indicate that the Transaction string
            should be retrieved from the config file. If
            False, the database parameter is directly 
            used as a Transaction string.
            </param>
            <returns>TransactionManager object for the name.</returns>
        </member>
        <member name="M:Csla.Data.TransactionManager`2.GetManager(System.String,System.Boolean,System.String)">
            <summary>
            Gets the TransactionManager object for the 
            specified database.
            </summary>
            <param name="database">
            The database name or connection string.
            </param>
            <param name="isDatabaseName">
            True to indicate that the Transaction string
            should be retrieved from the config file. If
            False, the database parameter is directly 
            used as a Transaction string.
            </param>
            <param name="label">Label for this transaction.</param>
            <returns>TransactionManager object for the name.</returns>
        </member>
        <member name="M:Csla.Data.TransactionManager`2.Dispose">
            <summary>
            Dispose object, dereferencing or
            disposing the connection it is
            managing.
            </summary>
        </member>
        <member name="P:Csla.Data.TransactionManager`2.Transaction">
            <summary>
            Gets a reference to the current ADO.NET
            transaction object.
            </summary>
        </member>
        <member name="P:Csla.Data.TransactionManager`2.Connection">
            <summary>
            Gets a reference to the current ADO.NET
            connection object that is associated with 
            current trasnaction.
            </summary>
        </member>
        <member name="P:Csla.Data.TransactionManager`2.RefCount">
            <summary>
            Gets the current reference count for this
            object.
            </summary>
        </member>
        <member name="T:Csla.Data.ConnectionManager`1">
            <summary>
            Provides an automated way to reuse open
            database connections within the context
            of a single data portal operation.
            </summary>
            <typeparam name="C">
            Type of database connection object to use.
            </typeparam>
            <remarks>
            This type stores the open database connection
            in <see cref="P:Csla.ApplicationContext.LocalContext"/>
            and uses reference counting through
            <see cref="T:System.IDisposable"/> to keep the connection
            open for reuse by child objects, and to automatically
            dispose the connection when the last consumer
            has called Dispose."
            </remarks>
        </member>
        <member name="M:Csla.Data.ConnectionManager`1.GetManager(System.String)">
            <summary>
            Gets the ConnectionManager object for the 
            specified database.
            </summary>
            <param name="database">
            Database name as shown in the config file.
            </param>
        </member>
        <member name="M:Csla.Data.ConnectionManager`1.GetManager(System.String,System.String)">
            <summary>
            Gets the ConnectionManager object for the 
            specified database.
            </summary>
            <param name="database">
            Database name as shown in the config file.
            </param>
            <param name="label">Label for this connection.</param>
        </member>
        <member name="M:Csla.Data.ConnectionManager`1.GetManager(System.String,System.Boolean)">
            <summary>
            Gets the ConnectionManager object for the 
            specified database.
            </summary>
            <param name="database">
            The database name or connection string.
            </param>
            <param name="isDatabaseName">
            True to indicate that the connection string
            should be retrieved from the config file. If
            False, the database parameter is directly 
            used as a connection string.
            </param>
            <returns>ConnectionManager object for the name.</returns>
        </member>
        <member name="M:Csla.Data.ConnectionManager`1.GetManager(System.String,System.Boolean,System.String)">
            <summary>
            Gets the ConnectionManager object for the 
            specified database.
            </summary>
            <param name="database">
            The database name or connection string.
            </param>
            <param name="isDatabaseName">
            True to indicate that the connection string
            should be retrieved from the config file. If
            False, the database parameter is directly 
            used as a connection string.
            </param>
            <param name="label">Label for this connection.</param>
            <returns>ConnectionManager object for the name.</returns>
        </member>
        <member name="M:Csla.Data.ConnectionManager`1.Dispose">
            <summary>
            Dispose object, dereferencing or
            disposing the connection it is
            managing.
            </summary>
        </member>
        <member name="P:Csla.Data.ConnectionManager`1.Connection">
            <summary>
            Gets the open database connection object.
            </summary>
        </member>
        <member name="P:Csla.Data.ConnectionManager`1.RefCount">
            <summary>
            Gets the current reference count for this
            object.
            </summary>
        </member>
        <member name="T:Csla.DataPortal`1">
            <summary>
            Client side data portal used for making asynchronous
            data portal calls in .NET.
            </summary>
            <typeparam name="T">
            Type of business object.
            </typeparam>
        </member>
        <member name="M:Csla.DataPortal`1.OnCreateCompleted(Csla.DataPortalResult{`0})">
            <summary>
            Raises the event.
            </summary>
            <param name="e">
            The parameter provided to the event handler.
            </param>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.DataPortal`1.BeginCreate">
            <summary>
            Called by a factory method in a business class or
            by the UI to create a new object, which is loaded 
            with default values from the database.
            </summary>
        </member>
        <member name="M:Csla.DataPortal`1.BeginCreate(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to create a new object, which is loaded 
            with default values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginCreate(System.Object,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to create a new object, which is loaded 
            with default values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.DataPortal`1.OnFetchCompleted(Csla.DataPortalResult{`0})">
            <summary>
            Raises the event.
            </summary>
            <param name="e">
            The parameter provided to the event handler.
            </param>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.DataPortal`1.BeginFetch">
            <summary>
            Called by a factory method in a business class or
            by the UI to retrieve an existing object, which is loaded 
            with values from the database.
            </summary>
        </member>
        <member name="M:Csla.DataPortal`1.BeginFetch(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to retrieve an existing object, which is loaded 
            with values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginFetch(System.Object,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to retrieve an existing object, which is loaded 
            with values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.DataPortal`1.OnUpdateCompleted(Csla.DataPortalResult{`0})">
            <summary>
            Raises the event.
            </summary>
            <param name="e">
            The parameter provided to the event handler.
            </param>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.DataPortal`1.BeginUpdate(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to update an object.
            </summary>
            <param name="obj">Object to update.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginUpdate(System.Object,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to update an object.
            </summary>
            <param name="obj">Object to update.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.DataPortal`1.OnDeleteCompleted(Csla.DataPortalResult{`0})">
            <summary>
            Raises the event.
            </summary>
            <param name="e">
            The parameter provided to the event handler.
            </param>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.DataPortal`1.BeginDelete(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to delete an object.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginDelete(System.Object,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to delete an object.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginExecute(`0)">
            <summary>
            Called by a factory method in a business class or
            by the UI to execute a command object.
            </summary>
            <param name="command">Command object to execute.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginExecute(`0,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to execute a command object.
            </summary>
            <param name="command">Command object to execute.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.DataPortal`1.OnExecuteCompleted(Csla.DataPortalResult{`0})">
            <summary>
            Raises the ExecuteCompleted event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Csla.DataPortal`1.GlobalContext">
            <summary>
            Gets a reference to the global context returned from
            the background thread and/or server.
            </summary>
        </member>
        <member name="E:Csla.DataPortal`1.CreateCompleted">
            <summary>
            Event raised when the operation has completed.
            </summary>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="E:Csla.DataPortal`1.FetchCompleted">
            <summary>
            Event raised when the operation has completed.
            </summary>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="E:Csla.DataPortal`1.UpdateCompleted">
            <summary>
            Event raised when the operation has completed.
            </summary>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="E:Csla.DataPortal`1.DeleteCompleted">
            <summary>
            Event raised when the operation has completed.
            </summary>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="E:Csla.DataPortal`1.ExecuteCompleted">
            <summary>
            Event indicating an execute operation is complete.
            </summary>
        </member>
        <member name="T:Csla.Core.MobileDictionary`2">
            <summary>
            Defines a dictionary that can be serialized through
            the MobileFormatter.
            </summary>
            <typeparam name="K">Key value: any primitive or IMobileObject type.</typeparam>
            <typeparam name="V">Value: any primitive or IMobileObject type.</typeparam>
        </member>
        <member name="M:Csla.Core.MobileDictionary`2.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.MobileDictionary`2.#ctor(System.Int32)">
            <summary>
            Creates an instance of the object based
            on the supplied dictionary, whose elements
            are copied to the new dictionary.
            </summary>
            <param name="capacity">The initial number of elements 
            the dictionary can contain.</param>
        </member>
        <member name="M:Csla.Core.MobileDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates an instance of the object based
            on the supplied dictionary, whose elements
            are copied to the new dictionary.
            </summary>
            <param name="comparer">The comparer to use when
            comparing keys.</param>
        </member>
        <member name="M:Csla.Core.MobileDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Creates an instance of the object based
            on the supplied dictionary, whose elements
            are copied to the new dictionary.
            </summary>
            <param name="dict">Source dictionary.</param>
        </member>
        <member name="M:Csla.Core.MobileDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the object for serialization.
            </summary>
            <param name="context">Serialization context.</param>
            <param name="info">Serialization info.</param>
        </member>
        <member name="T:Csla.Core.IEditableBusinessObject">
            <summary>
            Defines the common methods required by all
            editable CSLA single objects.
            </summary>
            <remarks>
            It is strongly recommended that the implementations
            of the methods in this interface be made Private
            so as to not clutter up the native interface of
            the collection objects.
            </remarks>
        </member>
        <member name="T:Csla.Core.ISupportUndo">
            <summary>
            Define the common methods used by the UI to 
            interact with n-level undo.
            </summary>
            <remarks>
            This interface is designed to help UI framework
            developers interact with editable business objects.
            The CSLA .NET editable base classes already
            implement this interface and the required n-level
            undo behaviors.
            </remarks>
        </member>
        <member name="M:Csla.Core.ISupportUndo.BeginEdit">
            <summary>
            Starts a nested edit on the object.
            </summary>
        </member>
        <member name="M:Csla.Core.ISupportUndo.CancelEdit">
            <summary>
            Cancels the current edit process, restoring the object's state to
            its previous values.
            </summary>
        </member>
        <member name="M:Csla.Core.ISupportUndo.ApplyEdit">
            <summary>
            Commits the current edit process.
            </summary>
        </member>
        <member name="T:Csla.Core.IUndoableObject">
            <summary>
            Defines the methods required to participate
            in n-level undo within the CSLA .NET framework.
            </summary>
            <remarks>
            This interface is used by Csla.Core.UndoableBase
            to initiate begin, cancel and apply edit operations.
            </remarks>
        </member>
        <member name="M:Csla.Core.IUndoableObject.CopyState(System.Int32,System.Boolean)">
            <summary>
            Copies the state of the object and places the copy
            onto the state stack.
            </summary>
            <param name="parentEditLevel">
            Parent object's edit level.
            </param>
            <param name="parentBindingEdit">
            Indicates whether parent is in edit mode due to data binding.
            </param>
        </member>
        <member name="M:Csla.Core.IUndoableObject.UndoChanges(System.Int32,System.Boolean)">
            <summary>
            Restores the object's state to the most recently
            copied values from the state stack.
            </summary>
            <remarks>
            Restores the state of the object to its
            previous value by taking the data out of
            the stack and restoring it into the fields
            of the object.
            </remarks>
            <param name="parentEditLevel">
            Parent object's edit level.
            </param>
            <param name="parentBindingEdit">
            Indicates whether parent is in edit mode due to data binding.
            </param>
        </member>
        <member name="M:Csla.Core.IUndoableObject.AcceptChanges(System.Int32,System.Boolean)">
            <summary>
            Accepts any changes made to the object since the last
            state copy was made.
            </summary>
            <remarks>
            The most recent state copy is removed from the state
            stack and discarded, thus committing any changes made
            to the object's state.
            </remarks>
            <param name="parentEditLevel">
            Parent object's edit level.
            </param>
            <param name="parentBindingEdit">
            Indicates whether parent is in edit mode due to data binding.
            </param>
        </member>
        <member name="P:Csla.Core.IUndoableObject.EditLevel">
            <summary>
            Gets the current edit level of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.IEditableBusinessObject.DeleteChild">
            <summary>
            Called by a parent object to mark the child
            for deferred deletion.
            </summary>
        </member>
        <member name="M:Csla.Core.IEditableBusinessObject.SetParent(Csla.Core.IParent)">
            <summary>
            Used by BusinessListBase as a child object is 
            created to tell the child object about its
            parent.
            </summary>
            <param name="parent">A reference to the parent collection object.</param>
        </member>
        <member name="M:Csla.Core.IEditableBusinessObject.Delete">
            <summary>
            Marks the object for deletion. The object will be deleted as part of the
            next save operation.
            </summary>
        </member>
        <member name="P:Csla.Core.IEditableBusinessObject.EditLevelAdded">
            <summary>
            For internal use only!!
            </summary>
            <remarks>
            Altering this value will almost certainly
            break your code. This property is for use
            by the parent collection only!
            </remarks>
        </member>
        <member name="T:Csla.C5.GuardedEnumerator`1">
            <summary>
            A read-only wrapper class for a generic enumerator
            </summary>
        </member>
        <member name="M:Csla.C5.GuardedEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Create a wrapper around a generic enumerator
            </summary>
            <param name="enumerator">The enumerator to wrap</param>
        </member>
        <member name="M:Csla.C5.GuardedEnumerator`1.MoveNext">
            <summary>
            Move wrapped enumerator to next item, or the first item if
            this is the first call to MoveNext. 
            </summary>
            <returns>True if enumerator is valid now</returns>
        </member>
        <member name="M:Csla.C5.GuardedEnumerator`1.Dispose">
            <summary>
            Dispose wrapped enumerator.
            </summary>
        </member>
        <member name="P:Csla.C5.GuardedEnumerator`1.Current">
            <summary>
            Undefined if enumerator is not valid (MoveNext hash been called returning true)
            </summary>
            <value>The current item of the wrapped enumerator.</value>
        </member>
        <member name="T:Csla.C5.GuardedEnumerable`1">
             <summary>
             A read-only wrapper class for a generic enumerable
            
             <i>This is mainly interesting as a base of other guard classes</i>
             </summary>
        </member>
        <member name="M:Csla.C5.GuardedEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Wrap an enumerable in a read-only wrapper
            </summary>
            <param name="enumerable">The enumerable to wrap</param>
        </member>
        <member name="M:Csla.C5.GuardedEnumerable`1.GetEnumerator">
            <summary>
            Get an enumerator from the wrapped enumerable
            </summary>
            <returns>The enumerator (itself wrapped)</returns>
        </member>
        <member name="T:Csla.C5.GuardedDirectedEnumerable`1">
             <summary>
             A read-only wrapper for a generic directed enumerable
            
             <i>This is mainly interesting as a base of other guard classes</i>
             </summary>
        </member>
        <member name="M:Csla.C5.GuardedDirectedEnumerable`1.#ctor(Csla.C5.IDirectedEnumerable{`0})">
            <summary>
            Wrap a directed enumerable in a read-only wrapper
            </summary>
            <param name="directedenumerable">the collection to wrap</param>
        </member>
        <member name="M:Csla.C5.GuardedDirectedEnumerable`1.Backwards">
            <summary>
            Get a enumerable that enumerates the wrapped collection in the opposite direction
            </summary>
            <returns>The mirrored enumerable</returns>
        </member>
        <member name="P:Csla.C5.GuardedDirectedEnumerable`1.Direction">
            <summary>
            <code>Forwards</code> if same, else <code>Backwards</code>
            </summary>
            <value>The enumeration direction relative to the original collection.</value>
        </member>
        <member name="T:Csla.C5.GuardedCollectionValue`1">
             <summary>
             A read-only wrapper for an ICollectionValue&lt;T&gt;
            
             <i>This is mainly interesting as a base of other guard classes</i>
             </summary>
        </member>
        <member name="M:Csla.C5.GuardedCollectionValue`1.#ctor(Csla.C5.ICollectionValue{`0})">
            <summary>
            Wrap a ICollectionValue&lt;T&gt; in a read-only wrapper
            </summary>
            <param name="collectionvalue">the collection to wrap</param>
        </member>
        <member name="M:Csla.C5.GuardedCollectionValue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy the items of the wrapped collection to an array
            </summary>
            <param name="a">The array</param>
            <param name="i">Starting offset</param>
        </member>
        <member name="M:Csla.C5.GuardedCollectionValue`1.ToArray">
            <summary>
            Create an array from the items of the wrapped collection
            </summary>
            <returns>The array</returns>
        </member>
        <member name="M:Csla.C5.GuardedCollectionValue`1.Apply(Csla.C5.Act{`0})">
            <summary>
            Apply a delegate to all items of the wrapped enumerable.
            </summary>
            <param name="a">The delegate to apply</param>
        </member>
        <member name="M:Csla.C5.GuardedCollectionValue`1.Exists(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in the wrapped enumerable.
            </summary>
            <param name="filter">A filter delegate 
            (<see cref="T:C5.Filter`1"/>) defining the predicate</param>
            <returns>True is such an item exists</returns>
        </member>
        <member name="M:Csla.C5.GuardedCollectionValue`1.Find(Csla.C5.Fun{`0,System.Boolean},`0@)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollectionValue`1.All(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Check if all items in the wrapped enumerable satisfies a specific predicate.
            </summary>
            <param name="filter">A filter delegate 
            (<see cref="T:C5.Filter`1"/>) defining the predicate</param>
            <returns>True if all items satisfies the predicate</returns>
        </member>
        <member name="M:Csla.C5.GuardedCollectionValue`1.Filter(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create an enumerable, enumerating the items of this collection that satisfies 
            a certain condition.
            </summary>
            <param name="filter">The T->bool filter delegate defining the condition</param>
            <returns>The filtered enumerable</returns>
        </member>
        <member name="M:Csla.C5.GuardedCollectionValue`1.Choose">
            <summary>
            Choose some item of this collection. 
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException">if collection is empty.</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollectionValue`1.Show(System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="stringbuilder"></param>
            <param name="formatProvider"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollectionValue`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.GuardedCollectionValue`1.ListenableEvents">
            <summary>
            The ListenableEvents value of the wrapped collection
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.GuardedCollectionValue`1.ActiveEvents">
            <summary>
            The ActiveEvents value of the wrapped collection
            </summary>
            <value></value>
        </member>
        <member name="E:Csla.C5.GuardedCollectionValue`1.CollectionChanged">
            <summary>
            The change event. Will be raised for every change operation on the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.GuardedCollectionValue`1.CollectionCleared">
            <summary>
            The change event. Will be raised for every change operation on the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.GuardedCollectionValue`1.ItemsAdded">
            <summary>
            The item added  event. Will be raised for every individual addition to the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.GuardedCollectionValue`1.ItemInserted">
            <summary>
            The item added  event. Will be raised for every individual addition to the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.GuardedCollectionValue`1.ItemsRemoved">
            <summary>
            The item removed event. Will be raised for every individual removal from the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.GuardedCollectionValue`1.ItemRemovedAt">
            <summary>
            The item removed event. Will be raised for every individual removal from the collection.
            </summary>
        </member>
        <member name="P:Csla.C5.GuardedCollectionValue`1.IsEmpty">
            <summary>
            Get the size of the wrapped collection
            </summary>
            <value>The size</value>
        </member>
        <member name="P:Csla.C5.GuardedCollectionValue`1.Count">
            <summary>
            Get the size of the wrapped collection
            </summary>
            <value>The size</value>
        </member>
        <member name="P:Csla.C5.GuardedCollectionValue`1.CountSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant).
            </summary>
            <value>A characterization of the speed of the 
            <code>Count</code> property in this collection.</value>
        </member>
        <member name="T:Csla.C5.GuardedDirectedCollectionValue`1">
             <summary>
             A read-only wrapper for a directed collection
            
             <i>This is mainly interesting as a base of other guard classes</i>
             </summary>
        </member>
        <member name="M:Csla.C5.GuardedDirectedCollectionValue`1.#ctor(Csla.C5.IDirectedCollectionValue{`0})">
            <summary>
            Wrap a directed collection in a read-only wrapper
            </summary>
            <param name="directedcollection">the collection to wrap</param>
        </member>
        <member name="M:Csla.C5.GuardedDirectedCollectionValue`1.Backwards">
            <summary>
            Get a collection that enumerates the wrapped collection in the opposite direction
            </summary>
            <returns>The mirrored collection</returns>
        </member>
        <member name="M:Csla.C5.GuardedDirectedCollectionValue`1.FindLast(Csla.C5.Fun{`0,System.Boolean},`0@)">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.GuardedDirectedCollectionValue`1.Direction">
            <summary>
            <code>Forwards</code> if same, else <code>Backwards</code>
            </summary>
            <value>The enumeration direction relative to the original collection.</value>
        </member>
        <member name="T:Csla.C5.GuardedCollection`1">
            <summary>
            A read-only wrapper for an <see cref="T:C5.ICollection`1"/>,
            <para>
            <i>Suitable for wrapping hash tables, <see cref="T:C5.HashSet`1"/>
            and <see cref="T:C5.HashBag`1"/>  </i></para>
            </summary>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.#ctor(Csla.C5.ICollection{`0})">
            <summary>
            Wrap an ICollection&lt;T&gt; in a read-only wrapper
            </summary>
            <param name="collection">the collection to wrap</param>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.GetUnsequencedHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.UnsequencedEquals(Csla.C5.ICollection{`0})">
            <summary>
            
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.Contains(`0)">
            <summary>
            Check if an item is in the wrapped collection
            </summary>
            <param name="item">The item</param>
            <returns>True if found</returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.ContainsCount(`0)">
            <summary>
            Count the number of times an item appears in the wrapped collection
            </summary>
            <param name="item">The item</param>
            <returns>The number of copies</returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if all items in the argument is in the wrapped collection
            </summary>
            <param name="items">The items</param>
            <typeparam name="U"></typeparam>
            <returns>True if so</returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.Find(`0@)">
            <summary> 
            Search for an item in the wrapped collection
            </summary>
            <param name="item">On entry the item to look for, on exit the equivalent item found (if any)</param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.FindOrAdd(`0@)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.Update(`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.Update(`0,`0@)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.UpdateOrAdd(`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.UpdateOrAdd(`0,`0@)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.Remove(`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.Remove(`0,`0@)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item">The value to remove.</param>
            <param name="removeditem">The removed value.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.RemoveAllCopies(`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.RemoveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <typeparam name="U"></typeparam>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.Clear">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.RetainAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <typeparam name="U"></typeparam>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.Check">
            <summary>
            Check  wrapped collection for internal consistency
            </summary>
            <returns>True if check passed</returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.Add(`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <typeparam name="U"></typeparam>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.GuardedCollection`1.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.GuardedCollection`1.IsReadOnly">
            <summary>
            (This is a read-only wrapper)
            </summary>
            <value>True</value>
        </member>
        <member name="P:Csla.C5.GuardedCollection`1.ContainsSpeed">
            <summary> </summary>
            <value>Speed of wrapped collection</value>
        </member>
        <member name="P:Csla.C5.GuardedCollection`1.AllowsDuplicates">
            <summary> </summary>
            <value>False if wrapped collection has set semantics</value>
        </member>
        <member name="P:Csla.C5.GuardedCollection`1.EqualityComparer">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.GuardedCollection`1.DuplicatesByCounting">
            <summary>
            By convention this is true for any collection with set semantics.
            </summary>
            <value>True if only one representative of a group of equal items 
            is kept in the collection together with the total count.</value>
        </member>
        <member name="P:Csla.C5.GuardedCollection`1.IsEmpty">
            <summary> </summary>
            <value>True if wrapped collection is empty</value>
        </member>
        <member name="T:Csla.C5.GuardedSequenced`1">
             <summary>
             A read-only wrapper for a sequenced collection
            
             <i>This is mainly interesting as a base of other guard classes</i>
             </summary>
        </member>
        <member name="M:Csla.C5.GuardedSequenced`1.#ctor(Csla.C5.ISequenced{`0})">
            <summary>
            Wrap a sequenced collection in a read-only wrapper
            </summary>
            <param name="sorted"></param>
        </member>
        <member name="M:Csla.C5.GuardedSequenced`1.FindIndex(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection and return the index of the first one.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <returns>the index, if found, a negative value else</returns>
        </member>
        <member name="M:Csla.C5.GuardedSequenced`1.FindLastIndex(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Check if there exists an item  that satisfies a
            specific predicate in this collection and return the index of the last one.
            </summary>
            <param name="predicate">A delegate 
            (<see cref="T:C5.Fun`2"/> with <code>R == bool</code>) defining the predicate</param>
            <returns>the index, if found, a negative value else</returns>
        </member>
        <member name="M:Csla.C5.GuardedSequenced`1.GetSequencedHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSequenced`1.SequencedEquals(Csla.C5.ISequenced{`0})">
            <summary>
            
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSequenced`1.Backwards">
            <summary>
            Get a collection that enumerates the wrapped collection in the opposite direction
            </summary>
            <returns>The mirrored collection</returns>
        </member>
        <member name="M:Csla.C5.GuardedSequenced`1.FindLast(Csla.C5.Fun{`0,System.Boolean},`0@)">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSequenced`1.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.GuardedSequenced`1.Direction">
            <summary>
            <code>Forwards</code> if same, else <code>Backwards</code>
            </summary>
            <value>The enumeration direction relative to the original collection.</value>
        </member>
        <member name="T:Csla.C5.GuardedSorted`1">
             <summary>
             A read-only wrapper for a sorted collection
            
             <i>This is mainly interesting as a base of other guard classes</i>
             </summary>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.#ctor(Csla.C5.ISorted{`0})">
            <summary>
            Wrap a sorted collection in a read-only wrapper
            </summary>
            <param name="sorted"></param>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.TryPredecessor(`0,`0@)">
            <summary>
            Find the strict predecessor of item in the guarded sorted collection,
            that is, the greatest item in the collection smaller than the item.
            </summary>
            <param name="item">The item to find the predecessor for.</param>
            <param name="res">The predecessor, if any; otherwise the default value for T.</param>
            <returns>True if item has a predecessor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.TrySuccessor(`0,`0@)">
            <summary>
            Find the strict successor of item in the guarded sorted collection,
            that is, the least item in the collection greater than the supplied value.
            </summary>
            <param name="item">The item to find the successor for.</param>
            <param name="res">The successor, if any; otherwise the default value for T.</param>
            <returns>True if item has a successor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.TryWeakPredecessor(`0,`0@)">
            <summary>
            Find the weak predecessor of item in the guarded sorted collection,
            that is, the greatest item in the collection smaller than or equal to the item.
            </summary>
            <param name="item">The item to find the weak predecessor for.</param>
            <param name="res">The weak predecessor, if any; otherwise the default value for T.</param>
            <returns>True if item has a weak predecessor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.TryWeakSuccessor(`0,`0@)">
            <summary>
            Find the weak successor of item in the sorted collection,
            that is, the least item in the collection greater than or equal to the supplied value.
            </summary>
            <param name="item">The item to find the weak successor for.</param>
            <param name="res">The weak successor, if any; otherwise the default value for T.</param>
            <returns>True if item has a weak successor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.Predecessor(`0)">
            <summary>
            Find the predecessor of the item in the wrapped sorted collection
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists </exception>    
            <param name="item">The item</param>
            <returns>The predecessor</returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.Successor(`0)">
            <summary>
            Find the Successor of the item in the wrapped sorted collection
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists </exception>    
            <param name="item">The item</param>
            <returns>The Successor</returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.WeakPredecessor(`0)">
            <summary>
            Find the weak predecessor of the item in the wrapped sorted collection
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists </exception>    
            <param name="item">The item</param>
            <returns>The weak predecessor</returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.WeakSuccessor(`0)">
            <summary>
            Find the weak Successor of the item in the wrapped sorted collection
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists </exception>    
            <param name="item">The item</param>
            <returns>The weak Successor</returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.Cut(System.IComparable{`0},`0@,System.Boolean@,`0@,System.Boolean@)">
            <summary>
            Run Cut on the wrapped sorted collection
            </summary>
            <param name="c"></param>
            <param name="low"></param>
            <param name="lval"></param>
            <param name="high"></param>
            <param name="hval"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.RangeFrom(`0)">
            <summary>
            Get the specified range from the wrapped collection. 
            (The current implementation erroneously does not wrap the result.)
            </summary>
            <param name="bot"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.RangeFromTo(`0,`0)">
            <summary>
            Get the specified range from the wrapped collection. 
            (The current implementation erroneously does not wrap the result.)
            </summary>
            <param name="bot"></param>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.RangeTo(`0)">
            <summary>
            Get the specified range from the wrapped collection. 
            (The current implementation erroneously does not wrap the result.)
            </summary>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.RangeAll">
            <summary>
            Get the specified range from the wrapped collection. 
            (The current implementation erroneously does not wrap the result.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.AddSorted``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="items"></param>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.RemoveRangeFrom(`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="low"></param>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.RemoveRangeFromTo(`0,`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="low"></param>
            <param name="hi"></param>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.RemoveRangeTo(`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="hi"></param>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.FindMin">
            <summary>
            Find the minimum of the wrapped collection
            </summary>
            <returns>The minimum</returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.DeleteMin">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.FindMax">
            <summary>
            Find the maximum of the wrapped collection
            </summary>
            <returns>The maximum</returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.DeleteMax">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSorted`1.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.GuardedSorted`1.Comparer">
            <summary>
            The comparer object supplied at creation time for the underlying collection
            </summary>
            <value>The comparer</value>
        </member>
        <member name="T:Csla.C5.GuardedIndexedSorted`1">
             <summary>
             Read-only wrapper for indexed sorted collections
            
             <i>Suitable for wrapping TreeSet, TreeBag and SortedArray</i>
             </summary>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.#ctor(Csla.C5.IIndexedSorted{`0})">
            <summary>
            Wrap an indexed sorted collection in a read-only wrapper
            </summary>
            <param name="list">the indexed sorted collection</param>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.RangeFrom(`0)">
            <summary>
            Get the specified range from the wrapped collection. 
            (The current implementation erroneously does not wrap the result.)
            </summary>
            <param name="bot"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.RangeFromTo(`0,`0)">
            <summary>
            Get the specified range from the wrapped collection. 
            (The current implementation erroneously does not wrap the result.)
            </summary>
            <param name="bot"></param>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.RangeTo(`0)">
            <summary>
            Get the specified range from the wrapped collection. 
            (The current implementation erroneously does not wrap the result.)
            </summary>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.CountFrom(`0)">
            <summary>
            Report the number of items in the specified range of the wrapped collection
            </summary>
            <param name="bot"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.CountFromTo(`0,`0)">
            <summary>
            Report the number of items in the specified range of the wrapped collection
            </summary>
            <param name="bot"></param>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.CountTo(`0)">
            <summary>
            Report the number of items in the specified range of the wrapped collection
            </summary>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.FindAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Run FindAll on the wrapped collection with the indicated filter.
            The result will <b>not</b> be read-only.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.Map``1(Csla.C5.Fun{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Run Map on the wrapped collection with the indicated mapper.
            The result will <b>not</b> be read-only.
            </summary>
            <param name="m"></param>
            <param name="c">The comparer to use in the result</param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.IndexOf(`0)">
            <summary>
            Find the (first) index of an item in the wrapped collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.LastIndexOf(`0)">
            <summary>
            Find the last index of an item in the wrapped collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.RemoveAt(System.Int32)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.RemoveInterval(System.Int32,System.Int32)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:Csla.C5.GuardedIndexedSorted`1.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.GuardedIndexedSorted`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <value>The i'th item of the wrapped sorted collection</value>
        </member>
        <member name="P:Csla.C5.GuardedIndexedSorted`1.IndexingSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.GuardedIndexedSorted`1.Item(System.Int32,System.Int32)">
            <summary> </summary>
            <value>A directed collection of the items in the indicated interval of the wrapped collection</value>
        </member>
        <member name="T:Csla.C5.GuardedList`1">
            <summary>
            A read-only wrapper for a generic list collection
            <i>Suitable as a wrapper for LinkedList, HashedLinkedList, ArrayList and HashedArray.
            <see cref="T:C5.LinkedList`1"/>, 
            <see cref="T:C5.HashedLinkedList`1"/>, 
            <see cref="T:C5.ArrayList`1"/> or
            <see cref="T:C5.HashedArray`1"/>.
            </i>
            </summary>
        </member>
        <member name="T:Csla.C5.IList`1">
             <summary>
             This is an indexed collection, where the item order is chosen by 
             the user at insertion time.
            
             NBNBNB: we need a description of the view functionality here!
             </summary>
        </member>
        <member name="M:Csla.C5.IList`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.IList`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.IList`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.IList`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Csla.C5.IList`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.IList`1.IndexOf(`0)">
            <summary>
            Searches for an item in the list going forwards from the start. 
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of item from start. A negative number if item not found, 
            namely the one's complement of the index at which the Add operation would put the item.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at a specific position of the list.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"> if <code>index</code> is negative or
            &gt;= the size of the collection.</exception>
            <param name="index">The index of the item to remove.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.Insert(Csla.C5.IList{`0},`0)">
            <summary>
            Insert an item at the end of a compatible view, used as a pointer.
            <para>The <code>pointer</code> must be a view on the same list as
            <code>this</code> and the endpoitn of <code>pointer</code> must be
            a valid insertion point of <code>this</code></para>
            </summary>
            <exception cref="T:Csla.C5.IncompatibleViewException">If <code>pointer</code> 
            is not a view on the same list as <code>this</code></exception>
            <exception cref="T:System.IndexOutOfRangeException"><b>??????</b> if the endpoint of 
             <code>pointer</code> is not inside <code>this</code></exception>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> if the list has
            <code>AllowsDuplicates==false</code> and the item is 
            already in the list.</exception>
            <param name="pointer"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.IList`1.InsertFirst(`0)">
            <summary>
            Insert an item at the front of this list.
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"/> if the list has
            <code>AllowsDuplicates==false</code> and the item is 
            already in the list.
            </summary>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.IList`1.InsertLast(`0)">
            <summary>
            Insert an item at the back of this list.
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"/> if the list has
            <code>AllowsDuplicates==false</code> and the item is 
            already in the list.
            </summary>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.IList`1.InsertAll``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insert into this list all items from an enumerable collection starting 
            at a particular index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"> if <code>index</code> is negative or
            &gt; the size of the collection.</exception>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> if the list has 
            <code>AllowsDuplicates==false</code> and one of the items to insert is
            already in the list.</exception>
            <param name="index">Index to start inserting at</param>
            <param name="items">Items to insert</param>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Csla.C5.IList`1.FindAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create a new list consisting of the items of this list satisfying a 
            certain predicate.
            </summary>
            <param name="filter">The filter delegate defining the predicate.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.Map``1(Csla.C5.Fun{`0,``0})">
            <summary>
            Create a new list consisting of the results of mapping all items of this
            list. The new list will use the default equalityComparer for the item type V.
            </summary>
            <typeparam name="V">The type of items of the new list</typeparam>
            <param name="mapper">The delegate defining the map.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.Map``1(Csla.C5.Fun{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create a new list consisting of the results of mapping all items of this
            list. The new list will use a specified equalityComparer for the item type.
            </summary>
            <typeparam name="V">The type of items of the new list</typeparam>
            <param name="mapper">The delegate defining the map.</param>
            <param name="equalityComparer">The equalityComparer to use for the new list</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.Remove">
            <summary>
            Remove one item from the list: from the front if <code>FIFO</code>
            is true, else from the back.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if this list is empty.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.RemoveFirst">
            <summary>
            Remove one item from the front of the list.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if this list is empty.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.RemoveLast">
            <summary>
            Remove one item from the back of the list.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if this list is empty.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.View(System.Int32,System.Int32)">
            <summary>
            Create a list view on this list. 
            <exception cref="T:System.ArgumentOutOfRangeException"/> if the view would not fit into
            this list.
            </summary>
            <param name="start">The index in this list of the start of the view.</param>
            <param name="count">The size of the view.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.ViewOf(`0)">
            <summary>
            Create a list view on this list containing the (first) occurrence of a particular item. 
            <exception cref="T:Csla.C5.NoSuchItemException"/> if the item is not in this list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.LastViewOf(`0)">
            <summary>
            Create a list view on this list containing the last occurrence of a particular item. 
            <exception cref="T:Csla.C5.NoSuchItemException"/> if the item is not in this list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.Slide(System.Int32)">
            <summary>
            Slide this list view along the underlying list.
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the operation
            would bring either end of the view outside the underlying list.</exception>
            <param name="offset">The signed amount to slide: positive to slide
            towards the end.</param>
        </member>
        <member name="M:Csla.C5.IList`1.Slide(System.Int32,System.Int32)">
            <summary>
            Slide this list view along the underlying list, changing its size.
            
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the operation
            would bring either end of the view outside the underlying list.</exception>
            <param name="offset">The signed amount to slide: positive to slide
            towards the end.</param>
            <param name="size">The new size of the view.</param>
        </member>
        <member name="M:Csla.C5.IList`1.TrySlide(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.IList`1.TrySlide(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.IList`1.Span(Csla.C5.IList{`0})">
            <summary>
            
            <para>Returns null if <code>otherView</code> is strictly to the left of this view</para>
            </summary>
            <param name="otherView"></param>
            <exception cref="T:Csla.C5.IncompatibleViewException">If otherView does not have the same underlying list as this</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <code>otherView</code> is strictly to the left of this view</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.IList`1.Reverse">
            <summary>
            Reverse the list so the items are in the opposite sequence order.
            </summary>
        </member>
        <member name="M:Csla.C5.IList`1.IsSorted">
            <summary>
            Check if this list is sorted according to the default sorting order
            for the item type T, as defined by the <see cref="T:C5.Comparer`1"/> class 
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">if T is not comparable</exception>
            <returns>True if the list is sorted, else false.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.IsSorted(System.Collections.Generic.IComparer{`0})">
            <summary>
            Check if this list is sorted according to a specific sorting order.
            </summary>
            <param name="comparer">The comparer defining the sorting order.</param>
            <returns>True if the list is sorted, else false.</returns>
        </member>
        <member name="M:Csla.C5.IList`1.Sort">
            <summary>
            Sort the items of the list according to the default sorting order
            for the item type T, as defined by the <see cref="T:C5.Comparer`1"/> class 
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">if T is not comparable</exception>
        </member>
        <member name="M:Csla.C5.IList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort the items of the list according to a specified sorting order.
            <para>The sorting does not perform duplicate elimination or identify items
            according to the comparer or itemequalityComparer. I.e. the list as an 
            unsequenced collection with binary equality, will not change.
            </para>
            </summary>
            <param name="comparer">The comparer defining the sorting order.</param>
        </member>
        <member name="M:Csla.C5.IList`1.Shuffle">
            <summary>
            Randomly shuffle the items of this list. 
            </summary>
        </member>
        <member name="M:Csla.C5.IList`1.Shuffle(System.Random)">
            <summary>
            Shuffle the items of this list according to a specific random source.
            </summary>
            <param name="rnd">The random source.</param>
        </member>
        <member name="P:Csla.C5.IList`1.First">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <value>The first item in this list.</value>
        </member>
        <member name="P:Csla.C5.IList`1.Last">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <value>The last item in this list.</value>
        </member>
        <member name="P:Csla.C5.IList`1.FIFO">
            <summary>
            Since <code>Add(T item)</code> always add at the end of the list,
            this describes if list has FIFO or LIFO semantics.
            </summary>
            <value>True if the <code>Remove()</code> operation removes from the
            start of the list, false if it removes from the end.</value>
        </member>
        <member name="P:Csla.C5.IList`1.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.IList`1.Item(System.Int32)">
            <summary>
            On this list, this indexer is read/write.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"> if index is negative or
            &gt;= the size of the collection.</exception>
            <value>The index'th item of this list.</value>
            <param name="index">The index of the item to fetch or store.</param>
        </member>
        <member name="P:Csla.C5.IList`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.IList`1.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.IList`1.Underlying">
            <summary>
            Null if this list is not a view.
            </summary>
            <value>Underlying list for view.</value>
        </member>
        <member name="P:Csla.C5.IList`1.Offset">
            <summary>
            </summary>
            <value>Offset for this list view or 0 for an underlying list.</value>
        </member>
        <member name="P:Csla.C5.IList`1.IsValid">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Csla.C5.GuardedList`1.#ctor(Csla.C5.IList{`0})">
            <summary>
            Wrap a list in a read-only wrapper.  A list gets wrapped as read-only,
            a list view gets wrapped as read-only and non-slidable.
            </summary>
            <param name="list">The list</param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Insert(System.Int32,`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Insert(Csla.C5.IList{`0},`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="pointer"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.InsertFirst(`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.InsertLast(`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.InsertBefore(`0,`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
            <param name="target"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.InsertAfter(`0,`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="item"></param>
            <param name="target"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.InsertAll``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="i"></param>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.FindAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Perform FindAll on the wrapped list. The result is <b>not</b> necessarily read-only.
            </summary>
            <param name="filter">The filter to use</param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Map``1(Csla.C5.Fun{`0,``0})">
            <summary>
            Perform Map on the wrapped list. The result is <b>not</b> necessarily read-only.
            </summary>
            <typeparam name="V">The type of items of the new list</typeparam>
            <param name="mapper">The mapper to use.</param>
            <returns>The mapped list</returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Map``1(Csla.C5.Fun{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Perform Map on the wrapped list. The result is <b>not</b> necessarily read-only.
            </summary>
            <typeparam name="V">The type of items of the new list</typeparam>
            <param name="mapper">The delegate defining the map.</param>
            <param name="itemequalityComparer">The itemequalityComparer to use for the new list</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Remove">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.RemoveFirst">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.RemoveLast">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.View(System.Int32,System.Int32)">
            <summary>
            Create the indicated view on the wrapped list and wrap it read-only.
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.ViewOf(`0)">
            <summary>
            Create the indicated view on the wrapped list and wrap it read-only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.LastViewOf(`0)">
            <summary>
            Create the indicated view on the wrapped list and wrap it read-only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Slide(System.Int32)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> if this is a wrapped view and not a view that was made on a wrapper</exception>
            <param name="offset"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Slide(System.Int32,System.Int32)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="offset"></param>
            <param name="size"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.TrySlide(System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.TrySlide(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Span(Csla.C5.IList{`0})">
            <summary>
            
            </summary>
            <param name="otherView"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Reverse">
            <summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            </summary>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.IsSorted">
            <summary>
            Check if wrapped list is sorted according to the default sorting order
            for the item type T, as defined by the <see cref="T:C5.Comparer`1"/> class 
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">if T is not comparable</exception>
            <returns>True if the list is sorted, else false.</returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.IsSorted(System.Collections.Generic.IComparer{`0})">
            <summary>
            Check if wrapped list is sorted
            </summary>
            <param name="c">The sorting order to use</param>
            <returns>True if sorted</returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Sort">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="c"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Shuffle">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Shuffle(System.Random)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="rnd"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.IndexOf(`0)">
            <summary>
            Find the (first) index of an item in the wrapped collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.LastIndexOf(`0)">
            <summary>
            Find the last index of an item in the wrapped collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.RemoveAt(System.Int32)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.RemoveInterval(System.Int32,System.Int32)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Push(`0)">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns>-</returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Pop">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns>-</returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Enqueue(`0)">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns>-</returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Dequeue">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns>-</returns>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Dispose">
            <summary>
            Ignore: this may be called by a foreach or using statement.
            </summary>
        </member>
        <member name="M:Csla.C5.GuardedList`1.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.GuardedList`1.First">
            <summary>
            
            </summary>
            <value>The first item of the wrapped list</value>
        </member>
        <member name="P:Csla.C5.GuardedList`1.Last">
            <summary>
            
            </summary>
            <value>The last item of the wrapped list</value>
        </member>
        <member name="P:Csla.C5.GuardedList`1.FIFO">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> if used as setter</exception>
            <value>True if wrapped list has FIFO semantics for the Add(T item) and Remove() methods</value>
        </member>
        <member name="P:Csla.C5.GuardedList`1.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.GuardedList`1.Item(System.Int32)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> if used as setter</exception>
            <value>The i'th item of the wrapped list</value>
        </member>
        <member name="P:Csla.C5.GuardedList`1.IndexingSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.GuardedList`1.Underlying">
            <summary>
            </summary>
            <value>The wrapped underlying list of the wrapped view </value>
        </member>
        <member name="P:Csla.C5.GuardedList`1.Offset">
            <summary>
            
            </summary>
            <value>The offset of the wrapped list as a view.</value>
        </member>
        <member name="P:Csla.C5.GuardedList`1.IsValid">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.GuardedList`1.Item(System.Int32,System.Int32)">
            <summary> </summary>
            <value>A directed collection of the items in the indicated interval of the wrapped collection</value>
        </member>
        <member name="T:Csla.C5.GuardedQueue`1">
            <summary>
            A read-only wrapper for a generic indexable queue (allows indexing).
            
            <para>Suitable for wrapping a <see cref="T:C5.CircularQueue`1"/></para>
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="M:Csla.C5.GuardedQueue`1.#ctor(Csla.C5.IQueue{`0})">
            <summary>
            Wrap a queue in a read-only wrapper
            </summary>
            <param name="queue">The queue</param>
        </member>
        <member name="M:Csla.C5.GuardedQueue`1.Enqueue(`0)">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns>-</returns>
        </member>
        <member name="M:Csla.C5.GuardedQueue`1.Dequeue">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns>-</returns>
        </member>
        <member name="P:Csla.C5.GuardedQueue`1.AllowsDuplicates">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.GuardedQueue`1.Item(System.Int32)">
            <summary>
            Index into the wrapped queue
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.GuardedDictionary`2">
             <summary>
             A read-only wrapper for a dictionary.
            
             <i>Suitable for wrapping a HashDictionary. <see cref="T:C5.HashDictionary`2"/></i>
             </summary>
        </member>
        <member name="T:Csla.C5.IDictionary`2">
            <summary>
            A dictionary with keys of type K and values of type V. Equivalent to a
            finite partial map from K to V.
            </summary>
        </member>
        <member name="M:Csla.C5.IDictionary`2.Add(`0,`1)">
            <summary>
            Add a new (key, value) pair (a mapping) to the dictionary.
            </summary>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> if there already is an entry with the same key. </exception>&gt;
            <param name="key">Key to add</param>
            <param name="val">Value to add</param>
        </member>
        <member name="M:Csla.C5.IDictionary`2.AddAll``2(System.Collections.Generic.IEnumerable{Csla.C5.KeyValuePair{``0,``1}})">
            <summary>
            Add the entries from a collection of <see cref="T:C5.KeyValuePair`2"/> pairs to this dictionary.
            </summary>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> 
            If the input contains duplicate keys or a key already present in this dictionary.</exception>
            <param name="entries"></param>
        </member>
        <member name="M:Csla.C5.IDictionary`2.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check whether this collection contains all the values in another collection.
            If this collection has bag semantics (<code>AllowsDuplicates==true</code>)
            the check is made with respect to multiplicities, else multiplicities
            are not taken into account.
            </summary>
            <param name="items">The </param>
            <returns>True if all values in <code>items</code>is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.IDictionary`2.Remove(`0)">
            <summary>
            Remove an entry with a given key from the dictionary
            </summary>
            <param name="key">The key of the entry to remove</param>
            <returns>True if an entry was found (and removed)</returns>
        </member>
        <member name="M:Csla.C5.IDictionary`2.Remove(`0,`1@)">
            <summary>
            Remove an entry with a given key from the dictionary and report its value.
            </summary>
            <param name="key">The key of the entry to remove</param>
            <param name="val">On exit, the value of the removed entry</param>
            <returns>True if an entry was found (and removed)</returns>
        </member>
        <member name="M:Csla.C5.IDictionary`2.Clear">
            <summary>
            Remove all entries from the dictionary
            </summary>
        </member>
        <member name="M:Csla.C5.IDictionary`2.Contains(`0)">
            <summary>
            Check if there is an entry with a specified key
            </summary>
            <param name="key">The key to look for</param>
            <returns>True if key was found</returns>
        </member>
        <member name="M:Csla.C5.IDictionary`2.Find(`0,`1@)">
            <summary>
            Check if there is an entry with a specified key and report the corresponding
            value if found. This can be seen as a safe form of "val = this[key]".
            </summary>
            <param name="key">The key to look for</param>
            <param name="val">On exit, the value of the entry</param>
            <returns>True if key was found</returns>
        </member>
        <member name="M:Csla.C5.IDictionary`2.Find(`0@,`1@)">
            <summary>
            Check if there is an entry with a specified key and report the corresponding
            value if found. This can be seen as a safe form of "val = this[key]".
            </summary>
            <param name="key">The key to look for</param>
            <param name="val">On exit, the value of the entry</param>
            <returns>True if key was found</returns>
        </member>
        <member name="M:Csla.C5.IDictionary`2.Update(`0,`1)">
            <summary>
            Look for a specific key in the dictionary and if found replace the value with a new one.
            This can be seen as a non-adding version of "this[key] = val".
            </summary>
            <param name="key">The key to look for</param>
            <param name="val">The new value</param>
            <returns>True if key was found</returns>
        </member>
        <member name="M:Csla.C5.IDictionary`2.Update(`0,`1,`1@)">
            <summary>
            Look for a specific key in the dictionary and if found replace the value with a new one.
            This can be seen as a non-adding version of "this[key] = val" reporting the old value.
            </summary>
            <param name="key">The key to look for</param>
            <param name="val">The new value</param>
            <param name="oldval">The old value if any</param>
            <returns>True if key was found</returns>
        </member>
        <member name="M:Csla.C5.IDictionary`2.FindOrAdd(`0,`1@)">
            <summary>
            Look for a specific key in the dictionary. If found, report the corresponding value,
            else add an entry with the key and the supplied value.
            </summary>
            <param name="key">The key to look for</param>
            <param name="val">On entry the value to add if the key is not found.
            On exit the value found if any.</param>
            <returns>True if key was found</returns>
        </member>
        <member name="M:Csla.C5.IDictionary`2.UpdateOrAdd(`0,`1)">
            <summary>
            Update value in dictionary corresponding to key if found, else add new entry.
            More general than "this[key] = val;" by reporting if key was found.
            </summary>
            <param name="key">The key to look for</param>
            <param name="val">The value to add or replace with.</param>
            <returns>True if key was found and value updated.</returns>
        </member>
        <member name="M:Csla.C5.IDictionary`2.UpdateOrAdd(`0,`1,`1@)">
            <summary>
            Update value in dictionary corresponding to key if found, else add new entry.
            More general than "this[key] = val;" by reporting if key was found.
            </summary>
            <param name="key">The key to look for</param>
            <param name="val">The value to add or replace with.</param>
            <param name="oldval">The old value if any</param>
            <returns>True if key was found and value updated.</returns>
        </member>
        <member name="M:Csla.C5.IDictionary`2.Check">
            <summary>
            Check the integrity of the internal data structures of this dictionary.
            Only avaliable in DEBUG builds???
            </summary>
            <returns>True if check does not fail.</returns>
        </member>
        <member name="P:Csla.C5.IDictionary`2.EqualityComparer">
            <summary>
            The key equalityComparer.
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.IDictionary`2.Item(`0)">
            <summary>
            Indexer for dictionary.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no entry is found. </exception>
            <value>The value corresponding to the key</value>
        </member>
        <member name="P:Csla.C5.IDictionary`2.IsReadOnly">
            <summary>
            
            </summary>
            <value>True if dictionary is read-only</value>
        </member>
        <member name="P:Csla.C5.IDictionary`2.Keys">
            <summary>
            
            </summary>
            <value>A collection containg the all the keys of the dictionary</value>
        </member>
        <member name="P:Csla.C5.IDictionary`2.Values">
            <summary>
            
            </summary>
            <value>A collection containing all the values of the dictionary</value>
        </member>
        <member name="P:Csla.C5.IDictionary`2.Fun">
            <summary>
            
            </summary>
            <value>A delegate of type <see cref="T:C5.Fun`2"/> defining the partial function from K to V give by the dictionary.</value>
        </member>
        <member name="P:Csla.C5.IDictionary`2.ContainsSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant). 
            <para>See <see cref="T:C5.Speed"/> for the set of symbols.</para>
            </summary>
            <value>A characterization of the speed of lookup operations
            (<code>Contains()</code> etc.) of the implementation of this dictionary.</value>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.#ctor(Csla.C5.IDictionary{`0,`1})">
            <summary>
            Wrap a dictionary in a read-only wrapper
            </summary>
            <param name="dict">the dictionary</param>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.Add(`0,`1)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.AddAll``2(System.Collections.Generic.IEnumerable{Csla.C5.KeyValuePair{``0,``1}})">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.Remove(`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.Remove(`0,`1@)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.Clear">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.Contains(`0)">
            <summary>
            Check if the wrapped dictionary contains a specific key
            </summary>
            <param name="key">The key</param>
            <returns>True if it does</returns>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.Find(`0,`1@)">
            <summary>
            Search for a key in the wrapped dictionary, reporting the value if found
            </summary>
            <param name="key">The key</param>
            <param name="val">On exit: the value if found</param>
            <returns>True if found</returns>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.Find(`0@,`1@)">
            <summary>
            Search for a key in the wrapped dictionary, reporting the value if found
            </summary>
            <param name="key">The key</param>
            <param name="val">On exit: the value if found</param>
            <returns>True if found</returns>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.Update(`0,`1)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.Update(`0,`1,`1@)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="key"></param>
            <param name="val"></param>
            <param name="oldval"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.FindOrAdd(`0,`1@)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.UpdateOrAdd(`0,`1)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.UpdateOrAdd(`0,`1,`1@)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="key"></param>
            <param name="val"></param>
            <param name="oldval"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.Check">
            <summary>
            Check the internal consistency of the wrapped dictionary
            </summary>
            <returns>True if check passed</returns>
        </member>
        <member name="M:Csla.C5.GuardedDictionary`2.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.GuardedDictionary`2.EqualityComparer">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.GuardedDictionary`2.Item(`0)">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a
            read-only wrappper if used as a setter</exception>
            <value>Get the value corresponding to a key in the wrapped dictionary</value>
        </member>
        <member name="P:Csla.C5.GuardedDictionary`2.IsReadOnly">
            <summary>
            (This is a read-only wrapper)
            </summary>
            <value>True</value>
        </member>
        <member name="P:Csla.C5.GuardedDictionary`2.Keys">
            <summary> </summary>
            <value>The collection of keys of the wrapped dictionary</value>
        </member>
        <member name="P:Csla.C5.GuardedDictionary`2.Values">
            <summary> </summary>
            <value>The collection of values of the wrapped dictionary</value>
        </member>
        <member name="P:Csla.C5.GuardedDictionary`2.Fun">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.GuardedDictionary`2.ContainsSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.GuardedSortedDictionary`2">
             <summary>
             A read-only wrapper for a sorted dictionary.
            
             <i>Suitable for wrapping a Dictionary. <see cref="T:C5.Dictionary`2"/></i>
             </summary>
        </member>
        <member name="T:Csla.C5.ISortedDictionary`2">
            <summary>
            A dictionary with sorted keys.
            </summary>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.FindMin">
            <summary>
            Find the current least item of this sorted collection.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if the collection is empty.</exception>
            <returns>The least item.</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.DeleteMin">
            <summary>
            Remove the least item from this sorted collection.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if the collection is empty.</exception>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.FindMax">
            <summary>
            Find the current largest item of this sorted collection.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if the collection is empty.</exception>
            <returns>The largest item.</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.DeleteMax">
            <summary>
            Remove the largest item from this sorted collection.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if the collection is empty.</exception>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.TryPredecessor(`0,Csla.C5.KeyValuePair{`0,`1}@)">
            <summary>
            Find the entry in the dictionary whose key is the
            predecessor of the specified key.
            </summary>
            <param name="key">The key</param>
            <param name="res">The predecessor, if any</param>
            <returns>True if key has a predecessor</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.TrySuccessor(`0,Csla.C5.KeyValuePair{`0,`1}@)">
            <summary>
            Find the entry in the dictionary whose key is the
            successor of the specified key.
            </summary>
            <param name="key">The key</param>
            <param name="res">The successor, if any</param>
            <returns>True if the key has a successor</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.TryWeakPredecessor(`0,Csla.C5.KeyValuePair{`0,`1}@)">
            <summary>
            Find the entry in the dictionary whose key is the
            weak predecessor of the specified key.
            </summary>
            <param name="key">The key</param>
            <param name="res">The predecessor, if any</param>
            <returns>True if key has a weak predecessor</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.TryWeakSuccessor(`0,Csla.C5.KeyValuePair{`0,`1}@)">
            <summary>
            Find the entry in the dictionary whose key is the
            weak successor of the specified key.
            </summary>
            <param name="key">The key</param>
            <param name="res">The weak successor, if any</param>
            <returns>True if the key has a weak successor</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.Predecessor(`0)">
            <summary>
            Find the entry with the largest key less than a given key.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if there is no such entry. </exception>
            <param name="key">The key to compare to</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.Successor(`0)">
            <summary>
            Find the entry with the least key greater than a given key.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if there is no such entry. </exception>
            <param name="key">The key to compare to</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.WeakPredecessor(`0)">
            <summary>
            Find the entry with the largest key less than or equal to a given key.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if there is no such entry. </exception>
            <param name="key">The key to compare to</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.WeakSuccessor(`0)">
            <summary>
            Find the entry with the least key greater than or equal to a given key.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if there is no such entry. </exception>
            <param name="key">The key to compare to</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.Cut(System.IComparable{`0},Csla.C5.KeyValuePair{`0,`1}@,System.Boolean@,Csla.C5.KeyValuePair{`0,`1}@,System.Boolean@)">
            <summary>
            Given a "cut" function from the items of the sorted collection to <code>int</code>
            whose only sign changes when going through items in increasing order
            can be 
            <list>
            <item>from positive to zero</item>
            <item>from positive to negative</item>
            <item>from zero to negative</item>
            </list>
            The "cut" function is supplied as the <code>CompareTo</code> method 
            of an object <code>c</code> implementing 
            <code>IComparable&lt;K&gt;</code>. 
            A typical example is the case where <code>K</code> is comparable and 
            <code>c</code> is itself of type <code>K</code>.
            <para>This method performs a search in the sorted collection for the ranges in which the
            "cut" function is negative, zero respectively positive. If <code>K</code> is comparable
            and <code>c</code> is of type <code>K</code>, this is a safe way (no exceptions thrown) 
            to find predecessor and successor of <code>c</code>.
            </para>
            <para> If the supplied cut function does not satisfy the sign-change condition, 
            the result of this call is undefined.
            </para>
            
            </summary>
            <param name="cutFunction">The cut function <code>K</code> to <code>int</code>, given
            by the <code>CompareTo</code> method of an object implementing 
            <code>IComparable&lt;K&gt;</code>.</param>
            <param name="lowEntry">Returns the largest item in the collection, where the
            cut function is positive (if any).</param>
            <param name="lowIsValid">Returns true if the cut function is positive somewhere
            on this collection.</param>
            <param name="highEntry">Returns the least item in the collection, where the
            cut function is negative (if any).</param>
            <param name="highIsValid">Returns true if the cut function is negative somewhere
            on this collection.</param>
            <returns>True if the cut function is zero somewhere
            on this collection.</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.RangeFrom(`0)">
            <summary>
            Query this sorted collection for items greater than or equal to a supplied value.
            <para>The returned collection is not a copy but a view into the collection.</para>
            <para>The view is fragile in the sense that changes to the underlying collection will 
            invalidate the view so that further operations on the view throws InvalidView exceptions.</para>
            </summary>
            <param name="bot">The lower bound (inclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.RangeFromTo(`0,`0)">
            <summary>
            Query this sorted collection for items between two supplied values.
            <para>The returned collection is not a copy but a view into the collection.</para>
            <para>The view is fragile in the sense that changes to the underlying collection will 
            invalidate the view so that further operations on the view throws InvalidView exceptions.</para>
            </summary>
            <param name="lowerBound">The lower bound (inclusive).</param>
            <param name="upperBound">The upper bound (exclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.RangeTo(`0)">
            <summary>
            Query this sorted collection for items less than a supplied value.
            <para>The returned collection is not a copy but a view into the collection.</para>
            <para>The view is fragile in the sense that changes to the underlying collection will 
            invalidate the view so that further operations on the view throws InvalidView exceptions.</para>
            </summary>
            <param name="top">The upper bound (exclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.RangeAll">
            <summary>
            Create a directed collection with the same items as this collection.
            <para>The returned collection is not a copy but a view into the collection.</para>
            <para>The view is fragile in the sense that changes to the underlying collection will 
            invalidate the view so that further operations on the view throws InvalidView exceptions.</para>
            </summary>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.AddSorted(System.Collections.Generic.IEnumerable{Csla.C5.KeyValuePair{`0,`1}})">
            <summary>
            Add all the items from another collection with an enumeration order that 
            is increasing in the items.
            </summary>
            <exception cref="T:System.ArgumentException"> if the enumerated items turns out
            not to be in increasing order.</exception>
            <param name="items">The collection to add.</param>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.RemoveRangeFrom(`0)">
            <summary>
            Remove all items of this collection above or at a supplied threshold.
            </summary>
            <param name="low">The lower threshold (inclusive).</param>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.RemoveRangeFromTo(`0,`0)">
            <summary>
            Remove all items of this collection between two supplied thresholds.
            </summary>
            <param name="low">The lower threshold (inclusive).</param>
            <param name="hi">The upper threshold (exclusive).</param>
        </member>
        <member name="M:Csla.C5.ISortedDictionary`2.RemoveRangeTo(`0)">
            <summary>
            Remove all items of this collection below a supplied threshold.
            </summary>
            <param name="hi">The upper threshold (exclusive).</param>
        </member>
        <member name="P:Csla.C5.ISortedDictionary`2.Keys">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.ISortedDictionary`2.Comparer">
            <summary>
            The key comparer used by this dictionary.
            </summary>
            <value></value>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.#ctor(Csla.C5.ISortedDictionary{`0,`1})">
            <summary>
            Wrap a sorted dictionary in a read-only wrapper
            </summary>
            <param name="sorteddict">the dictionary</param>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.TryPredecessor(`0,Csla.C5.KeyValuePair{`0,`1}@)">
            <summary>
            Find the entry in the dictionary whose key is the
            predecessor of the specified key.
            </summary>
            <param name="key">The key</param>
            <param name="res">The predecessor, if any</param>
            <returns>True if key has a predecessor</returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.TrySuccessor(`0,Csla.C5.KeyValuePair{`0,`1}@)">
            <summary>
            Find the entry in the dictionary whose key is the
            successor of the specified key.
            </summary>
            <param name="key">The key</param>
            <param name="res">The successor, if any</param>
            <returns>True if the key has a successor</returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.TryWeakPredecessor(`0,Csla.C5.KeyValuePair{`0,`1}@)">
            <summary>
            Find the entry in the dictionary whose key is the
            weak predecessor of the specified key.
            </summary>
            <param name="key">The key</param>
            <param name="res">The predecessor, if any</param>
            <returns>True if key has a weak predecessor</returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.TryWeakSuccessor(`0,Csla.C5.KeyValuePair{`0,`1}@)">
            <summary>
            Find the entry in the dictionary whose key is the
            weak successor of the specified key.
            </summary>
            <param name="key">The key</param>
            <param name="res">The weak successor, if any</param>
            <returns>True if the key has a weak successor</returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.Predecessor(`0)">
            <summary>
            Get the entry in the wrapped dictionary whose key is the
            predecessor of a specified key.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such entry exists </exception>    
            <param name="key">The key</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.Successor(`0)">
            <summary>
            Get the entry in the wrapped dictionary whose key is the
            successor of a specified key.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such entry exists </exception>    
            <param name="key">The key</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.WeakPredecessor(`0)">
            <summary>
            Get the entry in the wrapped dictionary whose key is the
            weak predecessor of a specified key.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such entry exists </exception>    
            <param name="key">The key</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.WeakSuccessor(`0)">
            <summary>
            Get the entry in the wrapped dictionary whose key is the
            weak successor of a specified key.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such entry exists </exception>    
            <param name="key">The key</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.FindMin">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.DeleteMin">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.FindMax">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.DeleteMax">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.Cut(System.IComparable{`0},Csla.C5.KeyValuePair{`0,`1}@,System.Boolean@,Csla.C5.KeyValuePair{`0,`1}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="lowEntry"></param>
            <param name="lowIsValid"></param>
            <param name="highEntry"></param>
            <param name="highIsValid"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.RangeFrom(`0)">
            <summary>
            
            </summary>
            <param name="bot"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.RangeFromTo(`0,`0)">
            <summary>
            
            </summary>
            <param name="bot"></param>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.RangeTo(`0)">
            <summary>
            
            </summary>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.RangeAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.AddSorted(System.Collections.Generic.IEnumerable{Csla.C5.KeyValuePair{`0,`1}})">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.RemoveRangeFrom(`0)">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="low"></param>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.RemoveRangeFromTo(`0,`0)">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="low"></param>
            <param name="hi"></param>
        </member>
        <member name="M:Csla.C5.GuardedSortedDictionary`2.RemoveRangeTo(`0)">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> since this is a read-only wrappper</exception>
            <param name="hi"></param>
        </member>
        <member name="P:Csla.C5.GuardedSortedDictionary`2.Comparer">
            <summary>
            The key comparer used by this dictionary.
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.GuardedSortedDictionary`2.Keys">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.Speed">
            <summary>
            The symbolic characterization of the speed of lookups for a collection.
            The values may refer to worst-case, amortized and/or expected asymtotic 
            complexity wrt. the collection size.
            </summary>
        </member>
        <member name="F:Csla.C5.Speed.PotentiallyInfinite">
            <summary>
            Counting the collection with the <code>Count property</code> may not return
            (for a synthetic and potentially infinite collection).
            </summary>
        </member>
        <member name="F:Csla.C5.Speed.Linear">
            <summary>
            Lookup operations like <code>Contains(T item)</code> or the <code>Count</code>
            property may take time O(n),
            where n is the size of the collection.
            </summary>
        </member>
        <member name="F:Csla.C5.Speed.Log">
            <summary>
            Lookup operations like <code>Contains(T item)</code> or the <code>Count</code>
            property  takes time O(log n),
            where n is the size of the collection.
            </summary>
        </member>
        <member name="F:Csla.C5.Speed.Constant">
            <summary>
            Lookup operations like <code>Contains(T item)</code> or the <code>Count</code>
            property  takes time O(1),
            where n is the size of the collection.
            </summary>
        </member>
        <member name="T:Csla.C5.EnumerationDirection">
            <summary>
            Direction of enumeration order relative to original collection.
            </summary>
        </member>
        <member name="F:Csla.C5.EnumerationDirection.Forwards">
            <summary>
            Same direction
            </summary>
        </member>
        <member name="F:Csla.C5.EnumerationDirection.Backwards">
            <summary>
            Opposite direction
            </summary>
        </member>
        <member name="T:Csla.Wpf.ErrorEventArgs">
            <summary>
            Contains information about the error that
            has occurred.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ErrorEventArgs.Error">
            <summary>
            Gets the Exception object for the error
            that occurred.
            </summary>
        </member>
        <member name="T:Csla.Web.SelectObjectArgs">
            <summary>
            Argument object used in the SelectObject event.
            </summary>
        </member>
        <member name="M:Csla.Web.SelectObjectArgs.#ctor(System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Creates an instance of the object, initializing
            it with values from data binding.
            </summary>
            <param name="args">Values provided from data binding.</param>
        </member>
        <member name="P:Csla.Web.SelectObjectArgs.BusinessObject">
            <summary>
            Get or set a reference to the business object
            that is created and populated by the SelectObject
            event handler in the web page.
            </summary>
            <value>A reference to a CSLA .NET business object.</value>
        </member>
        <member name="P:Csla.Web.SelectObjectArgs.SortExpression">
            <summary>
            Gets the sort expression that should be used to
            sort the data being returned to the data source
            control.
            </summary>
        </member>
        <member name="P:Csla.Web.SelectObjectArgs.SortProperty">
            <summary>
            Gets the property name for the sort if only one
            property/column name is specified.
            </summary>
            <remarks>
            If multiple properties/columns are specified
            for the sort, you must parse the value from
            <see cref="P:Csla.Web.SelectObjectArgs.SortExpression"/> to find all the
            property names and sort directions for the sort.
            </remarks>
        </member>
        <member name="P:Csla.Web.SelectObjectArgs.SortDirection">
            <summary>
            Gets the sort direction for the sort if only
            one property/column name is specified.
            </summary>
            <remarks>
            If multiple properties/columns are specified
            for the sort, you must parse the value from
            <see cref="P:Csla.Web.SelectObjectArgs.SortExpression"/> to find all the
            property names and sort directions for the sort.
            </remarks>
        </member>
        <member name="P:Csla.Web.SelectObjectArgs.StartRowIndex">
            <summary>
            Gets the index for the first row that will be
            displayed. This should be the first row in
            the resulting collection set into the
            <see cref="P:Csla.Web.SelectObjectArgs.BusinessObject"/> property.
            </summary>
        </member>
        <member name="P:Csla.Web.SelectObjectArgs.MaximumRows">
            <summary>
            Gets the maximum number of rows that
            should be returned as a result of this
            query. For paged collections, this is the
            page size.
            </summary>
        </member>
        <member name="P:Csla.Web.SelectObjectArgs.RetrieveTotalRowCount">
            <summary>
            Gets a value indicating whether the
            query should return the total row count
            through the
            <see cref="T:Csla.Core.IReportTotalRowCount"/>
            interface.
            </summary>
        </member>
        <member name="T:Csla.SmartDate">
            <summary>
            Provides a date data type that understands the concept
            of an empty date value.
            </summary>
            <remarks>
            See Chapter 5 for a full discussion of the need for this
            data type and the design choices behind it.
            </remarks>
        </member>
        <member name="T:Csla.Core.ISmartField">
            <summary>
            Defines members required for smart
            data types that understand the concept
            of being empty, and representing an
            empty value as an empty string.
            </summary>
        </member>
        <member name="P:Csla.Core.ISmartField.Text">
            <summary>
            Sets or gets the text representation
            of the value.
            </summary>
            <remarks>
            An empty string indicates an empty value.
            </remarks>
        </member>
        <member name="P:Csla.Core.ISmartField.IsEmpty">
            <summary>
            Gets a value indicating whether the
            field's value is empty.
            </summary>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.Boolean)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(Csla.SmartDate.EmptyValue)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTime)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <remarks>
            The SmartDate created will use the min possible
            date to represent an empty date.
            </remarks>
            <param name="value">The initial value of the object.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTime,System.Boolean)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTime,Csla.SmartDate.EmptyValue)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTime,Csla.SmartDate.EmptyValue,System.DateTimeKind)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
            <param name="kind">One of the DateTimeKind values.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.Nullable{System.DateTime})">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <remarks>
            The SmartDate created will use the min possible
            date to represent an empty date.
            </remarks>
            <param name="value">The initial value of the object.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.Nullable{System.DateTime},Csla.SmartDate.EmptyValue)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTimeOffset)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <remarks>
            <para>
            The SmartDate created will use the min possible
            date to represent an empty date.
            </para><para>
            SmartDate maintains the date value as a DateTime,
            so the provided DateTimeOffset is converted to a
            DateTime in this constructor. You should be aware
            that this can lead to a loss of precision in
            some cases.
            </para>
            </remarks>
            <param name="value">The initial value of the object.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTimeOffset,System.Boolean)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
            <remarks>
            SmartDate maintains the date value as a DateTime,
            so the provided DateTimeOffset is converted to a
            DateTime in this constructor. You should be aware
            that this can lead to a loss of precision in
            some cases.
            </remarks>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTimeOffset,Csla.SmartDate.EmptyValue)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
            <remarks>
            SmartDate maintains the date value as a DateTime,
            so the provided DateTimeOffset is converted to a
            DateTime in this constructor. You should be aware
            that this can lead to a loss of precision in
            some cases.
            </remarks>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.String)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <remarks>
            The SmartDate created will use the min possible
            date to represent an empty date.
            </remarks>
            <param name="value">The initial value of the object (as text).</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object (as text).</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.String,Csla.SmartDate.EmptyValue)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object (as text).</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.SetDefaultFormatString(System.String)">
            <summary>
            Sets the global default format string used by all new
            SmartDate values going forward.
            </summary>
            <remarks>
            The default global format string is "d" unless this
            method is called to change that value. Existing SmartDate
            values are unaffected by this method, only SmartDate
            values created after calling this method are affected.
            </remarks>
            <param name="formatString">
            The format string should follow the requirements for the
            .NET System.String.Format statement.
            </param>
        </member>
        <member name="M:Csla.SmartDate.ToDateTimeOffset">
            <summary>
            Gets the value as a DateTimeOffset.
            </summary>
        </member>
        <member name="M:Csla.SmartDate.ToNullableDate">
            <summary>
            Gets the value as a DateTime?.
            </summary>
        </member>
        <member name="M:Csla.SmartDate.ToString">
            <summary>
            Returns a text representation of the date value.
            </summary>
        </member>
        <member name="M:Csla.SmartDate.ToString(System.String)">
            <summary>
            Returns a text representation of the date value.
            </summary>
            <param name="format">
            A standard .NET format string.
            </param>
        </member>
        <member name="M:Csla.SmartDate.Equals(System.Object)">
            <summary>
            Compares this object to another <see cref="T:Csla.SmartDate"/>
            for equality.
            </summary>
            <param name="obj">Object to compare for equality.</param>
        </member>
        <member name="M:Csla.SmartDate.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
        </member>
        <member name="M:Csla.SmartDate.Parse(System.String)">
            <summary>
            Converts a string value into a SmartDate.
            </summary>
            <param name="value">String containing the date value.</param>
            <returns>A new SmartDate containing the date value.</returns>
            <remarks>
            EmptyIsMin will default to <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Csla.SmartDate.Parse(System.String,Csla.SmartDate.EmptyValue)">
            <summary>
            Converts a string value into a SmartDate.
            </summary>
            <param name="value">String containing the date value.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
            <returns>A new SmartDate containing the date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.Parse(System.String,System.Boolean)">
            <summary>
            Converts a string value into a SmartDate.
            </summary>
            <param name="value">String containing the date value.</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
            <returns>A new SmartDate containing the date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.TryParse(System.String,Csla.SmartDate@)">
            <summary>
            Converts a string value into a SmartDate.
            </summary>
            <param name="value">String containing the date value.</param>
            <param name="result">The resulting SmartDate value if the parse was successful.</param>
            <returns>A value indicating if the parse was successful.</returns>
        </member>
        <member name="M:Csla.SmartDate.TryParse(System.String,Csla.SmartDate.EmptyValue,Csla.SmartDate@)">
            <summary>
            Converts a string value into a SmartDate.
            </summary>
            <param name="value">String containing the date value.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
            <param name="result">The resulting SmartDate value if the parse was successful.</param>
            <returns>A value indicating if the parse was successful.</returns>
        </member>
        <member name="M:Csla.SmartDate.StringToDate(System.String)">
            <summary>
            Converts a text date representation into a Date value.
            </summary>
            <remarks>
            An empty string is assumed to represent an empty date. An empty date
            is returned as the MinValue of the Date datatype.
            </remarks>
            <param name="value">The text representation of the date.</param>
            <returns>A Date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.StringToDate(System.String,System.Boolean)">
            <summary>
            Converts a text date representation into a Date value.
            </summary>
            <remarks>
            An empty string is assumed to represent an empty date. An empty date
            is returned as the MinValue or MaxValue of the Date datatype depending
            on the EmptyIsMin parameter.
            </remarks>
            <param name="value">The text representation of the date.</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
            <returns>A Date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.StringToDate(System.String,Csla.SmartDate.EmptyValue)">
            <summary>
            Converts a text date representation into a Date value.
            </summary>
            <remarks>
            An empty string is assumed to represent an empty date. An empty date
            is returned as the MinValue or MaxValue of the Date datatype depending
            on the EmptyIsMin parameter.
            </remarks>
            <param name="value">The text representation of the date.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
            <returns>A Date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.DateToString(System.DateTime,System.String)">
            <summary>
            Converts a date value into a text representation.
            </summary>
            <remarks>
            The date is considered empty if it matches the min value for
            the Date datatype. If the date is empty, this
            method returns an empty string. Otherwise it returns the date
            value formatted based on the FormatString parameter.
            </remarks>
            <param name="value">The date value to convert.</param>
            <param name="formatString">The format string used to format the date into text.</param>
            <returns>Text representation of the date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.DateToString(System.DateTime,System.String,System.Boolean)">
            <summary>
            Converts a date value into a text representation.
            </summary>
            <remarks>
            Whether the date value is considered empty is determined by
            the EmptyIsMin parameter value. If the date is empty, this
            method returns an empty string. Otherwise it returns the date
            value formatted based on the FormatString parameter.
            </remarks>
            <param name="value">The date value to convert.</param>
            <param name="formatString">The format string used to format the date into text.</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
            <returns>Text representation of the date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.DateToString(System.DateTime,System.String,Csla.SmartDate.EmptyValue)">
            <summary>
            Converts a date value into a text representation.
            </summary>
            <remarks>
            Whether the date value is considered empty is determined by
            the EmptyIsMin parameter value. If the date is empty, this
            method returns an empty string. Otherwise it returns the date
            value formatted based on the FormatString parameter.
            </remarks>
            <param name="value">The date value to convert.</param>
            <param name="formatString">The format string used to format the date into text.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
            <returns>Text representation of the date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.CompareTo(Csla.SmartDate)">
            <summary>
            Compares one SmartDate to another.
            </summary>
            <remarks>
            This method works the same as the DateTime.CompareTo method
            on the Date datetype, with the exception that it
            understands the concept of empty date values.
            </remarks>
            <param name="value">The date to which we are being compared.</param>
            <returns>A value indicating if the comparison date is less than, equal to or greater than this date.</returns>
        </member>
        <member name="M:Csla.SmartDate.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares one SmartDate to another.
            </summary>
            <remarks>
            This method works the same as the DateTime.CompareTo method
            on the Date datetype, with the exception that it
            understands the concept of empty date values.
            </remarks>
            <param name="value">The date to which we are being compared.</param>
            <returns>A value indicating if the comparison date is less than, equal to or greater than this date.</returns>
        </member>
        <member name="M:Csla.SmartDate.CompareTo(System.String)">
            <summary>
            Compares a SmartDate to a text date value.
            </summary>
            <param name="value">The date to which we are being compared.</param>
            <returns>A value indicating if the comparison date is less than, equal to or greater than this date.</returns>
        </member>
        <member name="M:Csla.SmartDate.CompareTo(System.DateTimeOffset)">
            <summary>
            Compares a SmartDate to a date value.
            </summary>
            <param name="value">The date to which we are being compared.</param>
            <returns>A value indicating if the comparison date is less than, equal to or greater than this date.</returns>
            <remarks>
            SmartDate maintains the date value as a DateTime,
            so the provided DateTimeOffset is converted to a
            DateTime for this comparison. You should be aware
            that this can lead to a loss of precision in
            some cases.
            </remarks>
        </member>
        <member name="M:Csla.SmartDate.CompareTo(System.DateTime)">
            <summary>
            Compares a SmartDate to a date value.
            </summary>
            <param name="value">The date to which we are being compared.</param>
            <returns>A value indicating if the comparison date is less than, equal to or greater than this date.</returns>
        </member>
        <member name="M:Csla.SmartDate.Add(System.TimeSpan)">
            <summary>
            Adds a TimeSpan onto the object.
            </summary>
            <param name="value">Span to add to the date.</param>
        </member>
        <member name="M:Csla.SmartDate.Subtract(System.TimeSpan)">
            <summary>
            Subtracts a TimeSpan from the object.
            </summary>
            <param name="value">Span to subtract from the date.</param>
        </member>
        <member name="M:Csla.SmartDate.Subtract(System.DateTimeOffset)">
            <summary>
            Subtracts a DateTimeOffset from the object.
            </summary>
            <param name="value">DateTimeOffset to subtract from the date.</param>
            <remarks>
            SmartDate maintains the date value as a DateTime,
            so the provided DateTimeOffset is converted to a
            DateTime for this comparison. You should be aware
            that this can lead to a loss of precision in
            some cases.
            </remarks>
        </member>
        <member name="M:Csla.SmartDate.Subtract(System.DateTime)">
            <summary>
            Subtracts a DateTime from the object.
            </summary>
            <param name="value">Date to subtract from the date.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Equality(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Equality operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Inequality(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Inequality operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Implicit(Csla.SmartDate)~System.String">
            <summary>
            Convert a SmartDate to a String.
            </summary>
            <param name="obj1">SmartDate value.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Implicit(Csla.SmartDate)~System.DateTime">
            <summary>
            Convert a SmartDate to a DateTime.
            </summary>
            <param name="obj1">SmartDate value.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Implicit(Csla.SmartDate)~System.Nullable{System.DateTime}">
            <summary>
            Convert a SmartDate to a nullable DateTime.
            </summary>
            <param name="obj1">SmartDate value.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Implicit(Csla.SmartDate)~System.DateTimeOffset">
            <summary>
            Convert a SmartDate to a DateTimeOffset.
            </summary>
            <param name="obj1">SmartDate value.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Explicit(System.String)~Csla.SmartDate">
            <summary>
            Convert a value to a SmartDate.
            </summary>
            <param name="dateValue">Value to convert.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Implicit(System.DateTime)~Csla.SmartDate">
            <summary>
            Convert a value to a SmartDate.
            </summary>
            <param name="dateValue">Value to convert.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Implicit(System.Nullable{System.DateTime})~Csla.SmartDate">
            <summary>
            Convert a value to a SmartDate.
            </summary>
            <param name="dateValue">Value to convert.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Explicit(System.DateTimeOffset)~Csla.SmartDate">
            <summary>
            Convert a value to a SmartDate.
            </summary>
            <param name="dateValue">Value to convert.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Equality(Csla.SmartDate,System.DateTime)">
            <summary>
            Equality operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Inequality(Csla.SmartDate,System.DateTime)">
            <summary>
            Inequality operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Equality(Csla.SmartDate,System.String)">
            <summary>
            Equality operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Inequality(Csla.SmartDate,System.String)">
            <summary>
            Inequality operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Addition(Csla.SmartDate,System.TimeSpan)">
            <summary>
            Addition operator
            </summary>
            <param name="start">Original date/time</param>
            <param name="span">Span to add</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Subtraction(Csla.SmartDate,System.TimeSpan)">
            <summary>
            Subtraction operator
            </summary>
            <param name="start">Original date/time</param>
            <param name="span">Span to subtract</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Subtraction(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Subtraction operator
            </summary>
            <param name="start">Original date/time</param>
            <param name="finish">Second date/time</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_GreaterThan(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Greater than operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_LessThan(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Less than operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_GreaterThan(Csla.SmartDate,System.DateTime)">
            <summary>
            Greater than operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_LessThan(Csla.SmartDate,System.DateTime)">
            <summary>
            Less than operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_GreaterThan(Csla.SmartDate,System.String)">
            <summary>
            Greater than operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_LessThan(Csla.SmartDate,System.String)">
            <summary>
            Less than operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_GreaterThanOrEqual(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Greater than or equals operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_LessThanOrEqual(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Less than or equals operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_GreaterThanOrEqual(Csla.SmartDate,System.DateTime)">
            <summary>
            Greater than or equals operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_LessThanOrEqual(Csla.SmartDate,System.DateTime)">
            <summary>
            Less than or equals operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_GreaterThanOrEqual(Csla.SmartDate,System.String)">
            <summary>
            Greater than or equals operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_LessThanOrEqual(Csla.SmartDate,System.String)">
            <summary>
            Less than or equals operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="P:Csla.SmartDate.FormatString">
            <summary>
            Gets or sets the format string used to format a date
            value when it is returned as text.
            </summary>
            <remarks>
            The format string should follow the requirements for the
            .NET System.String.Format statement.
            </remarks>
            <value>A format string.</value>
        </member>
        <member name="P:Csla.SmartDate.Text">
            <summary>
            Gets or sets the date value.
            </summary>
            <remarks>
            <para>
            This property can be used to set the date value by passing a
            text representation of the date. Any text date representation
            that can be parsed by the .NET runtime is valid.
            </para><para>
            When the date value is retrieved via this property, the text
            is formatted by using the format specified by the 
            <see cref="P:Csla.SmartDate.FormatString"/> property. The default is the
            short date format (d).
            </para>
            </remarks>
        </member>
        <member name="P:Csla.SmartDate.Date">
            <summary>
            Gets or sets the date value.
            </summary>
        </member>
        <member name="P:Csla.SmartDate.DBValue">
            <summary>
            Gets a database-friendly version of the date value.
            </summary>
            <remarks>
            <para>
            If the SmartDate contains an empty date, this returns <see cref="T:System.DBNull"/>.
            Otherwise the actual date value is returned as type Date.
            </para><para>
            This property is very useful when setting parameter values for
            a Command object, since it automatically stores null values into
            the database for empty date values.
            </para><para>
            When you also use the SafeDataReader and its GetSmartDate method,
            you can easily read a null value from the database back into a
            SmartDate object so it remains considered as an empty date value.
            </para>
            </remarks>
        </member>
        <member name="P:Csla.SmartDate.IsEmpty">
            <summary>
            Gets a value indicating whether this object contains an empty date.
            </summary>
        </member>
        <member name="P:Csla.SmartDate.EmptyIsMin">
            <summary>
            Gets a value indicating whether an empty date is the 
            min or max possible date value.
            </summary>
            <remarks>
            Whether an empty date is considered to be the smallest or largest possible
            date is only important for comparison operations. This allows you to
            compare an empty date with a real date and get a meaningful result.
            </remarks>
        </member>
        <member name="T:Csla.SmartDate.EmptyValue">
            <summary>
            Indicates the empty value of a
            SmartDate.
            </summary>
        </member>
        <member name="F:Csla.SmartDate.EmptyValue.MinDate">
            <summary>
            Indicates that an empty SmartDate
            is the smallest date.
            </summary>
        </member>
        <member name="F:Csla.SmartDate.EmptyValue.MaxDate">
            <summary>
            Indicates that an empty SmartDate
            is the largest date.
            </summary>
        </member>
        <member name="T:Csla.Security.AccessType">
            <summary>
            The access types supported by authorization
            as discussed in Chapter 3.
            </summary>
        </member>
        <member name="F:Csla.Security.AccessType.ReadAllowed">
            <summary>
            Roles allowed to read property.
            </summary>
        </member>
        <member name="F:Csla.Security.AccessType.ReadDenied">
            <summary>
            Roles denied read access to property.
            </summary>
        </member>
        <member name="F:Csla.Security.AccessType.WriteAllowed">
            <summary>
            Roles allowed to set property.
            </summary>
        </member>
        <member name="F:Csla.Security.AccessType.WriteDenied">
            <summary>
            Roles denied write access to property.
            </summary>
        </member>
        <member name="T:Csla.NotUndoableAttribute">
            <summary>
            Marks a field to indicate that the value should not 
            be copied as part of the undo process.
            </summary>
            <remarks>
            Marking a variable with this attribute will cause the n-level
            undo process to ignore that variable's value. The value will
            not be included in a snapshot when BeginEdit is called, nor
            will it be restored when CancelEdit is called.
            </remarks>
        </member>
        <member name="T:Csla.EditableRootListBase`1">
            <summary>
            This is the base class from which collections
            of editable root business objects should be
            derived.
            </summary>
            <typeparam name="T">
            Type of editable root object to contain within
            the collection.
            </typeparam>
            <remarks>
            <para>
            Your subclass should implement a factory method
            and should override or overload
            DataPortal_Fetch() to implement data retrieval.
            </para><para>
            Saving (inserts or updates) of items in the collection
            should be handled through the SaveItem() method on
            the collection. 
            </para><para>
            Removing an item from the collection
            through Remove() or RemoveAt() causes immediate deletion
            of the object, by calling the object's Delete() and
            Save() methods.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.EditableRootListBase`1.SaveItem(`0)">
            <summary>
            Saves the specified item in the list.
            </summary>
            <param name="item">
            Reference to the item to be saved.
            </param>
            <remarks>
            This method properly saves the child item,
            by making sure the item in the collection
            is properly replaced by the result of the
            Save() method call.
            </remarks>
        </member>
        <member name="M:Csla.EditableRootListBase`1.SaveItem(System.Int32)">
            <summary>
            Saves the specified item in the list.
            </summary>
            <param name="index">
            Index of the item to be saved.
            </param>
            <remarks>
            This method properly saves the child item,
            by making sure the item in the collection
            is properly replaced by the result of the
            Save() method call.
            </remarks>
        </member>
        <member name="M:Csla.EditableRootListBase`1.OnSaved(`0,System.Exception)">
            <summary>
            Raises the Saved event.
            </summary>
            <param name="newObject">
            Reference to object returned from the save.
            </param>
            <param name="e">
            Reference to any exception that occurred during
            the save.
            </param>
        </member>
        <member name="M:Csla.EditableRootListBase`1.InsertItem(System.Int32,`0)">
            <summary>
            Gives the new object a parent reference to this
            list.
            </summary>
            <param name="index">Index at which to insert the item.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Csla.EditableRootListBase`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="index">Index of the item
            to be removed.</param>
        </member>
        <member name="M:Csla.EditableRootListBase`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces item in the list.
            </summary>
            <param name="index">Index of the item
            that was replaced.</param>
            <param name="item">New item.</param>
        </member>
        <member name="M:Csla.EditableRootListBase`1.Child_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles any PropertyChanged event from 
            a child object and echoes it up as
            a ChildChanged event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="e">Property changed args.</param>
        </member>
        <member name="M:Csla.EditableRootListBase`1.OnChildPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Override this method to be notified when a child object
            has been changed.
            </summary>
            <param name="sender">
            Child object where the PropertyChanged event originated.
            </param>
            <param name="e">
            PropertyChangedEventArgs from the child object.
            </param>
        </member>
        <member name="M:Csla.EditableRootListBase`1.OnDeserialized">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
        </member>
        <member name="M:Csla.EditableRootListBase`1.DataPortal_Fetch(System.Object)">
            <summary>
            Override this method to allow retrieval of an existing business
            object based on data in the database.
            </summary>
            <param name="criteria">An object containing criteria values to identify the object.</param>
        </member>
        <member name="M:Csla.EditableRootListBase`1.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.EditableRootListBase`1.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.EditableRootListBase`1.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.EditableRootListBase`1.ToArray">
            <summary>
            Get an array containing all items in the list.
            </summary>
        </member>
        <member name="E:Csla.EditableRootListBase`1.Saved">
            <summary>
            Event raised when an object has been saved.
            </summary>
        </member>
        <member name="P:Csla.EditableRootListBase`1.IsBusy">
            <summary>
            Gets a value indicating whether this object
            is currently running an async operation.
            </summary>
        </member>
        <member name="T:Csla.Server.DataPortalException">
            <summary>
            This exception is returned from the 
            server-side DataPortal and contains the exception
            and context data from the server.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalException.#ctor(System.String,System.Exception,Csla.Server.DataPortalResult)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
            <param name="ex">Inner exception.</param>
            <param name="result">The data portal result object.</param>
        </member>
        <member name="M:Csla.Server.DataPortalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the object for serialization.
            </summary>
            <param name="info">Serialiation info object.</param>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="M:Csla.Server.DataPortalException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the object.
            </summary>
            <param name="info">Serialiation info object.</param>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="P:Csla.Server.DataPortalException.Result">
            <summary>
            Returns the DataPortalResult object from the server.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalException.StackTrace">
            <summary>
            Get the server-side stack trace from the
            original exception.
            </summary>
        </member>
        <member name="T:Csla.DataPortalClient.WcfProxy">
            <summary>
            Implements a data portal proxy to relay data portal
            calls to a remote application server by using WCF.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.GetChannelFactory">
            <summary>
            Returns an instance of the channel factory
            used by GetProxy() to create the WCF proxy
            object.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.GetProxy(System.ServiceModel.ChannelFactory{Csla.Server.Hosts.IWcfPortal})">
            <summary>
            Returns the WCF proxy object used for
            communication with the data portal
            server.
            </summary>
            <param name="cf">
            The ChannelFactory created by GetChannelFactory().
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to create a
            new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to load an
            existing business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to update a
            business object.
            </summary>
            <param name="obj">The business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to delete a
            business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="P:Csla.DataPortalClient.WcfProxy.IsServerRemote">
            <summary>
            Gets a value indicating whether the data portal
            is hosted on a remote server.
            </summary>
        </member>
        <member name="P:Csla.DataPortalClient.WcfProxy.EndPoint">
            <summary>
            Gets or sets the WCF endpoint used
            to contact the server.
            </summary>
            <remarks>
            The default value is WcfDataPortal.
            </remarks>
        </member>
        <member name="T:Csla.Core.UndoException">
            <summary>
            Exception indicating a problem with the
            use of the n-level undo feature in
            CSLA .NET.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Core.UndoException.#ctor(System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
        </member>
        <member name="M:Csla.Core.UndoException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="M:Csla.Core.UndoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the object for serialization.
            </summary>
            <param name="info">Serialiation info object.</param>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="M:Csla.Core.UndoException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the object.
            </summary>
            <param name="info">Serialiation info object.</param>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.WcfResponse">
            <summary>
            Response message returned from the 
            Silverlight WCF data portal methods.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.WcfResponse.ObjectData">
            <summary>
            Serialized object data.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.WcfResponse.ErrorData">
            <summary>
            Serialized error/exception data.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.WcfResponse.GlobalContext">
            <summary>
            Serialized global context data.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.WcfErrorInfo">
            <summary>
            Message containing details about any
            server-side exception.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.WcfErrorInfo.#ctor(System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="ex">
            The Exception to encapusulate.
            </param>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.WcfErrorInfo.ExceptionTypeName">
            <summary>
            Type name of the exception object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.WcfErrorInfo.Message">
            <summary>
            Message from the exception object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.WcfErrorInfo.StackTrace">
            <summary>
            Stack trace from the exception object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.WcfErrorInfo.Source">
            <summary>
            Source of the exception object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.WcfErrorInfo.TargetSiteName">
            <summary>
            Target site name from the exception object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.WcfErrorInfo.InnerError">
            <summary>
            WcfErrorInfo object containing information
            about any inner exception of the original
            exception.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.MobileFactoryLoader">
            <summary>
            Class containing the default implementation for
            the FactoryLoader delegate used by the
            Silverlight data portal host.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.MobileFactoryLoader.GetFactory(System.String)">
            <summary>
            Creates an instance of a mobile factory
            object for use by the data portal.
            </summary>
            <param name="factoryName">
            Type assembly qualified type name for the 
            mobile factory class as
            provided from the MobileFactory attribute
            on the business object.
            </param>
            <returns>
            An instance of the type specified by the
            type name parameter.
            </returns>
        </member>
        <member name="T:Csla.C5.LinkedList`1">
            <summary>
            A list collection class based on a doubly linked list data structure.
            </summary>
        </member>
        <member name="F:Csla.C5.LinkedList`1.fIFO">
            <summary>
            IExtensible.Add(T) always does AddLast(T), fIFO determines 
            if T Remove() does RemoveFirst() or RemoveLast()
            </summary>
        </member>
        <member name="F:Csla.C5.LinkedList`1.startsentinel">
            <summary>
            Node to the left of first node 
            </summary>
        </member>
        <member name="F:Csla.C5.LinkedList`1.endsentinel">
            <summary>
            Node to the right of last node
            </summary>
        </member>
        <member name="F:Csla.C5.LinkedList`1.offset">
            <summary>
            Offset of this view in underlying list
            </summary>
        </member>
        <member name="F:Csla.C5.LinkedList`1.underlying">
            <summary>
            underlying list of this view (or null for the underlying list)
            </summary>
        </member>
        <member name="F:Csla.C5.LinkedList`1.isValid">
            <summary>
            Has this list or view not been invalidated by some operation (by someone calling Dispose())
            </summary>
        </member>
        <member name="M:Csla.C5.LinkedList`1.updatecheck">
            <summary>
            Check if it is valid to perform updates and increment stamp of 
            underlying if this is a view.
            <para>This method should be called in every public modifying 
            methods before any modifications are performed.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException"> if check fails.</exception>
        </member>
        <member name="M:Csla.C5.LinkedList`1.validitycheck">
            <summary>
            Check if we are a view that the underlyinglist has only been updated through us.
            <br/>
            This method should be called from enumerators etc to guard against 
            modification of the base collection.
            </summary>
            <exception cref="T:System.InvalidOperationException"> if check fails.</exception>
        </member>
        <member name="M:Csla.C5.LinkedList`1.modifycheck(System.Int32)">
            <summary>
            Check that the list has not been updated since a particular time.
            </summary>
            <param name="stamp">The stamp indicating the time.</param>
            <exception cref="T:Csla.C5.CollectionModifiedException"> if check fails.</exception>
        </member>
        <member name="M:Csla.C5.LinkedList`1.find(`0,Csla.C5.LinkedList{`0}.Node@,System.Int32@)">
            <summary>
            Search forwards from a node for a node with a particular item.
            </summary>
            <param name="item">The item to look for</param>
            <param name="node">On input, the node to start at. If item was found, the node found on output.</param>
            <param name="index">If node was found, the value will be the number of links followed higher than 
            the value on input. If item was not found, the value on output is undefined.</param>
            <returns>True if node was found.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.get(System.Int32)">
            <summary>
            Return the node at position pos
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.dist(System.Int32,System.Int32@,System.Int32[])">
            <summary>
            Find the distance from pos to the set given by positions. Return the
            signed distance as return value and as an out parameter, the
            array index of the nearest position. This is used for up to length 5 of
            positions, and we do not assume it is sorted. 
            </summary>
            <param name="pos"></param>
            <param name="positions"></param>
            <param name="nearest"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.get(System.Int32,System.Int32[],Csla.C5.LinkedList{`0}.Node[])">
            <summary>
            Find the node at position pos, given known positions of several nodes.
            </summary>
            <param name="pos"></param>
            <param name="positions"></param>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.getPair(System.Int32,System.Int32,Csla.C5.LinkedList{`0}.Node@,Csla.C5.LinkedList{`0}.Node@,System.Int32[],Csla.C5.LinkedList{`0}.Node[])">
            <summary>
            Get nodes at positions p1 and p2, given nodes at several positions.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="n1"></param>
            <param name="n2"></param>
            <param name="positions"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.insert(System.Int32,Csla.C5.LinkedList{`0}.Node,`0)">
            <summary>
            
            </summary>
            <param name="index">The index in this view</param>
            <param name="succ"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.fixViewsAfterInsert(Csla.C5.LinkedList{`0}.Node,Csla.C5.LinkedList{`0}.Node,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="added">The actual number of inserted nodes</param>
            <param name="pred">The predecessor of the inserted nodes</param>
            <param name="succ">The successor of the added nodes</param>
            <param name="realInsertionIndex"></param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.viewPosition(Csla.C5.LinkedList{`0})">
            <summary>
            
            </summary>
            <param name="otherView"></param>
            <returns>The position of View(otherOffset, otherSize) wrt. this view</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a linked list with en external item equalityComparer
            </summary>
            <param name="itemequalityComparer">The external equalityComparer</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.#ctor">
            <summary>
            Create a linked list with the natural item equalityComparer
            </summary>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Dispose">
            <summary>
            Invalidate this list. If a view, just invalidate the view. 
            If not a view, invalidate the list and all views on it.
            </summary>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Insert(System.Int32,`0)">
            <summary>
            Insert an item at a specific index location in this list. 
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt; the size of the collection.</summary>
            <param name="i">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Insert(Csla.C5.IList{`0},`0)">
            <summary>
            Insert an item at the end of a compatible view, used as a pointer.
            <para>The <code>pointer</code> must be a view on the same list as
            <code>this</code> and the endpoitn of <code>pointer</code> must be
            a valid insertion point of <code>this</code></para>
            </summary>
            <exception cref="T:Csla.C5.IncompatibleViewException">If <code>pointer</code> 
            is not a view on the same list as <code>this</code></exception>
            <exception cref="T:System.IndexOutOfRangeException"><b>??????</b> if the endpoint of 
             <code>pointer</code> is not inside <code>this</code></exception>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> if the list has
            <code>AllowsDuplicates==false</code> and the item is 
            already in the list.</exception>
            <param name="pointer"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.InsertAll``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insert into this list all items from an enumerable collection starting 
            at a particular index.
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt; the size of the collection.
            </summary>
            <param name="i">Index to start inserting at</param>
            <param name="items">Items to insert</param>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Csla.C5.LinkedList`1.InsertFirst(`0)">
            <summary>
            Insert an item at the front of this list.
            </summary>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.InsertLast(`0)">
            <summary>
            Insert an item at the back of this list.
            </summary>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Map``1(Csla.C5.Fun{`0,``0})">
            <summary>
            Create a new list consisting of the results of mapping all items of this
            list.
            </summary>
            <param name="mapper">The delegate defining the map.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Map``1(Csla.C5.Fun{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create a new list consisting of the results of mapping all items of this
            list. The new list will use a specified equalityComparer for the item type.
            </summary>
            <typeparam name="V">The type of items of the new list</typeparam>
            <param name="mapper">The delegate defining the map.</param>
            <param name="equalityComparer">The equalityComparer to use for the new list</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Remove">
            <summary>
            Remove one item from the list: from the front if <code>FIFO</code>
            is true, else from the back.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if this list is empty.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.RemoveFirst">
            <summary>
            Remove one item from the front of the list.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if this list is empty.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.RemoveLast">
            <summary>
            Remove one item from the back of the list.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if this list is empty.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.View(System.Int32,System.Int32)">
            <summary>
            Create a list view on this list. 
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the start or count is negative</exception>
            <exception cref="T:System.ArgumentException"> if the range does not fit within list.</exception>
            <param name="start">The index in this list of the start of the view.</param>
            <param name="count">The size of the view.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.ViewOf(`0)">
            <summary>
            Create a list view on this list containing the (first) occurrence of a particular item. 
            </summary>
            <exception cref="T:System.ArgumentException"> if the item is not in this list.</exception>
            <param name="item">The item to find.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.LastViewOf(`0)">
            <summary>
            Create a list view on this list containing the last occurrence of a particular item. 
            <exception cref="T:System.ArgumentException"/> if the item is not in this list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Slide(System.Int32)">
            <summary>
            Slide this list view along the underlying list.
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the operation
            would bring either end of the view outside the underlying list.</exception>
            <param name="offset">The signed amount to slide: positive to slide
            towards the end.</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Slide(System.Int32,System.Int32)">
            <summary>
            Slide this list view along the underlying list, perhaps changing its size.
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the operation
            would bring either end of the view outside the underlying list.</exception>
            <param name="offset">The signed amount to slide: positive to slide
            towards the end.</param>
            <param name="size">The new size of the view.</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.TrySlide(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.TrySlide(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Span(Csla.C5.IList{`0})">
            <summary>
            
            <para>Returns null if <code>otherView</code> is strictly to the left of this view</para>
            </summary>
            <param name="otherView"></param>
            <exception cref="T:Csla.C5.IncompatibleViewException">If otherView does not have the same underlying list as this</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Reverse">
            <summary>
            Reverse the list so the items are in the opposite sequence order.
            </summary>
        </member>
        <member name="M:Csla.C5.LinkedList`1.IsSorted">
            <summary>
            Check if this list is sorted according to the default sorting order
            for the item type T, as defined by the <see cref="T:C5.Comparer`1"/> class 
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">if T is not comparable</exception>
            <returns>True if the list is sorted, else false.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.IsSorted(System.Collections.Generic.IComparer{`0})">
            <summary>
            Check if this list is sorted according to a specific sorting order.
            </summary>
            <param name="c">The comparer defining the sorting order.</param>
            <returns>True if the list is sorted, else false.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Sort">
            <summary>
            Sort the items of the list according to the default sorting order
            for the item type T, as defined by the Comparer[T] class. 
            (<see cref="T:C5.Comparer`1"/>).
            The sorting is stable.
            </summary>
            <exception cref="T:System.InvalidOperationException">if T is not comparable</exception>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort the items of the list according to a specific sorting order.
            The sorting is stable.
            </summary>
            <param name="c">The comparer defining the sorting order.</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Shuffle">
            <summary>
            Randomly shuffle the items of this list. 
            <para>Will invalidate overlapping views???</para>
            </summary>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Shuffle(System.Random)">
            <summary>
            Shuffle the items of this list according to a specific random source.
            <para>Will invalidate overlapping views???</para>
            </summary>
            <param name="rnd">The random source.</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.IndexOf(`0)">
            <summary>
            Searches for an item in the list going forwrds from the start.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of item from start.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.LastIndexOf(`0)">
            <summary>
            Searches for an item in the list going backwords from the end.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of of item from the end.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at a specific position of the list.
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt;= the size of the collection.
            </summary>
            <param name="i">The index of the item to remove.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.RemoveInterval(System.Int32,System.Int32)">
            <summary>
            Remove all items in an index interval.
            <exception cref="T:System.IndexOutOfRangeException"/>???. 
            </summary>
            <param name="start">The index of the first item to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.GetSequencedHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.SequencedEquals(Csla.C5.ISequenced{`0})">
            <summary>
            
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Backwards">
            <summary>
            Create a collection containing the same items as this collection, but
            whose enumerator will enumerate the items backwards. The new collection
            will become invalid if the original is modified. Method typicaly used as in
            <code>foreach (T x in coll.Backwards()) {...}</code>
            </summary>
            <returns>The backwards collection.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.GetUnsequencedHashCode">
            <summary>
            Performs a check for view validity before calling base.GetUnsequencedHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.UnsequencedEquals(Csla.C5.ICollection{`0})">
            <summary>
            
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Contains(`0)">
            <summary>
            Check if this collection contains (an item equivalent to according to the
            itemequalityComparer) a particular value.
            </summary>
            <param name="item">The value to check for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Find(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Update(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value. Will update a single item.
            </summary>
            <param name="item">Value to update.</param>
            <returns>True if the item was found and hence updated.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Update(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.FindOrAdd(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found. Else, add the item to the collection.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the item was found (hence not added).</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.UpdateOrAdd(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value; else add the value to the collection. 
            </summary>
            <param name="item">Value to add or update.</param>
            <returns>True if the item was found and updated (hence not added).</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.UpdateOrAdd(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Remove(`0)">
            <summary>
            Remove a particular item from this collection. Since the collection has bag
            semantics only one copy equivalent to the supplied item is removed. 
            </summary>
            <param name="item">The value to remove.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Remove(`0,`0@)">
            <summary>
            Remove a particular item from this collection if found (only one copy). 
            If an item was removed, report a binary copy of the actual item removed in 
            the argument.
            </summary>
            <param name="item">The value to remove on input.</param>
            <param name="removeditem">The value removed.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.RemoveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items in another collection from this one, taking multiplicities into account.
            <para>Always removes from the front of the list.
            </para>
            <para>The asymptotic running time complexity of this method is <code>O(n+m+v*log(v))</code>, 
            where <code>n</code> is the size of this list, <code>m</code> is the size of the
            <code>items</code> collection and <code>v</code> is the number of views. 
            The method will temporarily allocate memory of size <code>O(m+v)</code>.
            </para>
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to remove.</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.RemoveAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Clear">
            <summary>
            Remove all items from this collection.
            </summary>
        </member>
        <member name="M:Csla.C5.LinkedList`1.RetainAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items not in some other collection from this one, taking multiplicities into account.
            <para>The asymptotic running time complexity of this method is <code>O(n+m+v*log(v))</code>, 
            where <code>n</code> is the size of this collection, <code>m</code> is the size of the
            <code>items</code> collection and <code>v</code> is the number of views. 
            The method will temporarily allocate memory of size <code>O(m+v)</code>. The stated complexitiy 
            holds under the assumption that the itemequalityComparer of this list is well-behaved.
            </para>
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to retain.</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.RetainAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if this collection contains all the values in another collection
            with respect to multiplicities.
            </summary>
            <param name="items">The </param>
            <typeparam name="U"></typeparam>
            <returns>True if all values in <code>items</code>is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.FindAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create a new list consisting of the items of this list satisfying a 
            certain predicate.
            </summary>
            <param name="filter">The filter delegate defining the predicate.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.ContainsCount(`0)">
            <summary>
            Count the number of items of the collection equal to a particular value.
            Returns 0 if and only if the value is not in the collection.
            </summary>
            <param name="item">The value to count.</param>
            <returns>The number of copies found.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.RemoveAllCopies(`0)">
            <summary>
            Remove all items equivalent to a given value.
            <para>The asymptotic complexity of this method is <code>O(n+v*log(v))</code>, 
            where <code>n</code> is the size of the collection and <code>v</code> 
            is the number of views.
            </para>
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Choose">
            <summary>
            Choose some item of this collection. 
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException">if collection is empty.</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Filter(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create an enumerable, enumerating the items of this collection that satisfies 
            a certain condition.
            </summary>
            <param name="filter">The T->bool filter delegate defining the condition</param>
            <returns>The filtered enumerable</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.GetEnumerator">
            <summary>
            Create an enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Add(`0)">
            <summary>
            Add an item to this collection if possible. 
            </summary>
            <param name="item">The item to add.</param>
            <returns>True.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add the elements from another collection with a more specialized item type 
            to this collection. 
            </summary>
            <typeparam name="U">The type of items to add</typeparam>
            <param name="items">The items to add</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Push(`0)">
            <summary>
            Push an item to the top of the stack.
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Pop">
            <summary>
            Pop the item at the top of the stack from the stack.
            </summary>
            <returns>The popped item.</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Enqueue(`0)">
            <summary>
            Enqueue an item at the back of the queue. 
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Dequeue">
            <summary>
            Dequeue an item from the front of the queue.
            </summary>
            <returns>The item</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Check">
            <summary>
            Check the sanity of this list
            </summary>
            <returns>true if sane</returns>
        </member>
        <member name="M:Csla.C5.LinkedList`1.Clone">
            <summary>
            Make a shallow copy of this LinkedList.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.LinkedList`1.ListenableEvents">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.LinkedList`1.First">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <value>The first item in this list.</value>
        </member>
        <member name="P:Csla.C5.LinkedList`1.Last">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <value>The last item in this list.</value>
        </member>
        <member name="P:Csla.C5.LinkedList`1.FIFO">
            <summary>
            Since <code>Add(T item)</code> always add at the end of the list,
            this describes if list has FIFO or LIFO semantics.
            </summary>
            <value>True if the <code>Remove()</code> operation removes from the
            start of the list, false if it removes from the end. THe default for a new linked list is true.</value>
        </member>
        <member name="P:Csla.C5.LinkedList`1.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.LinkedList`1.Item(System.Int32)">
            <summary>
            On this list, this indexer is read/write.
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt;= the size of the collection.
            </summary>
            <value>The i'th item of this list.</value>
            <param name="index">The index of the item to fetch or store.</param>
        </member>
        <member name="P:Csla.C5.LinkedList`1.IndexingSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.LinkedList`1.Underlying">
            <summary>
            Null if this list is not a view.
            </summary>
            <value>Underlying list for view.</value>
        </member>
        <member name="P:Csla.C5.LinkedList`1.IsValid">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.LinkedList`1.Offset">
            <summary>
            </summary>
            <value>Offset for this list view or 0 for a underlying list.</value>
        </member>
        <member name="P:Csla.C5.LinkedList`1.Item(System.Int32,System.Int32)">
            <summary>
            <exception cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <value>The directed collection of items in a specific index interval.</value>
            <param name="start">The low index of the interval (inclusive).</param>
            <param name="count">The size of the range.</param>
        </member>
        <member name="P:Csla.C5.LinkedList`1.ContainsSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant).
            </summary>
            <value>Speed.Linear</value>
        </member>
        <member name="P:Csla.C5.LinkedList`1.Count">
            <summary>
            
            </summary>
            <value>The number of items in this collection</value>
        </member>
        <member name="P:Csla.C5.LinkedList`1.AllowsDuplicates">
            <summary>
            
            </summary>
            <value>True since this collection has bag semantics.</value>
        </member>
        <member name="P:Csla.C5.LinkedList`1.DuplicatesByCounting">
            <summary>
            By convention this is true for any collection with set semantics.
            </summary>
            <value>True if only one representative of a group of equal items 
            is kept in the collection together with the total count.</value>
        </member>
        <member name="T:Csla.C5.LinkedList`1.Node">
            <summary>
            An individual cell in the linked list
            </summary>
        </member>
        <member name="T:Csla.C5.LinkedList`1.Position">
            <summary>
            During RemoveAll, we need to cache the original endpoint indices of views
            </summary>
        </member>
        <member name="T:Csla.C5.LinkedList`1.ViewHandler">
            <summary>
            Handle the update of (other) views during a multi-remove operation.
            </summary>
        </member>
        <member name="M:Csla.C5.LinkedList`1.ViewHandler.skipEndpoints(System.Int32,System.Int32)">
            <summary>
            This is to be called with realindex pointing to the first node to be removed after a (stretch of) node that was not removed
            </summary>
            <param name="removed"></param>
            <param name="realindex"></param>
        </member>
        <member name="T:Csla.C5.IntervalHeap`1">
            <summary>
            A priority queue class based on an interval heap data structure.
            </summary>
            <typeparam name="T">The item type</typeparam>
        </member>
        <member name="T:Csla.C5.IPriorityQueue`1">
            <summary>
            A generic collection of items prioritized by a comparison (order) relation.
            Supports adding items and reporting or removing extremal elements. 
            <para>
            
            </para>
            When adding an item, the user may choose to have a handle allocated for this item in the queue. 
            The resulting handle may be used for deleting the item even if not extremal, and for replacing the item.
            A priority queue typically only holds numeric priorities associated with some objects
            maintained separately in other collection objects.
            </summary>
        </member>
        <member name="M:Csla.C5.IPriorityQueue`1.FindMin">
            <summary>
            Find the current least item of this priority queue.
            </summary>
            <returns>The least item.</returns>
        </member>
        <member name="M:Csla.C5.IPriorityQueue`1.DeleteMin">
            <summary>
            Remove the least item from this  priority queue.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.IPriorityQueue`1.FindMax">
            <summary>
            Find the current largest item of this priority queue.
            </summary>
            <returns>The largest item.</returns>
        </member>
        <member name="M:Csla.C5.IPriorityQueue`1.DeleteMax">
            <summary>
            Remove the largest item from this priority queue.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.IPriorityQueue`1.Find(Csla.C5.IPriorityQueueHandle{`0},`0@)">
            <summary>
            Check if the entry corresponding to a handle is in the priority queue.
            </summary>
            <param name="handle"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.IPriorityQueue`1.Add(Csla.C5.IPriorityQueueHandle{`0}@,`0)">
            <summary>
            Add an item to the priority queue, receiving a 
            handle for the item in the queue, 
            or reusing an existing unused handle.
            </summary>
            <param name="handle">On output: a handle for the added item. 
            On input: null for allocating a new handle, or a currently unused handle for reuse. 
            A handle for reuse must be compatible with this priority queue, 
            by being created by a priority queue of the same runtime type, but not 
            necessarily the same priority queue object.</param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.IPriorityQueue`1.Delete(Csla.C5.IPriorityQueueHandle{`0})">
            <summary>
            Delete an item with a handle from a priority queue
            </summary>
            <param name="handle">The handle for the item. The handle will be invalidated, but reusable.</param>
            <returns>The deleted item</returns>
        </member>
        <member name="M:Csla.C5.IPriorityQueue`1.Replace(Csla.C5.IPriorityQueueHandle{`0},`0)">
            <summary>
            Replace an item with a handle in a priority queue with a new item. 
            Typically used for changing the priority of some queued object.
            </summary>
            <param name="handle">The handle for the old item</param>
            <param name="item">The new item</param>
            <returns>The old item</returns>
        </member>
        <member name="M:Csla.C5.IPriorityQueue`1.FindMin(Csla.C5.IPriorityQueueHandle{`0}@)">
            <summary>
            Find the current least item of this priority queue.
            </summary>
            <param name="handle">On return: the handle of the item.</param>
            <returns>The least item.</returns>
        </member>
        <member name="M:Csla.C5.IPriorityQueue`1.FindMax(Csla.C5.IPriorityQueueHandle{`0}@)">
            <summary>
            Find the current largest item of this priority queue.
            </summary>
            <param name="handle">On return: the handle of the item.</param>
            <returns>The largest item.</returns>
        </member>
        <member name="M:Csla.C5.IPriorityQueue`1.DeleteMin(Csla.C5.IPriorityQueueHandle{`0}@)">
            <summary>
            Remove the least item from this  priority queue.
            </summary>
            <param name="handle">On return: the handle of the removed item.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.IPriorityQueue`1.DeleteMax(Csla.C5.IPriorityQueueHandle{`0}@)">
            <summary>
            Remove the largest item from this  priority queue.
            </summary>
            <param name="handle">On return: the handle of the removed item.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="P:Csla.C5.IPriorityQueue`1.Comparer">
            <summary>
            The comparer object supplied at creation time for this collection
            </summary>
            <value>The comparer</value>
        </member>
        <member name="P:Csla.C5.IPriorityQueue`1.Item(Csla.C5.IPriorityQueueHandle{`0})">
            <summary>
            Get or set the item corresponding to a handle. Throws exceptions on 
            invalid handles.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.#ctor">
            <summary>
            Create an interval heap with natural item comparer and default initial capacity (16)
            </summary>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Create an interval heap with external item comparer and default initial capacity (16)
            </summary>
            <param name="comparer">The external comparer</param>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.#ctor(System.Int32)">
            <summary>
            Create an interval heap with natural item comparer and prescribed initial capacity
            </summary>
            <param name="capacity">The initial capacity</param>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Create an interval heap with external item comparer and prescribed initial capacity
            </summary>
            <param name="comparer">The external comparer</param>
            <param name="capacity">The initial capacity</param>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.FindMin">
            <summary>
            Find the current least item of this priority queue.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if queue is empty
            </summary>
            <returns>The least item.</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.DeleteMin">
            <summary>
            Remove the least item from this  priority queue.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if queue is empty
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.FindMax">
            <summary>
            Find the current largest item of this priority queue.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if queue is empty
            </summary>
            <returns>The largest item.</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.DeleteMax">
            <summary>
            Remove the largest item from this  priority queue.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if queue is empty
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.Add(`0)">
            <summary>
            Add an item to this priority queue.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add the elements from another collection with a more specialized item type 
            to this collection. 
            </summary>
            <typeparam name="U">The type of items to add</typeparam>
            <param name="items">The items to add</param>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.Choose">
            <summary>
            Choose some item of this collection. 
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException">if collection is empty.</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.GetEnumerator">
            <summary>
            Create an enumerator for the collection
            <para>Note: the enumerator does *not* enumerate the items in sorted order, 
            but in the internal table order.</para>
            </summary>
            <returns>The enumerator(SIC)</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.Check">
            <summary>
            Check the integrity of the internal data structures of this collection.
            Only avaliable in DEBUG builds???
            </summary>
            <returns>True if check does not fail.</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.Find(Csla.C5.IPriorityQueueHandle{`0},`0@)">
            <summary>
            Check safely if a handle is valid for this queue and if so, report the corresponding queue item.
            </summary>
            <param name="handle">The handle to check</param>
            <param name="item">If the handle is valid this will contain the corresponding item on output.</param>
            <returns>True if the handle is valid.</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.Add(Csla.C5.IPriorityQueueHandle{`0}@,`0)">
            <summary>
            Add an item to the priority queue, receiving a 
            handle for the item in the queue, 
            or reusing an already existing handle.
            </summary>
            <param name="handle">On output: a handle for the added item. 
            On input: null for allocating a new handle, an invalid handle for reuse. 
            A handle for reuse must be compatible with this priority queue, 
            by being created by a priority queue of the same runtime type, but not 
            necessarily the same priority queue object.</param>
            <param name="item">The item to add.</param>
            <returns>True since item will always be added unless the call throws an exception.</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.Delete(Csla.C5.IPriorityQueueHandle{`0})">
            <summary>
            Delete an item with a handle from a priority queue.
            </summary>
            <exception cref="T:Csla.C5.InvalidPriorityQueueHandleException">if the handle is invalid</exception>
            <param name="handle">The handle for the item. The handle will be invalidated, but reusable.</param>
            <returns>The deleted item</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.Replace(Csla.C5.IPriorityQueueHandle{`0},`0)">
            <summary>
            Replace an item with a handle in a priority queue with a new item. 
            Typically used for changing the priority of some queued object.
            </summary>
            <param name="handle">The handle for the old item</param>
            <param name="item">The new item</param>
            <returns>The old item</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.FindMin(Csla.C5.IPriorityQueueHandle{`0}@)">
            <summary>
            Find the current least item of this priority queue.
            </summary>
            <param name="handle">On return: the handle of the item.</param>
            <returns>The least item.</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.FindMax(Csla.C5.IPriorityQueueHandle{`0}@)">
            <summary>
            Find the current largest item of this priority queue.
            </summary>
            <param name="handle">On return: the handle of the item.</param>
            <returns>The largest item.</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.DeleteMin(Csla.C5.IPriorityQueueHandle{`0}@)">
            <summary>
            Remove the least item from this priority queue.
            </summary>
            <param name="handle">On return: the handle of the removed item.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.DeleteMax(Csla.C5.IPriorityQueueHandle{`0}@)">
            <summary>
            Remove the largest item from this priority queue.
            </summary>
            <param name="handle">On return: the handle of the removed item.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.IntervalHeap`1.Clone">
            <summary>
            Make a shallow copy of this IntervalHeap.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.IntervalHeap`1.ListenableEvents">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.IntervalHeap`1.Comparer">
            <summary>
            The comparer object supplied at creation time for this collection
            </summary>
            <value>The comparer</value>
        </member>
        <member name="P:Csla.C5.IntervalHeap`1.IsReadOnly">
            <summary>
            If true any call of an updating operation will throw an
            <code>ReadOnlyCollectionException</code>
            </summary>
            <value>True if this collection is read-only.</value>
        </member>
        <member name="P:Csla.C5.IntervalHeap`1.AllowsDuplicates">
            <summary>
            
            </summary>
            <value>True since this collection has bag semantics</value>
        </member>
        <member name="P:Csla.C5.IntervalHeap`1.EqualityComparer">
            <summary>
            Value is null since this collection has no equality concept for its items. 
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.IntervalHeap`1.DuplicatesByCounting">
            <summary>
            By convention this is true for any collection with set semantics.
            </summary>
            <value>True if only one representative of a group of equal items 
            is kept in the collection together with the total count.</value>
        </member>
        <member name="P:Csla.C5.IntervalHeap`1.IsEmpty">
            <summary>
            
            </summary>
            <value>True if this collection is empty.</value>
        </member>
        <member name="P:Csla.C5.IntervalHeap`1.Count">
            <summary>
            
            </summary>
            <value>The size of this collection</value>
        </member>
        <member name="P:Csla.C5.IntervalHeap`1.CountSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant).
            </summary>
            <value>A characterization of the speed of the 
            <code>Count</code> property in this collection.</value>
        </member>
        <member name="P:Csla.C5.IntervalHeap`1.Item(Csla.C5.IPriorityQueueHandle{`0})">
            <summary>
            Get or set the item corresponding to a handle. 
            </summary>
            <exception cref="T:Csla.C5.InvalidPriorityQueueHandleException">if the handle is invalid for this queue</exception>
            <param name="handle">The reference into the heap</param>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.IPriorityQueueHandle`1">
            <summary>
            The base type of a priority queue handle
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Csla.C5.IntervalHeap`1.Handle.index">
            <summary>
            To save space, the index is 2*cell for heap[cell].first, and 2*cell+1 for heap[cell].last
            </summary>
        </member>
        <member name="T:Csla.C5.Showing">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.Showing.Show(System.Object,System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            Show  <code>Object obj</code> by appending it to <code>stringbuilder</code>
            </summary>
            <param name="obj"></param>
            <param name="stringbuilder"></param>
            <param name="rest"></param>
            <param name="formatProvider"></param>
            <returns>True if <code>obj</code> was shown completely.</returns>
        </member>
        <member name="M:Csla.C5.Showing.ShowString(Csla.C5.IShowable,System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="showable"></param>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Showing.maxLength(System.String)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Showing.ShowCollectionValue``1(Csla.C5.ICollectionValue{``0},System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="stringbuilder"></param>
            <param name="rest"></param>
            <param name="formatProvider"></param>
            <returns>True if collection was shown completely</returns>
        </member>
        <member name="M:Csla.C5.Showing.ShowDictionary``2(Csla.C5.IDictionary{``0,``1},System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            
            <param name="dictionary"></param>
            <param name="stringbuilder"></param>
            <param name="formatProvider"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.EventTypeEnum">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.EventTypeEnum.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.EventTypeEnum.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.EventTypeEnum.Cleared">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.EventTypeEnum.Added">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.EventTypeEnum.Removed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.EventTypeEnum.Basic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.EventTypeEnum.Inserted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.EventTypeEnum.RemovedAt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.EventTypeEnum.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:Csla.C5.EventBlock`1">
            <summary>
            Holds the real events for a collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Csla.C5.ProxyEventBlock`1">
            <summary>
            Tentative, to conserve memory in GuardedCollectionValueBase
            This should really be nested in Guarded collection value, only have a guardereal field
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Csla.C5.ItemAtEventArgs`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Csla.C5.ItemAtEventArgs`1.Item">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.ItemAtEventArgs`1.Index">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.ItemAtEventArgs`1.#ctor(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="index"></param>
        </member>
        <member name="M:Csla.C5.ItemAtEventArgs`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.ItemCountEventArgs`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Csla.C5.ItemCountEventArgs`1.Item">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.ItemCountEventArgs`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.ItemCountEventArgs`1.#ctor(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.ItemCountEventArgs`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.ClearedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.ClearedEventArgs.Full">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.ClearedEventArgs.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.ClearedEventArgs.#ctor(System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            
            <param name="full">True if the operation cleared all of the collection</param>
            <param name="count">The number of items removed by the clear.</param>
        </member>
        <member name="M:Csla.C5.ClearedEventArgs.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.ClearedRangeEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.ClearedRangeEventArgs.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.ClearedRangeEventArgs.#ctor(System.Boolean,System.Int32,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="full"></param>
            <param name="count"></param>
            <param name="start"></param>
        </member>
        <member name="M:Csla.C5.ClearedRangeEventArgs.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.CollectionChangedHandler`1">
            <summary>
            The type of event raised after an operation on a collection has changed its contents.
            Normally, a multioperation like AddAll, 
            <see cref="M:C5.IExtensible`1.AddAll(System.Collections.Generic.IEnumerable{`0})"/> 
            will only fire one CollectionChanged event. Any operation that changes the collection
            must fire CollectionChanged as its last event.
            </summary>
        </member>
        <member name="T:Csla.C5.CollectionClearedHandler`1">
            <summary>
            The type of event raised after the Clear() operation on a collection.
            <para/>
            Note: The Clear() operation will not fire ItemsRemoved events. 
            </summary>
            <param name="sender"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="T:Csla.C5.ItemsAddedHandler`1">
            <summary>
            The type of event raised after an item has been added to a collection.
            The event will be raised at a point of time, where the collection object is 
            in an internally consistent state and before the corresponding CollectionChanged 
            event is raised.
            <para/>
            Note: an Update operation will fire an ItemsRemoved and an ItemsAdded event.
            <para/>
            Note: When an item is inserted into a list (<see cref="T:C5.IList`1"/>), both
            ItemInserted and ItemsAdded events will be fired.
            </summary>
            <param name="sender"></param>
            <param name="eventArgs">An object with the item that was added</param>
        </member>
        <member name="T:Csla.C5.ItemsRemovedHandler`1">
            <summary>
            The type of event raised after an item has been removed from a collection.
            The event will be raised at a point of time, where the collection object is 
            in an internally consistent state and before the corresponding CollectionChanged 
            event is raised.
            <para/>
            Note: The Clear() operation will not fire ItemsRemoved events. 
            <para/>
            Note: an Update operation will fire an ItemsRemoved and an ItemsAdded event.
            <para/>
            Note: When an item is removed from a list by the RemoveAt operation, both an 
            ItemsRemoved and an ItemRemovedAt event will be fired.
            </summary>
            <param name="sender"></param>
            <param name="eventArgs">An object with the item that was removed</param>
        </member>
        <member name="T:Csla.C5.ItemInsertedHandler`1">
            <summary>
            The type of event raised after an item has been inserted into a list by an Insert, 
            InsertFirst or InsertLast operation.
            The event will be raised at a point of time, where the collection object is 
            in an internally consistent state and before the corresponding CollectionChanged 
            event is raised.
            <para/>
            Note: an ItemsAdded event will also be fired.
            </summary>
            <param name="sender"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="T:Csla.C5.ItemRemovedAtHandler`1">
            <summary>
            The type of event raised after an item has been removed from a list by a RemoveAt(int i)
            operation (or RemoveFirst(), RemoveLast(), Remove() operation).
            The event will be raised at a point of time, where the collection object is 
            in an internally consistent state and before the corresponding CollectionChanged 
            event is raised.
            <para/>
            Note: an ItemRemoved event will also be fired.
            </summary>
            <param name="sender"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="T:Csla.Wpf.ViewModelBase`1">
            <summary>
            Base class used to create ViewModel objects that
            implement their own commands/verbs/actions.
            </summary>
            <typeparam name="T">Type of the Model object.</typeparam>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.#ctor">
            <summary>
            Create new instance of base class used to create ViewModel objects that
            implement their own commands/verbs/actions.
            </summary>
        </member>
        <member name="F:Csla.Wpf.ViewModelBase`1.ModelProperty">
            <summary>
            Gets or sets the Model object.
            </summary>
        </member>
        <member name="F:Csla.Wpf.ViewModelBase`1.ManageObjectLifetimeProperty">
            <summary>
            Gets or sets a value indicating whether the
            ViewModel should automatically managed the
            lifetime of the Model.
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.OnError(System.Exception)">
            <summary>
            Raises ErrorOccurred event when an error occurs
            during processing.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.DoRefresh(System.String,System.Object[])">
            <summary>
            Creates or retrieves a new instance of the 
            Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
            <param name="factoryParameters">Factory method parameters.</param>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.DoRefresh(System.String)">
            <summary>
            Creates or retrieves a new instance of the 
            Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.BeginRefresh(System.String,System.Object[])">
            <summary>
            Creates or retrieves a new instance of the 
            Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
            <param name="factoryParameters">Factory method parameters.</param>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.BeginRefresh(System.String)">
            <summary>
            Creates or retrieves a new instance of the 
            Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.OnRefreshed">
            <summary>
            Method called after a refresh operation 
            has completed (whether successful or
            not).
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.DoSave">
            <summary>
            Saves the Model, first committing changes
            if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.BeginSave">
            <summary>
            Saves the Model, first committing changes
            if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.OnSaved">
            <summary>
            Method called after a save operation 
            has completed (whether successful or
            not).
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.DoCancel">
            <summary>
            Cancels changes made to the model 
            if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.DoAddNew">
            <summary>
            Adds a new item to the Model (if it
            is a collection).
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.DoRemove(System.Object)">
            <summary>
            Removes an item from the Model (if it
            is a collection).
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.DoDelete">
            <summary>
            Marks the Model for deletion (if it is an
            editable root object).
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.OnPropertyChanged(System.String)">
            <summary>
            Raise the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
        </member>
        <member name="M:Csla.Wpf.ViewModelBase`1.OnModelChanged(`0,`0)">
            <summary>
            Invoked when the Model changes, allowing
            event handlers to be unhooked from the old
            object and hooked on the new object.
            </summary>
            <param name="oldValue">Previous Model reference.</param>
            <param name="newValue">New Model reference.</param>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.Model">
            <summary>
            Gets or sets the Model object.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.ManageObjectLifetime">
            <summary>
            Gets or sets a value indicating whether the
            ViewManageObjectLifetime should automatically managed the
            lifetime of the ManageObjectLifetime.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.Error">
            <summary>
            Gets the Error object corresponding to the
            last asyncronous operation.
            </summary>
        </member>
        <member name="E:Csla.Wpf.ViewModelBase`1.ErrorOccurred">
            <summary>
            Event raised when an error occurs during processing.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.IsBusy">
            <summary>
            Gets a value indicating whether this object is
            executing an asynchronous process.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.CanSave">
            <summary>
            Gets a value indicating whether the Model
            can currently be saved.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.CanCancel">
            <summary>
            Gets a value indicating whether the Model
            can currently be canceled.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.CanCreate">
            <summary>
            Gets a value indicating whether an instance
            of the Model
            can currently be created.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.CanDelete">
            <summary>
            Gets a value indicating whether the Model
            can currently be deleted.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.CanFetch">
            <summary>
            Gets a value indicating whether an instance
            of the Model
            can currently be retrieved.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.CanRemove">
            <summary>
            Gets a value indicating whether the Model
            can currently be removed.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.CanAddNew">
            <summary>
            Gets a value indicating whether the Model
            can currently be added.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.CanCreateObject">
            <summary>
            Gets a value indicating whether the current
            user is authorized to create a Model.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.CanGetObject">
            <summary>
            Gets a value indicating whether the current
            user is authorized to retrieve a Model.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.CanEditObject">
            <summary>
            Gets a value indicating whether the current
            user is authorized to save (insert or update
            a Model.
            </summary>
        </member>
        <member name="P:Csla.Wpf.ViewModelBase`1.CanDeleteObject">
            <summary>
            Gets a value indicating whether the current
            user is authorized to delete
            a Model.
            </summary>
        </member>
        <member name="E:Csla.Wpf.ViewModelBase`1.PropertyChanged">
            <summary>
            Event raised when a property changes.
            </summary>
        </member>
        <member name="T:Csla.Wpf.InvokeMethod">
            <summary>
            Invokes a method on a target object when a 
            trigger event is raised from the attached
            UI control.
            </summary>
        </member>
        <member name="F:Csla.Wpf.InvokeMethod.TargetProperty">
            <summary>
            Object containing the method to be invoked.
            </summary>
        </member>
        <member name="M:Csla.Wpf.InvokeMethod.SetTarget(System.Windows.UIElement,System.Object)">
            <summary>
            Sets the object containing the method to be invoked.
            </summary>
            <param name="ctrl">Attached control</param>
            <param name="value">New value</param>
        </member>
        <member name="M:Csla.Wpf.InvokeMethod.GetTarget(System.Windows.UIElement)">
            <summary>
            Gets the object containing the method to be invoked.
            </summary>
            <param name="ctrl">Attached control</param>
        </member>
        <member name="F:Csla.Wpf.InvokeMethod.MethodNameProperty">
            <summary>
            Name of method to be invoked.
            </summary>
        </member>
        <member name="M:Csla.Wpf.InvokeMethod.SetMethodName(System.Windows.UIElement,System.String)">
            <summary>
            Sets the name of method to be invoked.
            </summary>
            <param name="ctrl">Attached control</param>
            <param name="value">New value</param>
        </member>
        <member name="M:Csla.Wpf.InvokeMethod.GetMethodName(System.Windows.UIElement)">
            <summary>
            Gets the name of method to be invoked.
            </summary>
            <param name="ctrl">Attached control</param>
        </member>
        <member name="F:Csla.Wpf.InvokeMethod.TriggerEventProperty">
            <summary>
            Name of event raised by UI control that triggers
            invoking the target method.
            </summary>
        </member>
        <member name="M:Csla.Wpf.InvokeMethod.SetTriggerEvent(System.Windows.UIElement,System.String)">
            <summary>
            Sets the name of event raised by UI control that triggers
            invoking the target method.
            </summary>
            <param name="ctrl">Attached control</param>
            <param name="value">New value</param>
        </member>
        <member name="M:Csla.Wpf.InvokeMethod.GetTriggerEvent(System.Windows.UIElement)">
            <summary>
            Gets the name of event raised by UI control that triggers
            invoking the target method.
            </summary>
            <param name="ctrl">Attached control</param>
        </member>
        <member name="F:Csla.Wpf.InvokeMethod.MethodParameterProperty">
            <summary>
            Parameter value to be passed to invoked method.
            </summary>
        </member>
        <member name="M:Csla.Wpf.InvokeMethod.SetMethodParameter(System.Windows.UIElement,System.Object)">
            <summary>
            Sets the parameter value to be passed to invoked method.
            </summary>
            <param name="ctrl">Attached control</param>
            <param name="value">New value</param>
        </member>
        <member name="M:Csla.Wpf.InvokeMethod.GetMethodParameter(System.Windows.UIElement)">
            <summary>
            Gets the parameter value to be passed to invoked method.
            </summary>
            <param name="ctrl">Attached control</param>
        </member>
        <member name="M:Csla.Wpf.InvokeMethod.#ctor(System.Windows.UIElement)">
            <summary>
            Invokes the target method if all required attached
            property values have been set.
            </summary>
            <param name="ctrl">Attached UI control</param>
        </member>
        <member name="T:Csla.Windows.HostPropertyAttribute">
            <summary>
            HostPropertyAttribute is used on components to 
            indicate the property on the component that is to be used as the 
            parent container control in conjunction with HostComponentDesigner.
            </summary>
        </member>
        <member name="M:Csla.Windows.HostPropertyAttribute.#ctor(System.String)">
            <summary>
            Constructor creates a new HostPropertyAttribute object instance using the information supplied.
            </summary>
            <param name="hostPropertyName">The name of the host property.</param>
        </member>
        <member name="P:Csla.Windows.HostPropertyAttribute.HostPropertyName">
            <summary>
            HostPropertyName gets the host property name.
            </summary>
        </member>
        <member name="T:Csla.Web.Design.CslaDesignerDataSourceView">
            <summary>
            Object responsible for providing details about
            data binding to a specific CSLA .NET object.
            </summary>
        </member>
        <member name="M:Csla.Web.Design.CslaDesignerDataSourceView.#ctor(Csla.Web.Design.CslaDataSourceDesigner,System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Web.Design.CslaDesignerDataSourceView.GetDesignTimeData(System.Int32,System.Boolean@)">
            <summary>
            Returns a set of sample data used to populate
            controls at design time.
            </summary>
            <param name="minimumRows">Minimum number of sample rows
            to create.</param>
            <param name="isSampleData">Returns True if the data
            is sample data.</param>
        </member>
        <member name="P:Csla.Web.Design.CslaDesignerDataSourceView.Schema">
            <summary>
            Returns schema information corresponding to the properties
            of the CSLA .NET business object.
            </summary>
            <remarks>
            All public properties are returned except for those marked
            with the <see cref="T:System.ComponentModel.BrowsableAttribute">Browsable attribute</see>
            as False.
            </remarks>
        </member>
        <member name="P:Csla.Web.Design.CslaDesignerDataSourceView.CanRetrieveTotalRowCount">
            <summary>
            Get a value indicating whether data binding can retrieve
            the total number of rows of data.
            </summary>
        </member>
        <member name="P:Csla.Web.Design.CslaDesignerDataSourceView.CanDelete">
            <summary>
            Get a value indicating whether data binding can directly
            delete the object.
            </summary>
            <remarks>
            If this returns true, the web page must handle the
            <see cref="E:Csla.Web.CslaDataSource.DeleteObject">DeleteObject</see>
            event.
            </remarks>
        </member>
        <member name="P:Csla.Web.Design.CslaDesignerDataSourceView.CanInsert">
            <summary>
            Get a value indicating whether data binding can directly
            insert an instance of the object.
            </summary>
            <remarks>
            If this returns true, the web page must handle the
            <see cref="E:Csla.Web.CslaDataSource.InsertObject">InsertObject</see>
            event.
            </remarks>
        </member>
        <member name="P:Csla.Web.Design.CslaDesignerDataSourceView.CanUpdate">
            <summary>
            Get a value indicating whether data binding can directly
            update or edit the object.
            </summary>
            <remarks>
            If this returns true, the web page must handle the
            <see cref="E:Csla.Web.CslaDataSource.UpdateObject">UpdateObject</see>
            event.
            </remarks>
        </member>
        <member name="P:Csla.Web.Design.CslaDesignerDataSourceView.CanPage">
            <summary>
            Gets a value indicating whether the data source supports
            paging.
            </summary>
        </member>
        <member name="P:Csla.Web.Design.CslaDesignerDataSourceView.CanSort">
            <summary>
            Gets a value indicating whether the data source supports
            sorting.
            </summary>
        </member>
        <member name="T:Csla.Validation.RuleDescription">
            <summary>
            Parses a rule:// URI to provide
            easy access to the parts of the URI.
            </summary>
        </member>
        <member name="M:Csla.Validation.RuleDescription.#ctor(System.String)">
            <summary>
            Creates an instance of the object
            by parsing the provided rule:// URI.
            </summary>
            <param name="ruleString">The rule:// URI.</param>
        </member>
        <member name="M:Csla.Validation.RuleDescription.Parse(System.String)">
            <summary>
            Parses a rule:// URI.
            </summary>
            <param name="ruleString">
            Text representation of a rule:// URI.</param>
            <returns>A populated RuleDescription object.</returns>
        </member>
        <member name="P:Csla.Validation.RuleDescription.Scheme">
            <summary>
            Gets the scheme of the URI 
            (should always be rule://).
            </summary>
        </member>
        <member name="P:Csla.Validation.RuleDescription.MethodTypeName">
            <summary>
            Gets the name of the type containing
            the rule method.
            </summary>
        </member>
        <member name="P:Csla.Validation.RuleDescription.MethodName">
            <summary>
            Gets the name of the rule method.
            </summary>
        </member>
        <member name="P:Csla.Validation.RuleDescription.PropertyName">
            <summary>
            Gets the name of the property with which
            the rule is associated.
            </summary>
        </member>
        <member name="P:Csla.Validation.RuleDescription.Arguments">
            <summary>
            Gets a Dictionary containing the
            name/value arguments provided to
            the rule method.
            </summary>
        </member>
        <member name="T:Csla.Security.SharedAuthorizationRules">
            <summary>
            Maintains a list of all the per-type
            <see cref="T:Csla.Security.AuthorizationRulesManager"/> objects
            loaded in memory.
            </summary>
        </member>
        <member name="M:Csla.Security.SharedAuthorizationRules.GetManager(System.Type,System.Boolean)">
            <summary>
            Gets the <see cref="T:Csla.Security.AuthorizationRulesManager"/> for the 
            specified object type, optionally creating a new instance 
            of the object if necessary.
            </summary>
            <param name="objectType">
            Type of business object for which the rules apply.
            </param>
            <param name="create">Indicates whether to create
            a new instance of the object if one doesn't exist.</param>
        </member>
        <member name="M:Csla.Security.SharedAuthorizationRules.RulesExistFor(System.Type)">
            <summary>
            Gets a value indicating whether a set of rules
            have been created for a given <see cref="T:System.Type"/>.
            </summary>
            <param name="objectType">
            Type of business object for which the rules apply.
            </param>
            <returns><see langword="true"/> if rules exist for the type.</returns>
        </member>
        <member name="T:Csla.ReadOnlyListBase`2">
            <summary>
            This is the base class from which readonly collections
            of readonly objects should be derived.
            </summary>
            <typeparam name="T">Type of the list class.</typeparam>
            <typeparam name="C">Type of child objects contained in the list.</typeparam>
        </member>
        <member name="T:Csla.Core.IReadOnlyCollection">
            <summary>
            Interface implemented by all read-only collection
            classes.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.GetClone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>A new object containing the exact data of the original object.</returns>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>
            A new object containing the exact data of the original object.
            </returns>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.DataPortal_Fetch(System.Object)">
            <summary>
            Override this method to allow retrieval of an existing business
            object based on data in the database.
            </summary>
            <param name="criteria">An object containing criteria values to identify the object.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.Child_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.Child_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.Child_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.ToArray">
            <summary>
            Get an array containing all items in the list.
            </summary>
        </member>
        <member name="T:Csla.ReadOnlyListBaseExtension">
            <summary>
            Extension method for implementation of LINQ methods on ReadOnlyListBase
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyListBaseExtension.Where``2(Csla.ReadOnlyListBase{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}})">
            <summary>
            Custom implementation of Where for ReadOnlyListBase - used in LINQ
            </summary>
        </member>
        <member name="T:Csla.IndexableAttribute">
            <summary>
            Marks a property to indicate that, when contained in a CSLA collection 
            class, that an index should be built for the property that will
            be used in LINQ queries
            </summary>
            <remarks>
            Marking a variable with this attribute will cause any CSLA collection
            class to create an internal index on this value.  Use this carefully, as
            the more items are indexed, the slower add operations will be
            </remarks>
        </member>
        <member name="M:Csla.IndexableAttribute.#ctor">
            <summary>
            Sets the property as indexable on demand
            </summary>
        </member>
        <member name="M:Csla.IndexableAttribute.#ctor(Csla.IndexModeEnum)">
            <summary>
            Set the indexable property, along with it's index mode
            </summary>
        </member>
        <member name="P:Csla.IndexableAttribute.IndexMode">
            <summary>
            Allows user to determine how indexing will occur
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.WcfChannel.UseNetDataContractAttribute">
            <summary>
            Specify that WCF should serialize objects in a .NET
            specific manner to as to preserve complex object
            references and to be able to deserialize the graph
            into the same type as the original objets.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.UseNetDataContractAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Not implemented.
            </summary>
            <param name="description">Not implemented.</param>
            <param name="parameters">Not implemented.</param>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.UseNetDataContractAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Apply the client behavior by requiring
            the use of the NetDataContractSerializer.
            </summary>
            <param name="description">Operation description.</param>
            <param name="proxy">Client operation object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.UseNetDataContractAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            Apply the dispatch behavior by requiring
            the use of the NetDataContractSerializer.
            </summary>
            <param name="description">Operation description.</param>
            <param name="dispatch">Dispatch operation object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.UseNetDataContractAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Not implemented.
            </summary>
            <param name="description">Not implemented.</param>
        </member>
        <member name="T:Csla.DataPortalClient.RemotingProxy">
            <summary>
            Implements a data portal proxy to relay data portal
            calls to a remote application server by using the
            .NET Remoting technology.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.RemotingProxy.#cctor">
            <summary>
            Configure .NET Remoting to use a binary
            serialization technology even when using
            the HTTP channel. Also ensures that the
            user's Windows credentials are passed to
            the server appropriately.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.RemotingProxy.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to create a
            new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.RemotingProxy.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to load an
            existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.RemotingProxy.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to update a
            business object.
            </summary>
            <param name="obj">The business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.RemotingProxy.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to delete a
            business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="P:Csla.DataPortalClient.RemotingProxy.IsServerRemote">
            <summary>
            Get a value indicating whether this proxy will invoke
            a remote data portal server, or run the "server-side"
            data portal in the caller's process and AppDomain.
            </summary>
        </member>
        <member name="T:Csla.Data.ContextManager`1">
            <summary>
            Provides an automated way to reuse 
            LINQ data context objects within the context
            of a single data portal operation.
            </summary>
            <typeparam name="C">
            Type of database 
            LINQ data context objects object to use.
            </typeparam>
            <remarks>
            This type stores the LINQ data context object 
            in <see cref="P:Csla.ApplicationContext.LocalContext"/>
            and uses reference counting through
            <see cref="T:System.IDisposable"/> to keep the data context object
            open for reuse by child objects, and to automatically
            dispose the object when the last consumer
            has called Dispose."
            </remarks>
        </member>
        <member name="M:Csla.Data.ContextManager`1.GetManager(System.String)">
            <summary>
            Gets the ContextManager object for the 
            specified database.
            </summary>
            <param name="database">
            Database name as shown in the config file.
            </param>
        </member>
        <member name="M:Csla.Data.ContextManager`1.GetManager(System.String,System.String)">
            <summary>
            Gets the ContextManager object for the 
            specified database.
            </summary>
            <param name="database">
            Database name as shown in the config file.
            </param>
            <param name="label">Label for this context.</param>
        </member>
        <member name="M:Csla.Data.ContextManager`1.GetManager(System.String,System.Boolean)">
            <summary>
            Gets the ContextManager object for the 
            specified database.
            </summary>
            <param name="database">
            The database name or connection string.
            </param>
            <param name="isDatabaseName">
            True to indicate that the connection string
            should be retrieved from the config file. If
            False, the database parameter is directly 
            used as a connection string.
            </param>
            <returns>ContextManager object for the name.</returns>
        </member>
        <member name="M:Csla.Data.ContextManager`1.GetManager(System.String,System.Boolean,System.String)">
            <summary>
            Gets the ContextManager object for the 
            specified database.
            </summary>
            <param name="database">
            The database name or connection string.
            </param>
            <param name="isDatabaseName">
            True to indicate that the connection string
            should be retrieved from the config file. If
            False, the database parameter is directly 
            used as a connection string.
            </param>
            <param name="label">Label for this context.</param>
            <returns>ContextManager object for the name.</returns>
        </member>
        <member name="M:Csla.Data.ContextManager`1.Dispose">
            <summary>
            Dispose object, dereferencing or
            disposing the context it is
            managing.
            </summary>
        </member>
        <member name="P:Csla.Data.ContextManager`1.DataContext">
            <summary>
            Gets the LINQ data context object.
            </summary>
        </member>
        <member name="P:Csla.Data.ContextManager`1.RefCount">
            <summary>
            Gets the current reference count for this
            object.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.SilverlightRequestProcessor">
            <summary>
            Object taht processes all the requests from a Silverlight client
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.SilverlightRequestProcessor.Create(Csla.Server.Hosts.Silverlight.SilverlightCriteriaRequest)">
            <summary>
            Create a new business object.
            </summary>
            <param name="request">The request parameter object.</param>
            <returns>Resulf of the create operation - an instance of a business object</returns>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.SilverlightRequestProcessor.Fetch(Csla.Server.Hosts.Silverlight.SilverlightCriteriaRequest)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="request">The request parameter object.</param>
            <returns>Result of the fetch operation - an instance of a business object</returns>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.SilverlightRequestProcessor.Update(Csla.Server.Hosts.Silverlight.SilverlightUpdateRequest)">
            <summary>
            Update a business object.
            </summary>
            <param name="request">The request parameter object.</param>
            <returns>Result of the update operation - updated object</returns>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.SilverlightRequestProcessor.Delete(Csla.Server.Hosts.Silverlight.SilverlightCriteriaRequest)">
            <summary>
            Delete a business object.
            </summary>
            <param name="request">The request parameter object.</param>
            <returns>Result of the delete operation</returns>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightRequestProcessor.FactoryLoader">
            <summary>
            Gets or sets a delegate reference to the method
            called to create instances of factory objects
            as requested by the MobileFactory attribute on
            a CSLA Light business object.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.SilverlightCriteriaRequest">
            <summary>
            Class that will be used to execute a request from a Silverlight client.
            This will inlcude Execute, Fetch, Create and Delete requests
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.SilverlightCriteriaRequest.#ctor(System.String,System.Object,System.Security.Principal.IPrincipal,Csla.Core.ContextDictionary,Csla.Core.ContextDictionary)">
            <summary>
            New instance of criteria object
            </summary>
            <param name="typeName">Type of object that is the target of the request</param>
            <param name="criteria">Criteria object.</param>
            <param name="principal">Principal that will be set for the request</param>
            <param name="globalContext">Global context object.</param>
            <param name="clientContext">Client context object.</param>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightCriteriaRequest.TypeName">
            <summary>
            Type of object that is the target of the request
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightCriteriaRequest.Criteria">
            <summary>
            Criteria object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightCriteriaRequest.Principal">
            <summary>
            Principal that will be set for the request
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightCriteriaRequest.GlobalContext">
            <summary>
            Global context object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightCriteriaRequest.ClientContext">
            <summary>
            Client context object.
            </summary>
        </member>
        <member name="T:Csla.Security.UnauthenticatedPrincipal">
            <summary>
            Implementation of a .NET principal object that represents
            an unauthenticated user. Contains an UnauthenticatedIdentity
            object.
            </summary>
        </member>
        <member name="M:Csla.Security.UnauthenticatedPrincipal.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Security.UnauthenticatedPrincipal.IsInRole(System.String)">
            <summary>
            Returns a value indicating whether the user is in the
            specified role.
            </summary>
            <param name="role">Role name.</param>
            <returns></returns>
        </member>
        <member name="T:Csla.RelationshipTypes">
            <summary>
            List of valid relationship types
            between a parent object and another
            object through a managed property.
            </summary>
        </member>
        <member name="F:Csla.RelationshipTypes.Child">
            <summary>
            Property is a reference to a child
            object contained by the parent.
            </summary>
        </member>
        <member name="F:Csla.RelationshipTypes.LazyLoad">
            <summary>
            Property is a reference to a lazy
            loaded object. Attempting to get
            or read the property value
            prior to a set or load will result in 
            an exception.
            </summary>
        </member>
        <member name="T:Csla.Core.ErrorEventArgs">
            <summary>
            Event arguments for an unhandled async
            exception.
            </summary>
        </member>
        <member name="M:Csla.Core.ErrorEventArgs.#ctor(System.Object,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="originalSender">
            Reference to the original sender of the event.
            </param>
            <param name="error">
            Reference to the unhandled async exception object.
            </param>
        </member>
        <member name="P:Csla.Core.ErrorEventArgs.OriginalSender">
            <summary>
            Reference to the original sender of the event.
            </summary>
        </member>
        <member name="P:Csla.Core.ErrorEventArgs.Error">
            <summary>
            Reference to the unhandled async exception object.
            </summary>
        </member>
        <member name="T:Csla.CommandBase">
            <summary>
            This is the base class from which command 
            objects will be derived.
            </summary>
            <remarks>
            <para>
            Command objects allow the execution of arbitrary server-side
            functionality. Most often, this involves the invocation of
            a stored procedure in the database, but can involve any other
            type of stateless, atomic call to the server instead.
            </para><para>
            To implement a command object, inherit from CommandBase and
            override the DataPortal_Execute method. In this method you can
            implement any server-side code as required.
            </para><para>
            To pass data to/from the server, use instance variables within
            the command object itself. The command object is instantiated on
            the client, and is passed by value to the server where the 
            DataPortal_Execute method is invoked. The command object is then
            returned to the client by value.
            </para>
            </remarks>
        </member>
        <member name="T:Csla.Core.ICommandObject">
            <summary>
            This interface is implemented by all
            Command objects.
            </summary>
        </member>
        <member name="M:Csla.CommandBase.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.CommandBase.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.CommandBase.DataPortal_Execute">
            <summary>
            Override this method to implement any server-side code
            that is to be run when the command is executed.
            </summary>
        </member>
        <member name="M:Csla.CommandBase.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.CommandBase.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.CommandBase.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during server-side processing.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during processing.</param>
        </member>
        <member name="T:Csla.C5.Comparer`1">
            <summary>
            A default item comparer for an item type that is either generic (IComparable&lt;T&gt;)
            or ordinarily (System.IComparable) comparable.
            </summary>
        </member>
        <member name="P:Csla.C5.Comparer`1.Default">
            <summary>
            Create a default comparer. 
            <para>The IComparer[T] object is constructed when this class is initialised, i.e. 
            its static constructors called. Thus, the property will be the same object 
            for the duration of an invocation of the runtime, but a value serialized in 
            another invocation and deserialized here will not be the same object.</para>
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">If T is not comparable</exception>
            <value>The comparer</value>
        </member>
        <member name="T:Csla.C5.NaturalComparer`1">
            <summary>
            A natural generic IComparer for an IComparable&lt;T&gt; item type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Csla.C5.NaturalComparer`1.Compare(`0,`0)">
            <summary>
            Compare two items
            </summary>
            <param name="item1">First item</param>
            <param name="item2">Second item</param>
            <returns>item1 &lt;=&gt; item2</returns>
        </member>
        <member name="T:Csla.C5.NaturalComparerO`1">
            <summary>
            A natural generic IComparer for a System.IComparable item type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Csla.C5.NaturalComparerO`1.Compare(`0,`0)">
            <summary>
            Compare two items
            </summary>
            <param name="item1">First item</param>
            <param name="item2">Second item</param>
            <returns>item1 &lt;=&gt; item2</returns>
        </member>
        <member name="T:Csla.C5.DelegateComparer`1">
            <summary>
            A generic comparer for type T based on a Comparison[T] delegate
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Csla.C5.DelegateComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            
            </summary>
            <param name="comparison"></param>
        </member>
        <member name="M:Csla.C5.DelegateComparer`1.Compare(`0,`0)">
            <summary>
            
            </summary>
            <param name="item1">First item</param>
            <param name="item2">Second item</param>
            <returns>item1 &lt;=&gt; item2</returns>
        </member>
        <member name="T:Csla.C5.SortedArray`1">
            <summary>
            A collection class implementing a sorted dynamic array data structure.
            </summary>
        </member>
        <member name="T:Csla.C5.ArrayBase`1">
            <summary>
            Base class for collection classes of dynamic array type implementations.
            </summary>
        </member>
        <member name="F:Csla.C5.ArrayBase`1.array">
            <summary>
            The actual internal array container. Will be extended on demand.
            </summary>
        </member>
        <member name="F:Csla.C5.ArrayBase`1.offset">
            <summary>
            The offset into the internal array container of the first item. The offset is 0 for a 
            base dynamic array and may be positive for an updatable view into a base dynamic array.
            </summary>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.expand">
            <summary>
            Double the size of the internal array.
            </summary>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.expand(System.Int32,System.Int32)">
            <summary>
            Expand the internal array container.
            </summary>
            <param name="newcapacity">The new size of the internal array - 
            will be rounded upwards to a power of 2.</param>
            <param name="newsize">The (new) size of the (base) collection.</param>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.insert(System.Int32,`0)">
            <summary>
            Insert an item at a specific index, moving items to the right
            upwards and expanding the array if necessary.
            </summary>
            <param name="i">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create an empty ArrayBase object.
            </summary>
            <param name="capacity">The initial capacity of the internal array container.
            Will be rounded upwards to the nearest power of 2 greater than or equal to 8.</param>
            <param name="itemequalityComparer">The item equalityComparer to use, primarily for item equality</param>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.Clear">
            <summary>
            Remove all items and reset size of internal array container.
            </summary>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.ToArray">
            <summary>
            Create an array containing (copies) of the items of this collection in enumeration order.
            </summary>
            <returns>The new array</returns>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.Check">
            <summary>
            Perform an internal consistency (invariant) test on the array base.
            </summary>
            <returns>True if test succeeds.</returns>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.Backwards">
            <summary>
            Create a directed collection with the same contents as this one, but 
            opposite enumeration sequence.
            </summary>
            <returns>The mirrored collection.</returns>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.Choose">
            <summary>
            Choose some item of this collection. The result is the last item in the internal array,
            making it efficient to remove.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException">if collection is empty.</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.GetEnumerator">
            <summary>
            Create an enumerator for this array based collection.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:Csla.C5.ArrayBase`1.Item(System.Int32,System.Int32)">
            <summary>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the arguments does not describe a 
            valid range in the indexed collection, cf. <see cref="M:C5.CollectionBase`1.checkRange(System.Int32,System.Int32)"/>.</exception>
            <value>The directed collection of items in a specific index interval.</value>
            <param name="start">The low index of the interval (inclusive).</param>
            <param name="count">The size of the range.</param>
        </member>
        <member name="T:Csla.C5.ArrayBase`1.Range">
            <summary>
            A helper class for defining results of interval queries on array based collections.
            </summary>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.Range.Choose">
            <summary>
            Choose some item of this collection. 
            </summary>
            <exception cref="T:Csla.C5.CollectionModifiedException">if underlying collection has been modified.</exception>
            <exception cref="T:Csla.C5.NoSuchItemException">if range is empty.</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.Range.GetEnumerator">
            <summary>
            Create an enumerator for this range of an array based collection.
            </summary>
            <exception cref="T:Csla.C5.CollectionModifiedException">if underlying collection has been modified.</exception>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.ArrayBase`1.Range.Backwards">
            <summary>
            Create a araay collection range with the same contents as this one, but 
            opposite enumeration sequence.
            </summary>
            <exception cref="T:Csla.C5.CollectionModifiedException">if underlying collection has been modified.</exception>
            <returns>The mirrored collection.</returns>
        </member>
        <member name="P:Csla.C5.ArrayBase`1.Range.IsEmpty">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.CollectionModifiedException">if underlying collection has been modified.</exception>
            <value>True if this collection is empty.</value>
        </member>
        <member name="P:Csla.C5.ArrayBase`1.Range.Count">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.CollectionModifiedException">if underlying collection has been modified.</exception>
            <value>The number of items in the range</value>
        </member>
        <member name="P:Csla.C5.ArrayBase`1.Range.CountSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant).
            </summary>
            <value>A characterization of the speed of the 
            <exception cref="T:Csla.C5.CollectionModifiedException">if underlying collection has been modified.</exception>
            <code>Count</code> property in this collection.</value>
        </member>
        <member name="P:Csla.C5.ArrayBase`1.Range.Direction">
            <summary>
            <code>Forwards</code> if same, else <code>Backwards</code>
            </summary>
            <exception cref="T:Csla.C5.CollectionModifiedException">if underlying collection has been modified.</exception>
            <value>The enumeration direction relative to the original collection.</value>
        </member>
        <member name="M:Csla.C5.SortedArray`1.binarySearch(`0,System.Int32@)">
            <summary>
            
            </summary>
            <param name="item">The item to search for</param>
            <param name="mid">The least index, mid, for which array[mid] >= item</param>
            <returns>True if item found</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.#ctor">
            <summary>
            Create a dynamic sorted array with a natural comparer
            (and item equalityComparer,  assumed compatible)
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">If <code>T</code> is not comparable.
            </exception>
        </member>
        <member name="M:Csla.C5.SortedArray`1.#ctor(System.Int32)">
            <summary>
            Create a dynamic sorted array with a natural comparer 
            (and item equalityComparer,  assumed compatible)
            and prescribed initial capacity.
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">If <code>T</code> is not comparable.
            </exception>
            <param name="capacity">The capacity</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a dynamic sorted array with an external comparer.
            <para>The itemequalityComparer will be compatible 
            <see cref="T:C5.ComparerZeroHashCodeEqualityComparer`1"/> since the 
            default equalityComparer for T (<see cref="P:C5.EqualityComparer`1.Default"/>)
            is unlikely to be compatible with the external comparer. This makes the
            array inadequate for use as item in a collection of unsequenced or sequenced sets or bags
            (<see cref="T:C5.ICollection`1"/> and <see cref="T:C5.ISequenced`1"/>)
            </para>
            </summary>
            <param name="comparer">The comparer</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a dynamic sorted array with an external comparer
            and prescribed initial capacity.
            <para>The itemequalityComparer will be a compatible 
            <see cref="T:C5.ComparerZeroHashCodeEqualityComparer`1"/> since the 
            default equalityComparer for T (<see cref="P:C5.EqualityComparer`1.Default"/>)
            is unlikely to be compatible with the external comparer. This makes the
            sorted array inadequate for use as item in a collection of unsequenced or sequenced sets or bags
            (<see cref="T:C5.ICollection`1"/> and <see cref="T:C5.ISequenced`1"/>)
            </para>
            </summary>
            <param name="capacity">The capacity</param>
            <param name="comparer">The comparer</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a dynamic sorted array with an external comparer, an external item equalityComparer
            and prescribed initial capacity. This is the constructor to use if the collection 
            will be used as item in a hash table based collection.
            </summary>
            <param name="capacity">The capacity</param>
            <param name="comparer">The item comparer</param>
            <param name="equalityComparer">The item equalityComparer (assumed compatible)</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.CountFrom(`0)">
            <summary>
            Determine the number of items at or above a supplied threshold.
            </summary>
            <param name="bot">The lower bound (inclusive)</param>
            <returns>The number of matcing items.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.CountFromTo(`0,`0)">
            <summary>
            Determine the number of items between two supplied thresholds.
            </summary>
            <param name="bot">The lower bound (inclusive)</param>
            <param name="top">The upper bound (exclusive)</param>
            <returns>The number of matcing items.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.CountTo(`0)">
            <summary>
            Determine the number of items below a supplied threshold.
            </summary>
            <param name="top">The upper bound (exclusive)</param>
            <returns>The number of matcing items.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.RangeFrom(`0)">
            <summary>
            Query this sorted collection for items greater than or equal to a supplied value.
            </summary>
            <param name="bot">The lower bound (inclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.RangeFromTo(`0,`0)">
            <summary>
            Query this sorted collection for items between two supplied values.
            </summary>
            <param name="bot">The lower bound (inclusive).</param>
            <param name="top">The upper bound (exclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.RangeTo(`0)">
            <summary>
            Query this sorted collection for items less than a supplied value.
            </summary>
            <param name="top">The upper bound (exclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.FindAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create a new indexed sorted collection consisting of the items of this
            indexed sorted collection satisfying a certain predicate.
            </summary>
            <param name="f">The filter delegate defining the predicate.</param>
            <returns>The new indexed sorted collection.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Map``1(Csla.C5.Fun{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Create a new indexed sorted collection consisting of the results of
            mapping all items of this list.
            <exception cref="T:System.ArgumentException"/> if the map is not increasing over 
            the items of this collection (with respect to the two given comparison 
            relations).
            </summary>
            <param name="m">The delegate definging the map.</param>
            <param name="c">The comparion relation to use for the result.</param>
            <returns>The new sorted collection.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.TryPredecessor(`0,`0@)">
            <summary>
            Find the strict predecessor of item in the sorted array,
            that is, the greatest item in the collection smaller than the item.
            </summary>
            <param name="item">The item to find the predecessor for.</param>
            <param name="res">The predecessor, if any; otherwise the default value for T.</param>
            <returns>True if item has a predecessor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.TrySuccessor(`0,`0@)">
            <summary>
            Find the strict successor of item in the sorted array,
            that is, the least item in the collection greater than the supplied value.
            </summary>
            <param name="item">The item to find the successor for.</param>
            <param name="res">The successor, if any; otherwise the default value for T.</param>
            <returns>True if item has a successor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.TryWeakPredecessor(`0,`0@)">
            <summary>
            Find the weak predecessor of item in the sorted array,
            that is, the greatest item in the collection smaller than or equal to the item.
            </summary>
            <param name="item">The item to find the weak predecessor for.</param>
            <param name="res">The weak predecessor, if any; otherwise the default value for T.</param>
            <returns>True if item has a weak predecessor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.TryWeakSuccessor(`0,`0@)">
            <summary>
            Find the weak successor of item in the sorted array,
            that is, the least item in the collection greater than or equal to the supplied value.
            </summary>
            <param name="item">The item to find the weak successor for.</param>
            <param name="res">The weak successor, if any; otherwise the default value for T.</param>
            <returns>True if item has a weak successor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Predecessor(`0)">
            <summary>
            Find the strict predecessor in the sorted collection of a particular value,
            i.e. the largest item in the collection less than the supplied value.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is less than or equal to the minimum of this collection.)</exception>
            <param name="item">The item to find the predecessor for.</param>
            <returns>The predecessor.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Successor(`0)">
            <summary>
            Find the strict successor in the sorted collection of a particular value,
            i.e. the least item in the collection greater than the supplied value.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is greater than or equal to the maximum of this collection.)</exception>
            <param name="item">The item to find the successor for.</param>
            <returns>The successor.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.WeakPredecessor(`0)">
            <summary>
            Find the weak predecessor in the sorted collection of a particular value,
            i.e. the largest item in the collection less than or equal to the supplied value.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if no such element exists (the
            supplied  value is less than the minimum of this collection.)
            </summary>
            <param name="item">The item to find the weak predecessor for.</param>
            <returns>The weak predecessor.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.WeakSuccessor(`0)">
            <summary>
            Find the weak successor in the sorted collection of a particular value,
            i.e. the least item in the collection greater than or equal to the supplied value.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is greater than the maximum of this collection.)</exception>
            <param name="item">The item to find the weak successor for.</param>
            <returns>The weak successor.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Cut(System.IComparable{`0},`0@,System.Boolean@,`0@,System.Boolean@)">
            <summary>
            Perform a search in the sorted collection for the ranges in which a
            non-increasing (i.e. weakly decrerasing) function from the item type to 
            <code>int</code> is
            negative, zero respectively positive. If the supplied cut function is
            not non-increasing, the result of this call is undefined.
            </summary>
            <param name="c">The cut function <code>T</code> to <code>int</code>, given
            as an <code>IComparable&lt;T&gt;</code> object, where the cut function is
            the <code>c.CompareTo(T that)</code> method.</param>
            <param name="low">Returns the largest item in the collection, where the
            cut function is positive (if any).</param>
            <param name="lowIsValid">True if the cut function is positive somewhere
            on this collection.</param>
            <param name="high">Returns the least item in the collection, where the
            cut function is negative (if any).</param>
            <param name="highIsValid">True if the cut function is negative somewhere
            on this collection.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.RangeAll">
            <summary>
            Create a directed collection with the same items as this collection.
            </summary>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.AddSorted``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add all the items from another collection with an enumeration order that 
            is increasing in the items.
            <exception cref="T:System.ArgumentException"/> if the enumerated items turns out
            not to be in increasing order.
            </summary>
            <param name="items">The collection to add.</param>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Csla.C5.SortedArray`1.RemoveRangeFrom(`0)">
            <summary>
            Remove all items of this collection above or at a supplied threshold.
            </summary>
            <param name="low">The lower threshold (inclusive).</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.RemoveRangeFromTo(`0,`0)">
            <summary>
            Remove all items of this collection between two supplied thresholds.
            </summary>
            <param name="low">The lower threshold (inclusive).</param>
            <param name="hi">The upper threshold (exclusive).</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.RemoveRangeTo(`0)">
            <summary>
            Remove all items of this collection below a supplied threshold.
            </summary>
            <param name="hi">The upper threshold (exclusive).</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Clear">
            <summary>
            Remove all items from this collection, resetting internal array size.
            </summary>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Contains(`0)">
            <summary>
            Check if this collection contains (an item equivalent according to the
            itemequalityComparer) to a particular value.
            </summary>
            <param name="item">The value to check for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Find(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.FindOrAdd(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found. Else, add the item to the collection.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the item was added (hence not found).</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Update(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value. If the collection has bag semantics,
            it is implementation dependent if this updates all equivalent copies in
            the collection or just one.
            </summary>
            <param name="item">Value to update.</param>
            <returns>True if the item was found and hence updated.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Update(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.UpdateOrAdd(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value; else add the value to the collection. 
            </summary>
            <param name="item">Value to add or update.</param>
            <returns>True if the item was found and updated (hence not added).</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.UpdateOrAdd(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Remove(`0)">
            <summary>
            Remove a particular item from this collection. If the collection has bag
            semantics only one copy equivalent to the supplied item is removed. 
            </summary>
            <param name="item">The value to remove.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Remove(`0,`0@)">
            <summary>
            Remove a particular item from this collection if found. If the collection
            has bag semantics only one copy equivalent to the supplied item is removed,
            which one is implementation dependent. 
            If an item was removed, report a binary copy of the actual item removed in 
            the argument.
            </summary>
            <param name="item">The value to remove.</param>
            <param name="removeditem">The removed value.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.RemoveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items in another collection from this one. 
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to remove.</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.RetainAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items not in some other collection from this one. 
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to retain.</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if this collection contains all the values in another collection.
            Multiplicities are not taken into account.
            </summary>
            <param name="items">The </param>
            <typeparam name="U"></typeparam>
            <returns>True if all values in <code>items</code>is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.ContainsCount(`0)">
            <summary>
            Count the number of items of the collection equal to a particular value.
            Returns 0 if and only if the value is not in the collection.
            </summary>
            <param name="item">The value to count.</param>
            <returns>The number of copies found (0 or 1).</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.RemoveAllCopies(`0)">
            <summary>
            Remove all (0 or 1) items equivalent to a given value.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Check">
            <summary>
            Check the integrity of the internal data structures of this collection.
            Only avaliable in DEBUG builds???
            </summary>
            <returns>True if check does not fail.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Add(`0)">
            <summary>
            Add an item to this collection if possible. If this collection has set
            semantics, the item will be added if not already in the collection. If
            bag semantics, the item will always be added.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if item was added.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Add an item to this collection if possible. 
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add the elements from another collection with a more specialized item type 
            to this collection. Since this
            collection has set semantics, only items not already in the collection
            will be added.
            </summary>
            <typeparam name="U">The type of items to add</typeparam>
            <param name="items">The items to add</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.FindMin">
            <summary>
            Find the current least item of this priority queue.
            </summary>
            <returns>The least item.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.DeleteMin">
            <summary>
            Remove the least item from this  priority queue.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.FindMax">
            <summary>
            Find the current largest item of this priority queue.
            </summary>
            <returns>The largest item.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.DeleteMax">
            <summary>
            Remove the largest item from this  priority queue.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.IndexOf(`0)">
            <summary>
            Searches for an item in the list going forwrds from the start.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of item from start.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.LastIndexOf(`0)">
            <summary>
            Searches for an item in the list going backwords from the end.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of of item from the end.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at a specific position of the list.
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt;= the size of the collection.
            </summary>
            <param name="i">The index of the item to remove.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.RemoveInterval(System.Int32,System.Int32)">
            <summary>
            Remove all items in an index interval.
            <exception cref="T:System.IndexOutOfRangeException"/>???. 
            </summary>
            <param name="start">The index of the first item to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Csla#C5#IDirectedEnumerable{T}#Backwards">
            <summary>
            Create a collection containing the same items as this collection, but
            whose enumerator will enumerate the items backwards. The new collection
            will become invalid if the original is modified. Method typicaly used as in
            <code>foreach (T x in coll.Backwards()) {...}</code>
            </summary>
            <returns>The backwards collection.</returns>
        </member>
        <member name="M:Csla.C5.SortedArray`1.Clone">
            <summary>
            Make a shallow copy of this SortedArray.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.SortedArray`1.Features">
            <summary>
            A debugging artifact. To be removed.
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.SortedArray`1.ListenableEvents">
             <summary>
            
             </summary>
             <value></value>
        </member>
        <member name="P:Csla.C5.SortedArray`1.ContainsSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case).
            </summary>
            <value>Speed.Log</value>
        </member>
        <member name="P:Csla.C5.SortedArray`1.AllowsDuplicates">
            <summary>
            
            </summary>
            <value>False since this collection has set semantics</value>
        </member>
        <member name="P:Csla.C5.SortedArray`1.DuplicatesByCounting">
            <summary>
            By convention this is true for any collection with set semantics.
            </summary>
            <value>True if only one representative of a group of equal items 
            is kept in the collection together with the total count.</value>
        </member>
        <member name="P:Csla.C5.SortedArray`1.Comparer">
            <summary>
            The comparer object supplied at creation time for this collection
            </summary>
            <value>The comparer</value>
        </member>
        <member name="P:Csla.C5.SortedArray`1.Item(System.Int32)">
            <summary>
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt;= the size of the collection.
            </summary>
            <value>The i'th item of this list.</value>
            <param name="i">the index to lookup</param>
        </member>
        <member name="P:Csla.C5.SortedArray`1.IndexingSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.SortedArray`1.Feature">
            <summary>
            A debugging artifact. To be removed.
            </summary>
        </member>
        <member name="F:Csla.C5.SortedArray`1.Feature.Standard">
            <summary>
            A debugging artifact. To be removed.
            </summary>
        </member>
        <member name="T:Csla.Wpf.Authorizer">
            <summary>
            Container for other UI controls that adds
            the ability for the contained controls
            to change state based on the authorization
            information provided by the data binding
            context.
            </summary>
        </member>
        <member name="M:Csla.Wpf.Authorizer.GetNotVisibleMode(System.Windows.DependencyObject)">
            <summary>
            Gets the value controlling how controls
            bound to non-readable properties will be rendered.
            </summary>
        </member>
        <member name="M:Csla.Wpf.Authorizer.SetNotVisibleMode(System.Windows.DependencyObject,Csla.Wpf.VisibilityMode)">
            <summary>
            Sets the value controlling how controls
            bound to non-readable properties will be rendered.
            </summary>
        </member>
        <member name="M:Csla.Wpf.Authorizer.DataObjectChanged">
            <summary>
            This method is called when the data
            object to which the control is bound
            has changed.
            </summary>
        </member>
        <member name="M:Csla.Wpf.Authorizer.Refresh">
            <summary>
            Refresh authorization and update
            all controls.
            </summary>
        </member>
        <member name="M:Csla.Wpf.Authorizer.FoundBinding(System.Windows.Data.Binding,System.Windows.FrameworkElement,System.Windows.DependencyProperty)">
            <summary>
            Check the read and write status
            of the control based on the current
            user's authorization.
            </summary>
            <param name="bnd">The Binding object.</param>
            <param name="control">The control containing the binding.</param>
            <param name="prop">The data bound DependencyProperty.</param>
        </member>
        <member name="T:Csla.Web.InsertObjectArgs">
            <summary>
            Argument object used in the InsertObject event.
            </summary>
        </member>
        <member name="M:Csla.Web.InsertObjectArgs.#ctor(System.Collections.IDictionary)">
            <summary>
            Create an instance of the object.
            </summary>
        </member>
        <member name="P:Csla.Web.InsertObjectArgs.RowsAffected">
            <summary>
            Gets or sets the number of rows affected
            while handling this event.
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            The code handling the event should set this
            value to indicate the number of rows affected
            by the operation.
            </remarks>
        </member>
        <member name="P:Csla.Web.InsertObjectArgs.Values">
            <summary>
            The list of data values entered by the user.
            </summary>
            <remarks>It is up to the event handler in the
            web page to take the list of values, put them
            into a business object and to save that object
            into the database.</remarks>
        </member>
        <member name="M:Csla.Validation.AsyncRuleMethod.ToString">
            <summary>
            Returns the name of the method implementing the rule
            and the property, field or column name to which the
            rule applies.
            </summary>
        </member>
        <member name="M:Csla.Validation.AsyncRuleMethod.#ctor(Csla.Validation.AsyncRuleHandler,Csla.Validation.AsyncRuleArgs,Csla.Validation.RuleSeverity)">
            <summary>
            Creates and initializes the rule.
            </summary>
            <param name="handler">The address of the method implementing the rule.</param>
            <param name="args">A RuleArgs object.</param>
            <param name="severity">Severity of the rule.</param>
        </member>
        <member name="M:Csla.Validation.AsyncRuleMethod.#ctor(Csla.Validation.AsyncRuleHandler,Csla.Validation.AsyncRuleArgs,System.Int32)">
            <summary>
            Creates and initializes the rule.
            </summary>
            <param name="handler">The address of the method implementing the rule.</param>
            <param name="args">A RuleArgs object.</param>
            <param name="priority">Priority of the rule.</param>
        </member>
        <member name="M:Csla.Validation.AsyncRuleMethod.Csla#Validation#IRuleMethod#Invoke(System.Object)">
            <summary>
            You must call the IAsyncRuleMethod overload of Invoke.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Validation.AsyncRuleMethod.Invoke(System.Object,Csla.Validation.AsyncRuleCompleteHandler)">
            <summary>
            Invokes the asynchronous rule to validate the data.
            </summary>
            <returns>
            <see langword="true" /> if the data is valid, 
            <see langword="false" /> if the data is invalid.
            </returns>
        </member>
        <member name="P:Csla.Validation.AsyncRuleMethod.RuleName">
            <summary>
            Gets the name of the rule.
            </summary>
            <remarks>
            The rule's name must be unique and is used
            to identify a broken rule in the BrokenRules
            collection.
            </remarks>
        </member>
        <member name="P:Csla.Validation.AsyncRuleMethod.Csla#Validation#IRuleMethod#RuleArgs">
            <summary>
            Create a temporary args object that
            just contains the property name. This
            should only occur if the async rule
            method throws an unhandled exception,
            which shouldn't really ever happen.
            </summary>
        </member>
        <member name="T:Csla.Serialization.ISerializationFormatter">
            <summary>
            Defines an object that can serialize and deserialize
            object graphs.
            </summary>
        </member>
        <member name="M:Csla.Serialization.ISerializationFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Converts a serialization stream into an
            object graph.
            </summary>
            <param name="serializationStream">
            Byte stream containing the serialized data.</param>
            <returns>A deserialized object graph.</returns>
        </member>
        <member name="M:Csla.Serialization.ISerializationFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Converts an object graph into a byte stream.
            </summary>
            <param name="serializationStream">
            Stream that will contain the the serialized data.</param>
            <param name="graph">Object graph to be serialized.</param>
        </member>
        <member name="T:Csla.Data.SafeDataReader">
            <summary>
            This is a DataReader that 'fixes' any null values before
            they are returned to our business code.
            </summary>
        </member>
        <member name="M:Csla.Data.SafeDataReader.#ctor(System.Data.IDataReader)">
            <summary>
            Initializes the SafeDataReader object to use data from
            the provided DataReader object.
            </summary>
            <param name="dataReader">The source DataReader object containing the data.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetString(System.String)">
            <summary>
            Gets a string value from the datareader.
            </summary>
            <remarks>
            Returns empty string for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetString(System.Int32)">
            <summary>
            Gets a string value from the datareader.
            </summary>
            <remarks>
            Returns empty string for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetValue(System.String)">
            <summary>
            Gets a value of type <see cref="T:System.Object"/> from the datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetValue(System.Int32)">
            <summary>
            Gets a value of type <see cref="T:System.Object"/> from the datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetInt32(System.String)">
            <summary>
            Gets an integer from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetInt32(System.Int32)">
            <summary>
            Gets an integer from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetDouble(System.String)">
            <summary>
            Gets a double from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetDouble(System.Int32)">
            <summary>
            Gets a double from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetSmartDate(System.String)">
            <summary>
            Gets a <see cref="T:Csla.SmartDate"/> from the datareader.
            </summary>
            <remarks>
            A null is converted into min possible date
            See Chapter 5 for more details on the SmartDate class.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetSmartDate(System.Int32)">
            <summary>
            Gets a <see cref="T:Csla.SmartDate"/> from the datareader.
            </summary>
            <remarks>
            A null is converted into the min possible date
            See Chapter 5 for more details on the SmartDate class.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetSmartDate(System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:Csla.SmartDate"/> from the datareader.
            </summary>
            <remarks>
            A null is converted into either the min or max possible date
            depending on the MinIsEmpty parameter. See Chapter 5 for more
            details on the SmartDate class.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
            <param name="minIsEmpty">
            A flag indicating whether the min or max 
            value of a data means an empty date.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetSmartDate(System.Int32,System.Boolean)">
            <summary>
            Gets a <see cref="T:Csla.SmartDate"/> from the datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
            <param name="minIsEmpty">
            A flag indicating whether the min or max 
            value of a data means an empty date.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetGuid(System.String)">
            <summary>
            Gets a Guid value from the datareader.
            </summary>
            <remarks>
            Returns Guid.Empty for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetGuid(System.Int32)">
            <summary>
            Gets a Guid value from the datareader.
            </summary>
            <remarks>
            Returns Guid.Empty for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.Read">
            <summary>
            Reads the next row of data from the datareader.
            </summary>
        </member>
        <member name="M:Csla.Data.SafeDataReader.NextResult">
            <summary>
            Moves to the next result set in the datareader.
            </summary>
        </member>
        <member name="M:Csla.Data.SafeDataReader.Close">
            <summary>
            Closes the datareader.
            </summary>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetBoolean(System.String)">
            <summary>
            Gets a boolean value from the datareader.
            </summary>
            <remarks>
            Returns <see langword="false" /> for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets a boolean value from the datareader.
            </summary>
            <remarks>
            Returns <see langword="false" /> for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetByte(System.String)">
            <summary>
            Gets a byte value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetByte(System.Int32)">
            <summary>
            Gets a byte value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetBytes(System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetBytes method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetBytes method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetChar(System.String)">
            <summary>
            Gets a char value from the datareader.
            </summary>
            <remarks>
            Returns Char.MinValue for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetChar(System.Int32)">
            <summary>
            Gets a char value from the datareader.
            </summary>
            <remarks>
            Returns Char.MinValue for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetChars(System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetChars method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetChars method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetData(System.String)">
            <summary>
            Invokes the GetData method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetData(System.Int32)">
            <summary>
            Invokes the GetData method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetDataTypeName(System.String)">
            <summary>
            Invokes the GetDataTypeName method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Invokes the GetDataTypeName method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetDateTime(System.String)">
            <summary>
            Gets a date value from the datareader.
            </summary>
            <remarks>
            Returns DateTime.MinValue for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets a date value from the datareader.
            </summary>
            <remarks>
            Returns DateTime.MinValue for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetDecimal(System.String)">
            <summary>
            Gets a decimal value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets a decimal value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetFieldType(System.String)">
            <summary>
            Invokes the GetFieldType method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetFieldType(System.Int32)">
            <summary>
            Invokes the GetFieldType method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetFloat(System.String)">
            <summary>
            Gets a Single value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetFloat(System.Int32)">
            <summary>
            Gets a Single value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetInt16(System.String)">
            <summary>
            Gets a Short value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetInt16(System.Int32)">
            <summary>
            Gets a Short value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetInt64(System.String)">
            <summary>
            Gets a Long value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetInt64(System.Int32)">
            <summary>
            Gets a Long value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetName(System.Int32)">
            <summary>
            Invokes the GetName method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetOrdinal(System.String)">
            <summary>
            Gets an ordinal value from the datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetSchemaTable">
            <summary>
            Invokes the GetSchemaTable method of the underlying datareader.
            </summary>
        </member>
        <member name="M:Csla.Data.SafeDataReader.GetValues(System.Object[])">
            <summary>
            Invokes the GetValues method of the underlying datareader.
            </summary>
            <param name="values">An array of System.Object to
            copy the values into.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.IsDBNull(System.Int32)">
            <summary>
            Invokes the IsDBNull method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.IsDBNull(System.String)">
            <summary>
            Invokes the IsDBNull method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True if called by
            the public Dispose method.</param>
        </member>
        <member name="M:Csla.Data.SafeDataReader.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:Csla.Data.SafeDataReader.Finalize">
            <summary>
            Object finalizer.
            </summary>
        </member>
        <member name="P:Csla.Data.SafeDataReader.DataReader">
            <summary>
            Get a reference to the underlying data reader
            object that actually contains the data from
            the data source.
            </summary>
        </member>
        <member name="P:Csla.Data.SafeDataReader.Depth">
            <summary>
            Returns the depth property value from the datareader.
            </summary>
        </member>
        <member name="P:Csla.Data.SafeDataReader.FieldCount">
            <summary>
            Returns the FieldCount property from the datareader.
            </summary>
        </member>
        <member name="P:Csla.Data.SafeDataReader.IsClosed">
            <summary>
            Returns the IsClosed property value from the datareader.
            </summary>
        </member>
        <member name="P:Csla.Data.SafeDataReader.Item(System.String)">
            <summary>
            Returns a value from the datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="P:Csla.Data.SafeDataReader.Item(System.Int32)">
            <summary>
            Returns a value from the datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="P:Csla.Data.SafeDataReader.RecordsAffected">
            <summary>
            Returns the RecordsAffected property value from the underlying datareader.
            </summary>
        </member>
        <member name="T:Csla.RunLocalAttribute">
            <summary>
            Marks a DataPortal_XYZ method to
            be run on the client even if the server-side
            DataPortal is configured for remote use.
            </summary>
        </member>
        <member name="T:Csla.Silverlight.Security.WindowsIdentity">
            <summary>
            Base class to simplify the retrieval of Windows identity
            information from a Windows server to a 
            CSLA .NET for Silverlight client.
            </summary>
        </member>
        <member name="M:Csla.Silverlight.Security.WindowsIdentity.#ctor">
            <summary>
            Creates an instance of the class.
            </summary>
        </member>
        <member name="M:Csla.Silverlight.Security.WindowsIdentity.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method invoked when the object is deserialized.
            </summary>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Csla.Silverlight.Security.WindowsIdentity.PopulateWindowsIdentity">
            <summary>
            Retrieves identity and role information from the currently
            logged in Windows user.
            </summary>
        </member>
        <member name="M:Csla.Silverlight.Security.WindowsIdentity.IsInRole(System.String)">
            <summary>
            Returns a value indicating whether the current user
            is in the specified role.
            </summary>
            <param name="role">Role to check.</param>
            <returns></returns>
        </member>
        <member name="P:Csla.Silverlight.Security.WindowsIdentity.Roles">
            <summary>
            Gets or sets the list of roles for this user.
            </summary>
        </member>
        <member name="P:Csla.Silverlight.Security.WindowsIdentity.AuthenticationType">
            <summary>
            Returns the authentication type for this identity.
            Always returns Windows.
            </summary>
        </member>
        <member name="P:Csla.Silverlight.Security.WindowsIdentity.IsAuthenticated">
            <summary>
            Returns a value indicating whether this identity
            represents an authenticated user.
            </summary>
        </member>
        <member name="P:Csla.Silverlight.Security.WindowsIdentity.Name">
            <summary>
            Returns the name of the user.
            </summary>
        </member>
        <member name="T:Csla.Core.FieldManager.FieldData`1">
            <summary>
            Contains a field value and related metadata.
            </summary>
            <typeparam name="T">Type of field value contained.</typeparam>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldData`1.#ctor(System.String)">
            <summary>
            Creates a new instance of the object.
            </summary>
            <param name="name">
            Name of the field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldData`1.MarkClean">
            <summary>
            Marks the field as unchanged.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldData`1.OnUnhandledAsyncException(Csla.Core.ErrorEventArgs)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="error">Exception that occurred on the background thread.</param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldData`1.OnUnhandledAsyncException(System.Object,System.Exception)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="originalSender">Original source of the event.</param>
            <param name="error">Exception that occurred on the background thread.</param>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldData`1.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldData`1.Value">
            <summary>
            Gets or sets the value of the field.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldData`1.IsSelfDirty">
            <summary>
            Gets a value indicating whether the field
            has been changed.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldData`1.IsDirty">
            <summary>
            Gets a value indicating whether the field
            has been changed.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldData`1.IsValid">
            <summary>
            Gets a value indicating whether this field
            is considered valid.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldData`1.IsBusy">
            <summary>
            Gets a value indicating whether this object or
            any of its child objects are busy.
            </summary>
        </member>
        <member name="E:Csla.Core.FieldManager.FieldData`1.UnhandledAsyncException">
            <summary>
            Event indicating that an exception occurred on
            a background thread.
            </summary>
        </member>
        <member name="T:Csla.C5.EqualityComparer`1">
            <summary>
            Utility class for building default generic equalityComparers.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Csla.C5.EqualityComparer`1.Default">
            <summary>
            A default generic equality comparer for type T. The procedure is as follows:
            <list>
            <item>If T is a primitive type (char, sbyte, byte, short, ushort, int, uint, float, double, decimal), 
            the equalityComparer will be a standard equalityComparer for that type</item>
            <item>If the actual generic argument T implements the generic interface
            <see cref="T:C5.ISequenced`1"/> for some value W of its generic parameter T,
            the equalityComparer will be <see cref="T:C5.SequencedCollectionEqualityComparer`2"/></item>
            <item>If the actual generic argument T implements 
            <see cref="T:C5.ICollection`1"/> for some value W of its generic parameter T,
            the equalityComparer will be <see cref="T:C5.UnsequencedCollectionEqualityComparer`2"/></item>
            <item>If T is a type implementing <see cref="T:C5.IEquatable`1"/>, the equalityComparer
            will be <see cref="T:C5.EquatableEqualityComparer`1"/></item>
            <item>If T is a type not implementing <see cref="T:C5.IEquatable`1"/>, the equalityComparer
            will be <see cref="T:C5.NaturalEqualityComparer`1"/> </item>
            </list>   
            The <see cref="T:C5.IEqualityComparer`1"/> object is constructed when this class is initialised, i.e. 
            its static constructors called. Thus, the property will be the same object 
            for the duration of an invocation of the runtime, but a value serialized in 
            another invocation and deserialized here will not be the same object.
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.NaturalEqualityComparer`1">
            <summary>
            A default item equalityComparer calling through to
            the GetHashCode and Equals methods inherited from System.Object.
            </summary>
        </member>
        <member name="M:Csla.C5.NaturalEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Get the hash code with respect to this item equalityComparer
            </summary>
            <param name="item">The item</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Csla.C5.NaturalEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Check if two items are equal with respect to this item equalityComparer
            </summary>
            <param name="item1">first item</param>
            <param name="item2">second item</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.NaturalEqualityComparer`1.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.EquatableEqualityComparer`1">
            <summary>
            A default equality comparer for a type T that implements System.IEquatable<typeparamref name="T"/>. 
            
            The equality comparer forwards calls to GetHashCode and Equals to the IEquatable methods 
            on T, so Equals(T) is called, not Equals(object). 
            This will save boxing abd unboxing if T is a value type
            and in general saves a runtime type check.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Csla.C5.EquatableEqualityComparer`1.GetHashCode(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.EquatableEqualityComparer`1.Equals(`0,`0)">
            <summary>
            
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.EquatableEqualityComparer`1.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.ReferenceEqualityComparer`1">
            <summary>
            A equalityComparer for a reference type that uses reference equality for equality and the hash code from object as hash code.
            </summary>
            <typeparam name="T">The item type. Must be a reference type.</typeparam>
        </member>
        <member name="M:Csla.C5.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <summary>
            
            </summary>
            <param name="i1"></param>
            <param name="i2"></param>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.ReferenceEqualityComparer`1.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.ComparerZeroHashCodeEqualityComparer`1">
            <summary>
            An equalityComparer compatible with a given comparer. All hash codes are 0, 
            meaning that anything based on hash codes will be quite inefficient.
            <para><b>Note: this will give a new EqualityComparer each time created!</b></para>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Csla.C5.ComparerZeroHashCodeEqualityComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a trivial <see cref="T:C5.IEqualityComparer`1"/> compatible with the 
            <see cref="T:C5.IComparer`1"/> <code>comparer</code>
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Csla.C5.ComparerZeroHashCodeEqualityComparer`1.GetHashCode(`0)">
            <summary>
            A trivial, inefficient hash fuction. Compatible with any equality relation.
            </summary>
            <param name="item"></param>
            <returns>0</returns>
        </member>
        <member name="M:Csla.C5.ComparerZeroHashCodeEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Equality of two items as defined by the comparer.
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.SequencedCollectionEqualityComparer`2">
            <summary>
            Prototype for a sequenced equalityComparer for something (T) that implements ISequenced[W].
            This will use ISequenced[W] specific implementations of the equality comparer operations.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="W"></typeparam>
        </member>
        <member name="M:Csla.C5.SequencedCollectionEqualityComparer`2.GetHashCode(`0)">
            <summary>
            Get the hash code with respect to this sequenced equalityComparer
            </summary>
            <param name="collection">The collection</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Csla.C5.SequencedCollectionEqualityComparer`2.Equals(`0,`0)">
            <summary>
            Check if two items are equal with respect to this sequenced equalityComparer
            </summary>
            <param name="collection1">first collection</param>
            <param name="collection2">second collection</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.SequencedCollectionEqualityComparer`2.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.UnsequencedCollectionEqualityComparer`2">
            <summary>
            Prototype for an unsequenced equalityComparer for something (T) that implements ICollection[W]
            This will use ICollection[W] specific implementations of the equalityComparer operations
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="W"></typeparam>
        </member>
        <member name="M:Csla.C5.UnsequencedCollectionEqualityComparer`2.GetHashCode(`0)">
            <summary>
            Get the hash code with respect to this unsequenced equalityComparer
            </summary>
            <param name="collection">The collection</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Csla.C5.UnsequencedCollectionEqualityComparer`2.Equals(`0,`0)">
            <summary>
            Check if two collections are equal with respect to this unsequenced equalityComparer
            </summary>
            <param name="collection1">first collection</param>
            <param name="collection2">second collection</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:Csla.C5.UnsequencedCollectionEqualityComparer`2.Default">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.ApplicationContext">
            <summary>
            Provides consistent context information between the client
            and server DataPortal objects. 
            </summary>
        </member>
        <member name="M:Csla.ApplicationContext.Clear">
            <summary>
            Clears all context collections.
            </summary>
        </member>
        <member name="P:Csla.ApplicationContext.User">
            <summary>
            Get or set the current <see cref="T:System.Security.Principal.IPrincipal"/>
            object representing the user's identity.
            </summary>
            <remarks>
            This is discussed in Chapter 5. When running
            under IIS the HttpContext.Current.User value
            is used, otherwise the current Thread.CurrentPrincipal
            value is used.
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.LocalContext">
            <summary>
            Returns the application-specific context data that
            is local to the current AppDomain.
            </summary>
            <remarks>
            <para>
            The return value is a HybridDictionary. If one does
            not already exist, and empty one is created and returned.
            </para><para>
            Note that data in this context is NOT transferred to and from
            the client and server.
            </para>
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.ClientContext">
            <summary>
            Returns the application-specific context data provided
            by the client.
            </summary>
            <remarks>
            <para>
            The return value is a HybridDictionary. If one does
            not already exist, and empty one is created and returned.
            </para><para>
            Note that data in this context is transferred from
            the client to the server. No data is transferred from
            the server to the client.
            </para><para>
            This property is thread safe in a Windows client
            setting and on an application server. It is not guaranteed
            to be thread safe within the context of an ASP.NET
            client setting (i.e. in your ASP.NET UI).
            </para>
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.GlobalContext">
            <summary>
            Returns the application-specific context data shared
            on both client and server.
            </summary>
            <remarks>
            <para>
            The return value is a HybridDictionary. If one does
            not already exist, and empty one is created and returned.
            </para><para>
            Note that data in this context is transferred to and from
            the client and server. Any objects or data in this context
            will be transferred bi-directionally across the network.
            </para>
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.AuthenticationType">
            <summary>
            Returns the authentication type being used by the
            CSLA .NET framework.
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            This value is read from the application configuration
            file with the key value "CslaAuthentication". The value
            "Windows" indicates CSLA .NET should use Windows integrated
            (or AD) security. Any other value indicates the use of
            custom security derived from BusinessPrincipalBase.
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.DataPortalProxy">
            <summary>
            Gets or sets the full type name (or 'Local') of
            the data portal proxy object to be used when
            communicating with the data portal server.
            </summary>
            <value>Fully qualified assembly/type name of the proxy class
            or 'Local'.</value>
            <returns></returns>
            <remarks>
            <para>
            If this value is empty or null, a new value is read from the 
            application configuration file with the key value 
            "CslaDataPortalProxy".
            </para><para>
            The proxy class must implement Csla.Server.IDataPortalServer.
            </para><para>
            The value "Local" is a shortcut to running the DataPortal
            "server" in the client process.
            </para><para>
            Other built-in values include:
            <list>
            <item>
            <term>Csla,Csla.DataPortalClient.RemotingProxy</term>
            <description>Use .NET Remoting to communicate with the server</description>
            </item>
            <item>
            <term>Csla,Csla.DataPortalClient.EnterpriseServicesProxy</term>
            <description>Use Enterprise Services (DCOM) to communicate with the server</description>
            </item>
            <item>
            <term>Csla,Csla.DataPortalClient.WebServicesProxy</term>
            <description>Use Web Services (asmx) to communicate with the server</description>
            </item>
            </list>
            Each proxy type does require that the DataPortal server be hosted using the appropriate
            technology. For instance, Web Services and Remoting should be hosted in IIS, while
            Enterprise Services must be hosted in COM+.
            </para>
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.DataPortalUrl">
            <summary>
            Returns the URL for the DataPortal server.
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            This value is read from the application configuration
            file with the key value "CslaDataPortalUrl". 
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.IsInRoleProvider">
            <summary>
            Gets a fully qualified name for a class that implements
            the IsInRole() behavior used for authorization.
            </summary>
            <returns>
            Returns a value in the form
            "Namespace.Class, Assembly".
            </returns>
            <remarks>
            The default is to use a simple IsInRole() call against
            the current principal. If another fylly qualified class name 
            and method is supplied it must conform to the IsInRoleProvider 
            delegate. See also IsInRoleProviderName that must give the methodname 
            that implements the IsInRole method.
            </remarks>
            <seealso cref="P:Csla.ApplicationContext.IsInRoleMethodName"/>
        </member>
        <member name="P:Csla.ApplicationContext.IsInRoleMethodName">
            <summary>
            Gets the method name that implements the IsInRole() behavior
             used for authorization.
            </summary>
            <returns>
            Returns a value in the form
            "MethodName".
            </returns>
        </member>
        <member name="P:Csla.ApplicationContext.AutoCloneOnUpdate">
            <summary>
            Gets a value indicating whether objects should be
            automatically cloned by the data portal Update()
            method when using a local data portal configuration.
            </summary>
        </member>
        <member name="P:Csla.ApplicationContext.SerializationFormatter">
            <summary>
            Gets the serialization formatter type used by CSLA .NET
            for all explicit object serialization (such as cloning,
            n-level undo, etc).
            </summary>
            <remarks>
            <para>
            If you use the DataContract and DataMember attributes
            to specify how your objects should be serialized then
            you <b>must</b> change this setting to use the
            <see cref="T:System.Runtime.Serialization.NetDataContractSerializer">
            NetDataContractSerializer</see> option. The default is to
            use the standard Microsoft .NET 
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </para>
            <para>
            This setting does <b>not affect</b> the serialization
            formatters used by the various data portal channels.
            </para>
            <para>
            If you are using the Remoting, Web Services or 
            Enterprise Services technologies, they will use the
            BinaryFormatter regardless of this setting, and will
            <b>fail to work</b> if you attempt to use the
            DataContract and DataMember attributes when building
            your business objects.
            </para>
            <para>
            If you want to use DataContract and DataMember, and
            you want a remote data portal server, you <b>must</b>
            use the WCF data portal channel, or create your own
            custom channel that uses the
            <see cref="T:System.Runtime.Serialization.NetDataContractSerializer">
            NetDataContractSerializer</see> provided as part of WCF.
            </para>
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.PropertyChangedMode">
            <summary>
            Gets or sets a value specifying how CSLA .NET should
            raise PropertyChanged events.
            </summary>
        </member>
        <member name="P:Csla.ApplicationContext.ExecutionLocation">
            <summary>
            Returns a value indicating whether the application code
            is currently executing on the client or server.
            </summary>
        </member>
        <member name="P:Csla.ApplicationContext.LogicalExecutionLocation">
            <summary>
            Gets a value indicating the logical execution location
            of the currently executing code.
            </summary>
        </member>
        <member name="T:Csla.ApplicationContext.SerializationFormatters">
            <summary>
            Enum representing the serialization formatters
            supported by CSLA .NET.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.SerializationFormatters.BinaryFormatter">
            <summary>
            Use the standard Microsoft .NET
            <see cref="F:Csla.ApplicationContext.SerializationFormatters.BinaryFormatter"/>.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.SerializationFormatters.NetDataContractSerializer">
            <summary>
            Use the Microsoft .NET 3.0
            <see cref="T:System.Runtime.Serialization.NetDataContractSerializer">
            NetDataContractSerializer</see> provided as part of WCF.
            </summary>
        </member>
        <member name="T:Csla.ApplicationContext.ExecutionLocations">
            <summary>
            Enum representing the locations code can execute.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.ExecutionLocations.Client">
            <summary>
            The code is executing on the client.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.ExecutionLocations.Server">
            <summary>
            The code is executing on the application server.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.ExecutionLocations.Silverlight">
            <summary>
            The code is executing on the Silverlight client.
            </summary>
        </member>
        <member name="T:Csla.ApplicationContext.PropertyChangedModes">
            <summary>
            Enum representing the way in which CSLA .NET
            should raise PropertyChanged events.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.PropertyChangedModes.Windows">
            <summary>
            Raise PropertyChanged events as required
            by Windows Forms data binding.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.PropertyChangedModes.Xaml">
            <summary>
            Raise PropertyChanged events as required
            by XAML data binding in WPF.
            </summary>
        </member>
        <member name="T:Csla.ApplicationContext.LogicalExecutionLocations">
            <summary>
            Enum representing the logical execution location
            The setting is set to server when server is execting
            a CRUD opertion, otherwise the setting is always client
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.LogicalExecutionLocations.Client">
            <summary>
            The code is executing on the client.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.LogicalExecutionLocations.Server">
            <summary>
            The code is executing on the server.  This inlcudes
            Local mode execution
            </summary>
        </member>
        <member name="T:Csla.Windows.HostComponentDesigner">
            <summary>
            HostComponentDesigner is an enhanced ComponentDesigner 
            class used for linking a parent container control to a component
            marked with the HostComponentDesigner attribute 
            as a .NET designer service. 
            </summary>
        </member>
        <member name="M:Csla.Windows.HostComponentDesigner.InitializeNewComponent(System.Collections.IDictionary)">
            <summary>
            InitializeNewComponent() overrides the base class InitializeNewComponent() method.  This version of
            InitializeNewComponent() simply runs through the base class InitializeNewComponent functionality then
            if the associated component contains the HostPropertyAttribute attribute the conponent's host property
            is then set to the parent component if the component is a container control.
            </summary>
            <param name="defaultValues">The default values for initialising the new component.</param>
        </member>
        <member name="T:Csla.Web.CslaDataSourceView">
            <summary>
            The object responsible for managing data binding
            to a specific CSLA .NET object.
            </summary>
        </member>
        <member name="M:Csla.Web.CslaDataSourceView.#ctor(Csla.Web.CslaDataSource,System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="owner">The CslaDataSource object
            that owns this view.</param>
            <param name="viewName">The name of the view.</param>
        </member>
        <member name="M:Csla.Web.CslaDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Implements the select behavior for
            the control by raising the 
            <see cref="E:Csla.Web.CslaDataSource.SelectObject"/> event.
            </summary>
            <param name="arguments">Arguments object.</param>
            <returns>The data returned from the select.</returns>
        </member>
        <member name="M:Csla.Web.CslaDataSourceView.ExecuteInsert(System.Collections.IDictionary)">
            <summary>
            Implements the insert behavior for
            the control by raising the 
            <see cref="E:Csla.Web.CslaDataSource.InsertObject"/> event.
            </summary>
            <param name="values">The values from
            the UI that are to be inserted.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Csla.Web.CslaDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Implements the delete behavior for
            the control by raising the 
            <see cref="E:Csla.Web.CslaDataSource.DeleteObject"/> event.
            </summary>
            <param name="keys">The key values from
            the UI that are to be deleted.</param>
            <param name="oldValues">The old values
            from the UI.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Csla.Web.CslaDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Implements the update behavior for
            the control by raising the 
            <see cref="E:Csla.Web.CslaDataSource.UpdateObject"/> event.
            </summary>
            <param name="keys">The key values from the UI
            that identify the object to be updated.</param>
            <param name="values">The values from
            the UI that are to be inserted.</param>
            <param name="oldValues">The old values
            from the UI.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="P:Csla.Web.CslaDataSourceView.TypeAssemblyName">
            <summary>
            Get or set the name of the assembly (no longer used).
            </summary>
            <value>Obsolete - do not use.</value>
        </member>
        <member name="P:Csla.Web.CslaDataSourceView.TypeName">
            <summary>
            Get or set the full type name of the business object
            class to be used as a data source.
            </summary>
            <value>Full type name of the business class.</value>
        </member>
        <member name="P:Csla.Web.CslaDataSourceView.TypeSupportsPaging">
            <summary>
            Get or set a value indicating whether the
            business object data source supports paging.
            </summary>
            <remarks>
            To support paging, the business object
            (collection) must implement 
            <see cref="T:Csla.Core.IReportTotalRowCount"/>.
            </remarks>
        </member>
        <member name="P:Csla.Web.CslaDataSourceView.TypeSupportsSorting">
            <summary>
            Get or set a value indicating whether the
            business object data source supports sorting.
            </summary>
        </member>
        <member name="P:Csla.Web.CslaDataSourceView.CanInsert">
            <summary>
            Gets a value indicating whether the data source can
            insert data.
            </summary>
        </member>
        <member name="P:Csla.Web.CslaDataSourceView.CanDelete">
            <summary>
            Gets a value indicating whether the data source can
            delete data.
            </summary>
        </member>
        <member name="P:Csla.Web.CslaDataSourceView.CanUpdate">
            <summary>
            Gets a value indicating whether the data source can
            update data.
            </summary>
        </member>
        <member name="P:Csla.Web.CslaDataSourceView.CanPage">
            <summary>
            Gets a value indicating whether the data source supports
            paging of the data.
            </summary>
        </member>
        <member name="P:Csla.Web.CslaDataSourceView.CanRetrieveTotalRowCount">
            <summary>
            Gets a value indicating whether the data source can
            retrieve the total number of rows of data. Always
            returns <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Csla.Web.CslaDataSourceView.CanSort">
            <summary>
            Gets a alue indicating whether the data source supports
            sorting of the data. Always returns <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Csla.Validation.RuleMethod">
            <summary>
            Tracks all information for a rule.
            </summary>
        </member>
        <member name="M:Csla.Validation.RuleMethod.ToString">
            <summary>
            Returns the name of the method implementing the rule
            and the property, field or column name to which the
            rule applies.
            </summary>
        </member>
        <member name="M:Csla.Validation.RuleMethod.#ctor(Csla.Validation.RuleHandler,Csla.Validation.RuleArgs)">
            <summary>
            Creates and initializes the rule.
            </summary>
            <param name="handler">The address of the method implementing the rule.</param>
            <param name="args">A RuleArgs object.</param>
        </member>
        <member name="M:Csla.Validation.RuleMethod.#ctor(Csla.Validation.RuleHandler,Csla.Validation.RuleArgs,System.Int32)">
            <summary>
            Creates and initializes the rule.
            </summary>
            <param name="handler">The address of the method implementing the rule.</param>
            <param name="args">A RuleArgs object.</param>
            <param name="priority">
            Priority for processing the rule (smaller numbers have higher priority, default=0).
            </param>
        </member>
        <member name="M:Csla.Validation.RuleMethod.Invoke(System.Object)">
            <summary>
            Invokes the rule to validate the data.
            </summary>
            <returns>
            <see langword="true" /> if the data is valid, 
            <see langword="false" /> if the data is invalid.
            </returns>
        </member>
        <member name="P:Csla.Validation.RuleMethod.Priority">
            <summary>
            Gets the priority of the rule method.
            </summary>
            <value>The priority value</value>
            <remarks>
            Priorities are processed in descending
            order, so priority 0 is processed
            before priority 1, etc.
            </remarks>
        </member>
        <member name="P:Csla.Validation.RuleMethod.RuleName">
            <summary>
            Gets the name of the rule.
            </summary>
            <remarks>
            The rule's name must be unique and is used
            to identify a broken rule in the BrokenRules
            collection.
            </remarks>
        </member>
        <member name="P:Csla.Validation.RuleMethod.RuleArgs">
            <summary>
            Returns the name of the field, property or column
            to which the rule applies.
            </summary>
        </member>
        <member name="T:Csla.Validation.RuleMethod`2">
            <summary>
            Tracks all information for a rule.
            </summary>
            <typeparam name="T">Type of the target object.</typeparam>
            <typeparam name="R">Type of the arguments parameter.</typeparam>
        </member>
        <member name="M:Csla.Validation.RuleMethod`2.ToString">
            <summary>
            Returns the name of the method implementing the rule
            and the property, field or column name to which the
            rule applies.
            </summary>
        </member>
        <member name="M:Csla.Validation.RuleMethod`2.#ctor(Csla.Validation.RuleHandler{`0,`1},`1)">
            <summary>
            Creates and initializes the rule.
            </summary>
            <param name="handler">The address of the method implementing the rule.</param>
            <param name="args">A RuleArgs object.</param>
        </member>
        <member name="M:Csla.Validation.RuleMethod`2.#ctor(Csla.Validation.RuleHandler{`0,`1},`1,System.Int32)">
            <summary>
            Creates and initializes the rule.
            </summary>
            <param name="handler">The address of the method implementing the rule.</param>
            <param name="args">A RuleArgs object.</param>
            <param name="priority">
            Priority for processing the rule (smaller numbers have higher priority, default=0).
            </param>
        </member>
        <member name="M:Csla.Validation.RuleMethod`2.Csla#Validation#IRuleMethod#Invoke(System.Object)">
            <summary>
            Invokes the rule to validate the data.
            </summary>
            <returns>True if the data is valid, False if the data is invalid.</returns>
        </member>
        <member name="M:Csla.Validation.RuleMethod`2.Invoke(`0)">
            <summary>
            Invokes the rule to validate the data.
            </summary>
            <returns>
            <see langword="true" /> if the data is valid, 
            <see langword="false" /> if the data is invalid.
            </returns>
        </member>
        <member name="P:Csla.Validation.RuleMethod`2.Priority">
            <summary>
            Gets the priority of the rule method.
            </summary>
            <value>The priority value</value>
            <remarks>
            Priorities are processed in descending
            order, so priority 0 is processed
            before priority 1, etc.
            </remarks>
        </member>
        <member name="P:Csla.Validation.RuleMethod`2.RuleName">
            <summary>
            Gets the name of the rule.
            </summary>
            <remarks>
            The rule's name must be unique and is used
            to identify a broken rule in the BrokenRules
            collection.
            </remarks>
        </member>
        <member name="P:Csla.Validation.RuleMethod`2.Csla#Validation#IRuleMethod#RuleArgs">
            <summary>
            Returns the name of the field, property or column
            to which the rule applies.
            </summary>
        </member>
        <member name="P:Csla.Validation.RuleMethod`2.RuleArgs">
            <summary>
            Returns the name of the field, property or column
            to which the rule applies.
            </summary>
        </member>
        <member name="T:Csla.Validation.AsyncRuleResult">
            <summary>
            Object containing the results from 
            an asynchronous validation rule method.
            </summary>
        </member>
        <member name="M:Csla.Validation.AsyncRuleResult.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="P:Csla.Validation.AsyncRuleResult.Result">
            <summary>
            Result value for the validation
            rule method, where true indicates
            the rule was not violated.
            </summary>
        </member>
        <member name="P:Csla.Validation.AsyncRuleResult.Description">
            <summary>
            Set by the rule handler method to describe the broken
            rule.
            </summary>
            <value>A human-readable description of
            the broken rule.</value>
            <remarks>
            Setting this property only has an effect if
            the rule method returns <see langword="false" />.
            </remarks>
        </member>
        <member name="P:Csla.Validation.AsyncRuleResult.Severity">
            <summary>
            Gets or sets the severity of the broken rule.
            </summary>
            <value>The severity of the broken rule.</value>
            <remarks>
            Setting this property only has an effect if
            the rule method returns <see langword="false" />.
            </remarks>
        </member>
        <member name="T:Csla.Server.TransactionalDataPortal">
            <summary>
            Implements the server-side Serviced 
            DataPortal described in Chapter 4.
            </summary>
        </member>
        <member name="M:Csla.Server.TransactionalDataPortal.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Wraps a Create call in a TransactionScope
            </summary>
            <remarks>
            This method delegates to 
            <see cref="T:Csla.Server.SimpleDataPortal">SimpleDataPortal</see>
            but wraps that call within a
            <see cref="T:System.Transactions.TransactionScope">TransactionScope</see>
            to provide transactional support via
            System.Transactions.
            </remarks>
            <param name="objectType">A <see cref="T:System.Type">Type</see> object
            indicating the type of business object to be created.</param>
            <param name="criteria">A custom criteria object providing any
            extra information that may be required to properly create
            the object.</param>
            <param name="context">Context data from the client.</param>
            <returns>A populated business object.</returns>
        </member>
        <member name="M:Csla.Server.TransactionalDataPortal.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by the client-side DataProtal to retrieve an object.
            </summary>
            <remarks>
            This method delegates to 
            <see cref="T:Csla.Server.SimpleDataPortal">SimpleDataPortal</see>
            but wraps that call within a
            <see cref="T:System.Transactions.TransactionScope">TransactionScope</see>
            to provide transactional support via
            System.Transactions.
            </remarks>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Object-specific criteria.</param>
            <param name="context">Object containing context data from client.</param>
            <returns>A populated business object.</returns>
        </member>
        <member name="M:Csla.Server.TransactionalDataPortal.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by the client-side DataPortal to update an object.
            </summary>
            <remarks>
            This method delegates to 
            <see cref="T:Csla.Server.SimpleDataPortal">SimpleDataPortal</see>
            but wraps that call within a
            <see cref="T:System.Transactions.TransactionScope">TransactionScope</see>
            to provide transactional support via
            System.Transactions.
            </remarks>
            <param name="obj">A reference to the object being updated.</param>
            <param name="context">Context data from the client.</param>
            <returns>A reference to the newly updated object.</returns>
        </member>
        <member name="M:Csla.Server.TransactionalDataPortal.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by the client-side DataPortal to delete an object.
            </summary>
            <remarks>
            This method delegates to 
            <see cref="T:Csla.Server.SimpleDataPortal">SimpleDataPortal</see>
            but wraps that call within a
            <see cref="T:System.Transactions.TransactionScope">TransactionScope</see>
            to provide transactional support via
            System.Transactions.
            </remarks>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Object-specific criteria.</param>
            <param name="context">Context data from the client.</param>
        </member>
        <member name="T:Csla.Server.DataPortalResult">
            <summary>
            Returns data from the server-side DataPortal to the 
            client-side DataPortal. Intended for internal CSLA .NET
            use only.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalResult.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalResult.#ctor(System.Object)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="returnObject">Object to return as part
            of the result.</param>
        </member>
        <member name="P:Csla.Server.DataPortalResult.ReturnObject">
            <summary>
            The business object being returned from
            the server.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalResult.GlobalContext">
            <summary>
            The global context being returned from
            the server.
            </summary>
        </member>
        <member name="T:Csla.Server.DataPortal">
            <summary>
            Implements the server-side DataPortal 
            message router as discussed
            in Chapter 4.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortal.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortal.#ctor(System.String)">
            <summary>
            This construcor accepts the App Setting name for the Csla Authorization Provider,
            therefore getting the provider type from configuration file
            </summary>
            <param name="cslaAuthorizationProviderAppSettingName"></param>
        </member>
        <member name="M:Csla.Server.DataPortal.#ctor(System.Type)">
            <summary>
            This constructor accepts the Authorization Provider Type as a parameter.
            </summary>
            <param name="authProviderType"></param>
        </member>
        <member name="M:Csla.Server.DataPortal.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.DataPortal.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.DataPortal.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.DataPortal.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Delete a business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="P:Csla.Server.DataPortal.Authorizer">
            <summary>
            Gets or sets a reference to the current authorizer.
            </summary>
        </member>
        <member name="T:Csla.Server.DataPortal.NullAuthorizer">
            <summary>
            Default implementation of the authorizer that
            allows all data portal calls to pass.
            </summary>
        </member>
        <member name="T:Csla.Server.IAuthorizeDataPortal">
            <summary>
            Interface to be implemented by a custom
            authorization provider.
            </summary>
        </member>
        <member name="M:Csla.Server.IAuthorizeDataPortal.Authorize(Csla.Server.AuthorizeRequest)">
            <summary>
            Implement this method to perform custom
            authorization on every data portal call.
            </summary>
            <param name="clientRequest">
            Object containing information about the client request.
            </param>
        </member>
        <member name="M:Csla.Server.DataPortal.NullAuthorizer.Authorize(Csla.Server.AuthorizeRequest)">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="clientRequest">
            Client request information.
            </param>
        </member>
        <member name="T:Csla.Reflection.CallMethodException">
            <summary>
            This exception is returned from the 
            CallMethod method in the server-side DataPortal
            and contains the exception thrown by the
            underlying business object method that was
            being invoked.
            </summary>
        </member>
        <member name="M:Csla.Reflection.CallMethodException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Message text describing the exception.</param>
            <param name="ex">Inner exception object.</param>
        </member>
        <member name="M:Csla.Reflection.CallMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the object for deserialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialiation context.</param>
        </member>
        <member name="M:Csla.Reflection.CallMethodException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the object.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="P:Csla.Reflection.CallMethodException.StackTrace">
            <summary>
            Get the stack trace from the original
            exception.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Csla.Server.Hosts.WcfChannel.CreateRequest">
            <summary>
            Request message for creating
            a new business object.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.CreateRequest.#ctor(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">Data portal context from client.</param>
        </member>
        <member name="P:Csla.Server.Hosts.WcfChannel.CreateRequest.ObjectType">
            <summary>
            Type of business object to create.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WcfChannel.CreateRequest.Criteria">
            <summary>
            Criteria object describing business object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WcfChannel.CreateRequest.Context">
            <summary>
            Data portal context from client.
            </summary>
        </member>
        <member name="T:Csla.Server.ObjectFactoryAttribute">
            <summary>
            Specifies that the data portal
            should invoke a factory object rather than
            the business object.
            </summary>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <remarks>
            The method names default to Create, Fetch,
            Update and Delete.
            </remarks>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <param name="createMethod">
            Name of the method to call for a create operation.</param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
            <param name="updateMethod">
            Name of the method to call for a update operation.</param>
            <param name="deleteMethod">
            Name of the method to call for a delete operation.</param>
        </member>
        <member name="P:Csla.Server.ObjectFactoryAttribute.FactoryTypeName">
            <summary>
            Assembly qualified type name of the factory object.
            </summary>
            <remarks>
            Factory class must have a parameterless 
            default constructor.
            </remarks>
        </member>
        <member name="P:Csla.Server.ObjectFactoryAttribute.CreateMethodName">
            <summary>
            Name of the method to call for a create operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Server.ObjectFactoryAttribute.FetchMethodName">
            <summary>
            Name of the method to call for a fetch operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Server.ObjectFactoryAttribute.UpdateMethodName">
            <summary>
            Name of the method to call for a update operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Server.ObjectFactoryAttribute.DeleteMethodName">
            <summary>
            Name of the method to call for a delete operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="T:Csla.Server.DataPortalSelector">
            <summary>
            Selects the appropriate data portal implementation
            to invoke based on the object and configuration.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalSelector.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.DataPortalSelector.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.DataPortalSelector.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.DataPortalSelector.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Delete a business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="T:Csla.Serialization.Mobile.NullPlaceholder">
            <summary>
            Placeholder for null child objects.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.NullPlaceholder.#ctor">
            <summary>
            Creates an instance of the type.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.NullPlaceholder.GetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its data. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.NullPlaceholder.GetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its child references. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the serialization.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.NullPlaceholder.SetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should be deserialized. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.NullPlaceholder.SetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should deserialize its child references. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the deserialization.
            </param>
        </member>
        <member name="T:Csla.Data.DataServiceContextManager`1">
            <summary>
            Provides an automated way to reuse 
            an ADO.NET Data Services context object within 
            the context of a single data portal operation.
            </summary>
            <typeparam name="C">
            Type of context object to use.
            </typeparam>
        </member>
        <member name="M:Csla.Data.DataServiceContextManager`1.GetManager(System.Uri)">
            <summary>
            Gets the DataServiceContext object for the 
            specified URI.
            </summary>
            <param name="path">
            URI to the server-side services.
            </param>
        </member>
        <member name="M:Csla.Data.DataServiceContextManager`1.GetEntities``1">
            <summary>
            Gets a list of the entities of the
            specified type from the context.
            </summary>
            <typeparam name="T">
            Type of entity.
            </typeparam>
            <returns></returns>
        </member>
        <member name="M:Csla.Data.DataServiceContextManager`1.GetEntity``1(System.String,System.Object)">
            <summary>
            Gets a list of the entities by key.
            </summary>
            <typeparam name="T">
            Type of entity.
            </typeparam>
            <param name="keyPropertyName">
            Name of the key property.
            </param>
            <param name="keyPropertyValue">
            Key value to match.
            </param>
        </member>
        <member name="P:Csla.Data.DataServiceContextManager`1.DataServiceContext">
            <summary>
            Gets the DataServiceContext object.
            </summary>
        </member>
        <member name="T:Csla.Core.BusinessBase">
            <summary>
            This is the non-generic base class from which most
            business objects will be derived.
            </summary>
            <remarks>
            See Chapter 3 for details.
            </remarks>
        </member>
        <member name="T:Csla.Core.UndoableBase">
            <summary>
            Implements n-level undo capabilities as
            described in Chapters 2 and 3.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.CopyingState">
            <summary>
            This method is invoked before the CopyState
            operation begins.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.CopyStateComplete">
            <summary>
            This method is invoked after the CopyState
            operation is complete.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.CopyState(System.Int32)">
            <summary>
            Copies the state of the object and places the copy
            onto the state stack.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.UndoChangesComplete">
            <summary>
            This method is invoked before the UndoChanges
            operation begins.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.UndoingChanges">
            <summary>
            This method is invoked after the UndoChanges
            operation is complete.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.UndoChanges(System.Int32)">
            <summary>
            Restores the object's state to the most recently
            copied values from the state stack.
            </summary>
            <remarks>
            Restores the state of the object to its
            previous value by taking the data out of
            the stack and restoring it into the fields
            of the object.
            </remarks>
        </member>
        <member name="M:Csla.Core.UndoableBase.AcceptingChanges">
            <summary>
            This method is invoked before the AcceptChanges
            operation begins.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.AcceptChangesComplete">
            <summary>
            This method is invoked after the AcceptChanges
            operation is complete.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.AcceptChanges(System.Int32)">
            <summary>
            Accepts any changes made to the object since the last
            state copy was made.
            </summary>
            <remarks>
            The most recent state copy is removed from the state
            stack and discarded, thus committing any changes made
            to the object's state.
            </remarks>
        </member>
        <member name="M:Csla.Core.UndoableBase.GetFieldName(System.String,System.String)">
            <summary>
            Returns the full name of a field, including
            the containing type name.
            </summary>
            <param name="typeName">Name of the containing type.</param>
            <param name="memberName">Name of the member (field).</param>
        </member>
        <member name="M:Csla.Core.UndoableBase.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Core.UndoableBase.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="P:Csla.Core.UndoableBase.BindingEdit">
            <summary>
            Gets or sets a value indicating whether n-level undo
            was invoked through IEditableObject. FOR INTERNAL
            CSLA .NET USE ONLY!
            </summary>
        </member>
        <member name="P:Csla.Core.UndoableBase.EditLevel">
            <summary>
            Returns the current edit level of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkNew">
            <summary>
            Marks the object as being a new object. This also marks the object
            as being dirty and ensures that it is not marked for deletion.
            </summary>
            <remarks>
            <para>
            Newly created objects are marked new by default. You should call
            this method in the implementation of DataPortal_Update when the
            object is deleted (due to being marked for deletion) to indicate
            that the object no longer reflects data in the database.
            </para><para>
            If you override this method, make sure to call the base
            implementation after executing your new code.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkOld">
            <summary>
            Marks the object as being an old (not new) object. This also
            marks the object as being unchanged (not dirty).
            </summary>
            <remarks>
            <para>
            You should call this method in the implementation of
            DataPortal_Fetch to indicate that an existing object has been
            successfully retrieved from the database.
            </para><para>
            You should call this method in the implementation of 
            DataPortal_Update to indicate that a new object has been successfully
            inserted into the database.
            </para><para>
            If you override this method, make sure to call the base
            implementation after executing your new code.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkDeleted">
            <summary>
            Marks an object for deletion. This also marks the object
            as being dirty.
            </summary>
            <remarks>
            You should call this method in your business logic in the
            case that you want to have the object deleted when it is
            saved to the database.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkDirty">
            <summary>
            Marks an object as being dirty, or changed.
            </summary>
            <remarks>
            <para>
            You should call this method in your business logic any time
            the object's internal data changes. Any time any instance
            variable changes within the object, this method should be called
            to tell CSLA .NET that the object's data has been changed.
            </para><para>
            Marking an object as dirty does two things. First it ensures
            that CSLA .NET will properly save the object as appropriate. Second,
            it causes CSLA .NET to tell Windows Forms data binding that the
            object's data has changed so any bound controls will update to
            reflect the new values.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkDirty(System.Boolean)">
            <summary>
            Marks an object as being dirty, or changed.
            </summary>
            <param name="suppressEvent">
            <see langword="true" /> to supress the PropertyChanged event that is otherwise
            raised to indicate that the object's state has changed.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.PropertyHasChanged">
            <summary>
            Performs processing required when the current
            property has changed.
            </summary>
            <remarks>
            <para>
            This method calls CheckRules(propertyName), MarkDirty and
            OnPropertyChanged(propertyName). MarkDirty is called such
            that no event is raised for IsDirty, so only the specific
            property changed event for the current property is raised.
            </para><para>
            This implementation uses System.Diagnostics.StackTrace to
            determine the name of the current property, and so must be called
            directly from the property to be checked.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.PropertyHasChanged(System.String)">
            <summary>
            Performs processing required when a property
            has changed.
            </summary>
            <param name="propertyName">Name of the property that
            has changed.</param>
            <remarks>
            This method calls CheckRules(propertyName), MarkDirty and
            OnPropertyChanged(propertyName). MarkDirty is called such
            that no event is raised for IsDirty, so only the specific
            property changed event for the current property is raised.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkClean">
            <summary>
            Forces the object's IsDirty flag to <see langword="false" />.
            </summary>
            <remarks>
            This method is normally called automatically and is
            not intended to be called manually.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.AddInstanceAuthorizationRules">
            <summary>
            Override this method to add authorization
            rules for your object's properties.
            </summary>
            <remarks>
            AddInstanceAuthorizationRules is automatically called by CSLA .NET
            when your object should associate per-instance authorization roles
            with its properties.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.AddAuthorizationRules">
            <summary>
            Override this method to add per-type
            authorization rules for your type's properties.
            </summary>
            <remarks>
            AddAuthorizationRules is automatically called by CSLA .NET
            when your object should associate per-type authorization roles
            with its properties.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanReadProperty(System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            calling property.
            </summary>
            <returns><see langword="true" /> if read is allowed.</returns>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanReadProperty(System.String,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            calling property.
            </summary>
            <returns><see langword="true" /> if read is allowed.</returns>
            <param name="propertyName">Name of the property to read.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanReadProperty">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            calling property.
            </summary>
            <returns><see langword="true" /> if read is allowed.</returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanReadProperty(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            specified property.
            </summary>
            <param name="propertyName">Name of the property to read.</param>
            <returns><see langword="true" /> if read is allowed.</returns>
            <remarks>
            <para>
            If a list of allowed roles is provided then only users in those
            roles can read. If no list of allowed roles is provided then
            the list of denied roles is checked.
            </para><para>
            If a list of denied roles is provided then users in the denied
            roles are denied read access. All other users are allowed.
            </para><para>
            If neither a list of allowed nor denied roles is provided then
            all users will have read access.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanWriteProperty(System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to write the
            calling property.
            </summary>
            <returns><see langword="true" /> if write is allowed.</returns>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanWriteProperty(System.String,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to write the
            calling property.
            </summary>
            <returns><see langword="true" /> if write is allowed.</returns>
            <param name="propertyName">Name of the property to write.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanWriteProperty">
            <summary>
            Returns <see langword="true" /> if the user is allowed to write the
            calling property.
            </summary>
            <returns><see langword="true" /> if write is allowed.</returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanWriteProperty(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to write the
            specified property.
            </summary>
            <param name="propertyName">Name of the property to write.</param>
            <returns><see langword="true" /> if write is allowed.</returns>
            <remarks>
            <para>
            If a list of allowed roles is provided then only users in those
            roles can write. If no list of allowed roles is provided then
            the list of denied roles is checked.
            </para><para>
            If a list of denied roles is provided then users in the denied
            roles are denied write access. All other users are allowed.
            </para><para>
            If neither a list of allowed nor denied roles is provided then
            all users will have write access.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanExecuteMethod(System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the calling method.
            </summary>
            <returns><see langword="true" /> if execute is allowed.</returns>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanExecuteMethod(System.String,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the specified method.
            </summary>
            <returns><see langword="true" /> if execute is allowed.</returns>
            <param name="methodName">Name of the method to execute.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanExecuteMethod">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the calling method.
            </summary>
            <returns><see langword="true" /> if execute is allowed.</returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanExecuteMethod(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the specified method.
            </summary>
            <param name="methodName">Name of the method to execute.</param>
            <returns><see langword="true" /> if execute is allowed.</returns>
            <remarks>
            <para>
            If a list of allowed roles is provided then only users in those
            roles can execute the method. If no list of allowed roles is 
            provided then the list of denied roles is checked.
            </para><para>
            If a list of denied roles is provided then users in the denied
            roles are not allowed to execute the method. 
            All other users are allowed.
            </para><para>
            If neither a list of allowed nor denied roles is provided then
            all users will be allowed to execute the method..
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetParent(Csla.Core.IParent)">
            <summary>
            Used by BusinessListBase as a child object is 
            created to tell the child object about its
            parent.
            </summary>
            <param name="parent">A reference to the parent collection object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Allow data binding to start a nested edit on the object.
            </summary>
            <remarks>
            Data binding may call this method many times. Only the first
            call should be honored, so we have extra code to detect this
            and do nothing for subsquent calls.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Allow data binding to cancel the current edit.
            </summary>
            <remarks>
            Data binding may call this method many times. Only the first
            call to either IEditableObject.CancelEdit or 
            IEditableObject.EndEdit
            should be honored. We include extra code to detect this and do
            nothing for subsequent calls.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Allow data binding to apply the current edit.
            </summary>
            <remarks>
            Data binding may call this method many times. Only the first
            call to either IEditableObject.EndEdit or 
            IEditableObject.CancelEdit
            should be honored. We include extra code to detect this and do
            nothing for subsequent calls.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.BeginEdit">
            <summary>
            Starts a nested edit on the object.
            </summary>
            <remarks>
            <para>
            When this method is called the object takes a snapshot of
            its current state (the values of its variables). This snapshot
            can be restored by calling CancelEdit
            or committed by calling ApplyEdit.
            </para><para>
            This is a nested operation. Each call to BeginEdit adds a new
            snapshot of the object's state to a stack. You should ensure that 
            for each call to BeginEdit there is a corresponding call to either 
            CancelEdit or ApplyEdit to remove that snapshot from the stack.
            </para><para>
            See Chapters 2 and 3 for details on n-level undo and state stacking.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.CancelEdit">
            <summary>
            Cancels the current edit process, restoring the object's state to
            its previous values.
            </summary>
            <remarks>
            Calling this method causes the most recently taken snapshot of the 
            object's state to be restored. This resets the object's values
            to the point of the last BeginEdit call.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.UndoChangesComplete">
            <summary>
            Called when an undo operation has completed.
            </summary>
            <remarks> 
            This method resets the object as a result of
            deserialization and raises PropertyChanged events
            to notify data binding that the object has changed.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.ApplyEdit">
            <summary>
            Commits the current edit process.
            </summary>
            <remarks>
            Calling this method causes the most recently taken snapshot of the 
            object's state to be discarded, thus committing any changes made
            to the object's state since the last BeginEdit call.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.AcceptChangesComplete">
            <summary>
            Notifies the parent object (if any) that this
            child object's edits have been accepted.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkAsChild">
            <summary>
            Marks the object as being a child object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Delete">
            <summary>
            Marks the object for deletion. The object will be deleted as part of the
            next save operation.
            </summary>
            <remarks>
            <para>
            CSLA .NET supports both immediate and deferred deletion of objects. This
            method is part of the support for deferred deletion, where an object
            can be marked for deletion, but isn't actually deleted until the object
            is saved to the database. This method is called by the UI developer to
            mark the object for deletion.
            </para><para>
            To 'undelete' an object, use n-level undo as discussed in Chapters 2 and 3.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.DeleteChild">
            <summary>
            Called by a parent object to mark the child
            for deferred deletion.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetClone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>
            A new object containing the exact data of the original object.
            </returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnValidationComplete">
            <summary>
            Raises the ValidationComplete event
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.AddInstanceBusinessRules">
            <summary>
            Override this method in your business class to
            be notified when you need to set up business
            rules.
            </summary>
            <remarks>
            This method is automatically called by CSLA .NET
            when your object should associate per-instance
            validation rules with its properties.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.AddBusinessRules">
            <summary>
            Override this method in your business class to
            be notified when you need to set up shared 
            business rules.
            </summary>
            <remarks>
            This method is automatically called by CSLA .NET
            when your object should associate per-type 
            validation rules with its properties.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_Create">
            <summary>
            Override this method to load a new business object with default
            values from the database.
            </summary>
            <remarks>
            Normally you will overload this method to accept a strongly-typed
            criteria parameter, rather than overriding the method with a
            loosely-typed criteria parameter.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_Fetch(System.Object)">
            <summary>
            Override this method to allow retrieval of an existing business
            object based on data in the database.
            </summary>
            <remarks>
            Normally you will overload this method to accept a strongly-typed
            criteria parameter, rather than overriding the method with a
            loosely-typed criteria parameter.
            </remarks>
            <param name="criteria">An object containing criteria values to identify the object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_Insert">
            <summary>
            Override this method to allow insertion of a business
            object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_Update">
            <summary>
            Override this method to allow update of a business
            object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_DeleteSelf">
            <summary>
            Override this method to allow deferred deletion of a business object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_Delete(System.Object)">
            <summary>
            Override this method to allow immediate deletion of a business object.
            </summary>
            <param name="criteria">An object containing criteria values to identify the object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_Create">
            <summary>
            Override this method to load a new business object with default
            values from the database.
            </summary>
            <remarks>
            Normally you will overload this method to accept a strongly-typed
            criteria parameter, rather than overriding the method with a
            loosely-typed criteria parameter.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.AddEventHooks(Csla.Core.IBusinessObject)">
            <summary>
            For internal use.
            </summary>
            <param name="child">Child object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnAddEventHooks(Csla.Core.IBusinessObject)">
            <summary>
            Hook child object events.
            </summary>
            <param name="child">Child object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.RemoveEventHooks(Csla.Core.IBusinessObject)">
            <summary>
            For internal use only.
            </summary>
            <param name="child">Child object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnRemoveEventHooks(Csla.Core.IBusinessObject)">
            <summary>
            Unhook child object events.
            </summary>
            <param name="child">Child object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.RegisterProperty``1(System.Type,Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the type.
            </summary>
            <typeparam name="P">
            Type of property.
            </typeparam>
            <param name="objectType">
            Type of object to which the property belongs.
            </param>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(System.String,``0,``0)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <param name="defaultValue">
            Value to be returned if the user is not
            authorized to read the property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(System.String,``0,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <param name="defaultValue">
            Value to be returned if the user is not
            authorized to read the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(Csla.PropertyInfo{``0},``0,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="defaultValue">
            Value to be returned if the user is not
            authorized to read the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetPropertyConvert``2(Csla.PropertyInfo{``0},``0)">
            <summary>
            Gets a property's value as 
            a specified type, first checking authorization.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetPropertyConvert``2(Csla.PropertyInfo{``0},``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value as a specified type, 
            first checking authorization.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's managed field value, 
            first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetPropertyConvert``2(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value from the list of 
            managed field values, first checking authorization,
            and converting the value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetPropertyConvert``2(Csla.PropertyInfo{``0},Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value from the list of 
            managed field values, first checking authorization,
            and converting the value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(Csla.PropertyInfo{``0},Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value as a specified type, 
            first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.ReadPropertyConvert``2(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value from the list of 
            managed field values, converting the 
            value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.ReadProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.ReadProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty``1(Csla.PropertyInfo{``0},``0@,``0)">
            <summary>
            Sets a property's backing field with the supplied
            value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <param name="field">
            A reference to the backing field for the property.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to change the property, this
            overload throws a SecurityException.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty``1(System.String,``0@,``0)">
            <summary>
            Sets a property's backing field with the supplied
            value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <param name="field">
            A reference to the backing field for the property.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <remarks>
            If the user is not authorized to change the property, this
            overload throws a SecurityException.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetPropertyConvert``2(Csla.PropertyInfo{``0},``0@,``1)">
            <summary>
            Sets a property's backing field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <typeparam name="P">
            Type of the field being set.
            </typeparam>
            <typeparam name="V">
            Type of the value provided to the field.
            </typeparam>
            <param name="field">
            A reference to the backing field for the property.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to change the property, this
            overload throws a SecurityException.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetPropertyConvert``2(Csla.PropertyInfo{``0},``0@,``1,Csla.Security.NoAccessBehavior)">
            <summary>
            Sets a property's backing field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <typeparam name="P">
            Type of the field being set.
            </typeparam>
            <typeparam name="V">
            Type of the value provided to the field.
            </typeparam>
            <param name="field">
            A reference to the backing field for the property.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to change this property.</param>
            <remarks>
            If the field value is of type string, any incoming
            null values are converted to string.Empty.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty``1(System.String,``0@,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Sets a property's backing field with the supplied
            value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <param name="field">
            A reference to the backing field for the property.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to change this property.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetPropertyConvert``2(System.String,``0@,``1,Csla.Security.NoAccessBehavior)">
            <summary>
            Sets a property's backing field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <typeparam name="P">
            Type of the field being set.
            </typeparam>
            <typeparam name="V">
            Type of the value provided to the field.
            </typeparam>
            <param name="field">
            A reference to the backing field for the property.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to change this property.</param>
            <remarks>
            If the field value is of type string, any incoming
            null values are converted to string.Empty.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Sets a property's managed field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <typeparam name="P">Property type.</typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            If the user is not authorized to change the property, this
            overload throws a SecurityException.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetPropertyConvert``2(Csla.PropertyInfo{``0},``1)">
            <summary>
            Sets a property's managed field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            If the user is not authorized to change the property, this
            overload throws a SecurityException.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetPropertyConvert``2(Csla.PropertyInfo{``0},``1,Csla.Security.NoAccessBehavior)">
            <summary>
            Sets a property's managed field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to change this property.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty``1(Csla.PropertyInfo{``0},``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Sets a property's managed field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to change this property.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Sets a property's managed field with the 
            supplied value, and then
            calls PropertyHasChanged if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            If the user is not authorized to change the 
            property a SecurityException is thrown.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadPropertyConvert``2(Csla.PropertyInfo{``0},``1)">
            <summary>
            Loads a property's managed field with the 
            supplied value.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Loads a property's managed field with the 
            supplied value.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadProperty(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Loads a property's managed field with the 
            supplied value.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.ResetChildEditLevel(System.Object)">
            <summary>
            Makes sure that a child object is set up properly
            to be a child of this object.
            </summary>
            <param name="newValue">Potential child object</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadPropertyAsync``2(Csla.PropertyInfo{``0},Csla.Core.AsyncFactoryDelegate{``0,``1},``1)">
            <summary>
            Loads a property value asynchronously.
            </summary>
            <typeparam name="R">Type of the property</typeparam>
            <typeparam name="P">Type of the parameter.</typeparam>
            <param name="property">Property to load.</param>
            <param name="factory">AsyncFactory delegate.</param>
            <param name="parameter">Parameter value.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadPropertyAsync``3(Csla.PropertyInfo{``0},Csla.Core.AsyncFactoryDelegate{``0,``1,``2},``1,``2)">
            <summary>
            Loads a property value asynchronously.
            </summary>
            <typeparam name="R">Type of the property</typeparam>
            <typeparam name="P1">Type of the parameter.</typeparam>
            <typeparam name="P2">Type of the parameter.</typeparam>
            <param name="property">Property to load.</param>
            <param name="factory">AsyncFactory delegate.</param>
            <param name="p1">Parameter value.</param>
            <param name="p2">Parameter value.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadPropertyAsync``4(Csla.PropertyInfo{``0},Csla.Core.AsyncFactoryDelegate{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Loads a property value asynchronously.
            </summary>
            <typeparam name="R">Type of the property</typeparam>
            <typeparam name="P1">Type of the parameter.</typeparam>
            <typeparam name="P2">Type of the parameter.</typeparam>
            <typeparam name="P3">Type of the parameter.</typeparam>
            <param name="property">Property to load.</param>
            <param name="factory">AsyncFactory delegate.</param>
            <param name="p1">Parameter value.</param>
            <param name="p2">Parameter value.</param>
            <param name="p3">Parameter value.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadPropertyAsync``5(Csla.PropertyInfo{``0},Csla.Core.AsyncFactoryDelegate{``0,``1,``2,``3,``4},``1,``2,``3,``4)">
            <summary>
            Loads a property value asynchronously.
            </summary>
            <typeparam name="R">Type of the property</typeparam>
            <typeparam name="P1">Type of the parameter.</typeparam>
            <typeparam name="P2">Type of the parameter.</typeparam>
            <typeparam name="P3">Type of the parameter.</typeparam>
            <typeparam name="P4">Type of the parameter.</typeparam>
            <param name="property">Property to load.</param>
            <param name="factory">AsyncFactory delegate.</param>
            <param name="p1">Parameter value.</param>
            <param name="p2">Parameter value.</param>
            <param name="p3">Parameter value.</param>
            <param name="p4">Parameter value.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadPropertyAsync``6(Csla.PropertyInfo{``0},Csla.Core.AsyncFactoryDelegate{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5)">
            <summary>
            Loads a property value asynchronously.
            </summary>
            <typeparam name="R">Type of the property</typeparam>
            <typeparam name="P1">Type of the parameter.</typeparam>
            <typeparam name="P2">Type of the parameter.</typeparam>
            <typeparam name="P3">Type of the parameter.</typeparam>
            <typeparam name="P4">Type of the parameter.</typeparam>
            <typeparam name="P5">Type of the parameter.</typeparam>
            <param name="property">Property to load.</param>
            <param name="factory">AsyncFactory delegate.</param>
            <param name="p1">Parameter value.</param>
            <param name="p2">Parameter value.</param>
            <param name="p3">Parameter value.</param>
            <param name="p4">Parameter value.</param>
            <param name="p5">Parameter value.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkBusy">
            <summary>
            Mark the object as busy (it is
            running an async operation).
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkIdle">
            <summary>
            Mark the object as not busy (it is
            not running an async operation).
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnBusyChanged(Csla.Core.BusyChangedEventArgs)">
            <summary>
            Raise the BusyChanged event.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.IsPropertyBusy(System.String)">
            <summary>
            Gets a value indicating whether a
            specific property is busy (has a
            currently executing async rule).
            </summary>
            <param name="propertyName">
            Name of the property.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnUnhandledAsyncException(Csla.Core.ErrorEventArgs)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="error">Args parameter.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnUnhandledAsyncException(System.Object,System.Exception)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="originalSender">Original sender of
            the event.</param>
            <param name="error">Exception object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnChildChanged(Csla.Core.ChildChangedEventArgs)">
            <summary>
            Raises the ChildChanged event, indicating that a child
            object has been changed.
            </summary>
            <param name="e">
            ChildChangedEventArgs object.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.RaiseChildChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Creates a ChildChangedEventArgs and raises the event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles any PropertyChanged event from 
            a child object and echoes it up as
            a ChildChanged event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handles any ListChanged event from 
            a child list and echoes it up as
            a ChildChanged event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_Changed(System.Object,Csla.Core.ChildChangedEventArgs)">
            <summary>
            Handles any ChildChanged event from
            a child object and echoes it up as
            a ChildChanged event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.EditChildComplete(Csla.Core.IEditableBusinessObject)">
            <summary>
            Override this method to be notified when a child object's
            <see cref="M:Csla.Core.BusinessBase.ApplyEdit"/> method has
            completed.
            </summary>
            <param name="child">The child object that was edited.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to insert your child object
            references into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to retrieve your child object
            references from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsNew">
            <summary>
            Returns <see langword="true" /> if this is a new object, 
            <see langword="false" /> if it is a pre-existing object.
            </summary>
            <remarks>
            An object is considered to be new if its primary identifying (key) value 
            doesn't correspond to data in the database. In other words, 
            if the data values in this particular
            object have not yet been saved to the database the object is considered to
            be new. Likewise, if the object's data has been deleted from the database
            then the object is considered to be new.
            </remarks>
            <returns>A value indicating if this object is new.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsDeleted">
            <summary>
            Returns <see langword="true" /> if this object is marked for deletion.
            </summary>
            <remarks>
            CSLA .NET supports both immediate and deferred deletion of objects. This
            property is part of the support for deferred deletion, where an object
            can be marked for deletion, but isn't actually deleted until the object
            is saved to the database. This property indicates whether or not the
            current object has been marked for deletion. If it is <see langword="true" />
            , the object will
            be deleted when it is saved to the database, otherwise it will be inserted
            or updated by the save operation.
            </remarks>
            <returns>A value indicating if this object is marked for deletion.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsDirty">
            <summary>
            Returns <see langword="true" /> if this object's 
            data, or any of its fields or child objects data, 
            has been changed.
            </summary>
            <remarks>
            <para>
            When an object's data is changed, CSLA .NET makes note of that change
            and considers the object to be 'dirty' or changed. This value is used to
            optimize data updates, since an unchanged object does not need to be
            updated into the database. All new objects are considered dirty. All objects
            marked for deletion are considered dirty.
            </para><para>
            Once an object's data has been saved to the database (inserted or updated)
            the dirty flag is cleared and the object is considered unchanged. Objects
            newly loaded from the database are also considered unchanged.
            </para>
            </remarks>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsSelfDirty">
            <summary>
            Returns <see langword="true" /> if this object's data has been changed.
            </summary>
            <remarks>
            <para>
            When an object's data is changed, CSLA .NET makes note of that change
            and considers the object to be 'dirty' or changed. This value is used to
            optimize data updates, since an unchanged object does not need to be
            updated into the database. All new objects are considered dirty. All objects
            marked for deletion are considered dirty.
            </para><para>
            Once an object's data has been saved to the database (inserted or updated)
            the dirty flag is cleared and the object is considered unchanged. Objects
            newly loaded from the database are also considered unchanged.
            </para>
            </remarks>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsSavable">
            <summary>
            Returns <see langword="true" /> if this object is both dirty and valid.
            </summary>
            <remarks>
            An object is considered dirty (changed) if 
            <see cref="P:Csla.BusinessBase.IsDirty" /> returns <see langword="true" />. It is
            considered valid if IsValid
            returns <see langword="true" />. The IsSavable property is
            a combination of these two properties. 
            </remarks>
            <returns>A value indicating if this object is both dirty and valid.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.AuthorizationRules">
            <summary>
            Provides access to the AuthorizationRules object for this
            object.
            </summary>
            <remarks>
            Use this object to add a list of allowed and denied roles for
            reading and writing properties of the object. Typically these
            values are added once when the business object is instantiated.
            </remarks>
        </member>
        <member name="P:Csla.Core.BusinessBase.Parent">
            <summary>
            Provide access to the parent reference for use
            in child object code.
            </summary>
            <remarks>
            This value will be Nothing for root objects.
            </remarks>
        </member>
        <member name="P:Csla.Core.BusinessBase.DisableIEditableObject">
            <summary>
            Gets or sets a value indicating whether the
            IEditableObject interface methods should
            be disabled for this object.
            </summary>
            <value>Defaults to False, indicating that
            the IEditableObject methods will behave
            normally.</value>
            <remarks>
            If you disable the IEditableObject methods
            then Windows Forms data binding will no longer
            automatically call BeginEdit, CancelEdit or
            ApplyEdit on your object, and you will have
            to call these methods manually to get proper
            n-level undo behavior.
            </remarks>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsChild">
            <summary>
            Returns <see langword="true" /> if this is a child (non-root) object.
            </summary>
        </member>
        <member name="P:Csla.Core.BusinessBase.EditLevelAdded">
            <summary>
            Gets or sets the current edit level of the
            object.
            </summary>
            <remarks>
            Allow the collection object to use the
            edit level as needed.
            </remarks>
        </member>
        <member name="E:Csla.Core.BusinessBase.ValidationComplete">
            <summary>
            Event raised when validation is complete.
            </summary>
        </member>
        <member name="P:Csla.Core.BusinessBase.ValidationRules">
            <summary>
            Provides access to the broken rules functionality.
            </summary>
            <remarks>
            This property is used within your business logic so you can
            easily call the AddRule() method to associate validation
            rules with your object's properties.
            </remarks>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsValid">
            <summary>
            Returns <see langword="true" /> if the object 
            and its child objects are currently valid, 
            <see langword="false" /> if the
            object or any of its child objects have broken 
            rules or are otherwise invalid.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling ValidationRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior. For instance, you should always override
            this method if your object has child objects, since the validity of this object
            is affected by the validity of all child objects.
            </para>
            </remarks>
            <returns>A value indicating if the object is currently valid.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsSelfValid">
            <summary>
            Returns <see langword="true" /> if the object is currently 
            valid, <see langword="false" /> if the
            object has broken rules or is otherwise invalid.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling ValidationRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior. 
            </para>
            </remarks>
            <returns>A value indicating if the object is currently valid.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.BrokenRulesCollection">
            <summary>
            Provides access to the readonly collection of broken business rules
            for this object.
            </summary>
            <returns>A Csla.Validation.RulesCollection object.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsBusy">
            <summary>
            Gets a value indicating if this
            object or its child objects are
            busy.
            </summary>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsSelfBusy">
            <summary>
            Gets a value indicating if this
            object is busy.
            </summary>
        </member>
        <member name="E:Csla.Core.BusinessBase.BusyChanged">
            <summary>
            Event indicating that the IsBusy property has changed.
            </summary>
        </member>
        <member name="E:Csla.Core.BusinessBase.UnhandledAsyncException">
            <summary>
            Event indicating that an exception occurred during
            the processing of an async operation.
            </summary>
        </member>
        <member name="E:Csla.Core.BusinessBase.ChildChanged">
            <summary>
            Event raised when a child object has been changed.
            </summary>
        </member>
        <member name="P:Csla.Core.BusinessBase.FieldManager">
            <summary>
            Gets the PropertyManager object for this
            business object.
            </summary>
        </member>
        <member name="P:Csla.Core.BusinessBase.BypassPropertyChecks">
            <summary>
            By wrapping this property inside Using block
            you can set property values on current business object
            without raising PropertyChanged events
            and checking user rights.
            </summary>
        </member>
        <member name="T:Csla.Core.BusinessBase.BypassPropertyChecksObject">
            <summary>
            Class that allows setting of property values on 
            current business object
            without raising PropertyChanged events
            and checking user rights.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.BypassPropertyChecksObject.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.BypassPropertyChecksObject.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="dispose">Dispose flag.</param>
        </member>
        <member name="T:Csla.Core.BusyChangedEventHandler">
            <summary>
            Delegate for handling the BusyChanged event.
            </summary>
            <param name="sender">
            Object raising the event.
            </param>
            <param name="e">
            Event arguments.
            </param>
        </member>
        <member name="T:Csla.Core.BusyChangedEventArgs">
            <summary>
            Event arguments for the BusyChanged event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusyChangedEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the object.
            </summary>
            <param name="propertyName">
            Property for which the Busy value has changed.
            </param>
            <param name="busy">
            New Busy value.
            </param>
        </member>
        <member name="P:Csla.Core.BusyChangedEventArgs.Busy">
            <summary>
            New busy value.
            </summary>
        </member>
        <member name="P:Csla.Core.BusyChangedEventArgs.PropertyName">
            <summary>
            Property for which the Busy value has changed.
            </summary>
        </member>
        <member name="T:Csla.C5.InternalException">
            <summary>
            An exception to throw from library code when an internal inconsistency is encountered.
            </summary>
        </member>
        <member name="T:Csla.C5.ReadOnlyCollectionException">
            <summary>
            An exception thrown by an update operation on a Read-Only collection or dictionary.
            <para>This exception will be thrown unconditionally when an update operation 
            (method or set property) is called. No check is made to see if the update operation, 
            if allowed, would actually change the collection. </para>
            </summary>
        </member>
        <member name="M:Csla.C5.ReadOnlyCollectionException.#ctor">
            <summary>
            Create a simple exception with no further explanation.
            </summary>
        </member>
        <member name="M:Csla.C5.ReadOnlyCollectionException.#ctor(System.String)">
            <summary>
            Create the exception with an explanation of the reason.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Csla.C5.FixedSizeCollectionException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.FixedSizeCollectionException.#ctor">
            <summary>
            Create a simple exception with no further explanation.
            </summary>
        </member>
        <member name="M:Csla.C5.FixedSizeCollectionException.#ctor(System.String)">
            <summary>
            Create the exception with an explanation of the reason.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Csla.C5.UnlistenableEventException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.UnlistenableEventException.#ctor">
            <summary>
            Create a simple exception with no further explanation.
            </summary>
        </member>
        <member name="M:Csla.C5.UnlistenableEventException.#ctor(System.String)">
            <summary>
            Create the exception with an explanation of the reason.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Csla.C5.CollectionModifiedException">
            <summary>
            An exception thrown by enumerators, range views etc. when accessed after 
            the underlying collection has been modified.
            </summary>
        </member>
        <member name="M:Csla.C5.CollectionModifiedException.#ctor">
            <summary>
            Create a simple exception with no further explanation.
            </summary>
        </member>
        <member name="M:Csla.C5.CollectionModifiedException.#ctor(System.String)">
            <summary>
            Create the exception with an explanation of the reason.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Csla.C5.ViewDisposedException">
            <summary>
            An excption thrown when trying to access a view (a list view on a <see cref="T:C5.IList`1"/> or 
            a snapshot on a <see cref="T:C5.IPersistentSorted`1"/>)
            that has been invalidated by some earlier operation.
            <para>
            The typical scenario is a view on a list that hash been invalidated by a call to 
            Sort, Reverse or Shuffle on some other, overlapping view or the whole list.
            </para>
            </summary>
        </member>
        <member name="M:Csla.C5.ViewDisposedException.#ctor">
            <summary>
            Create a simple exception with no further explanation.
            </summary>
        </member>
        <member name="M:Csla.C5.ViewDisposedException.#ctor(System.String)">
            <summary>
            Create the exception with an explanation of the reason.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Csla.C5.NoSuchItemException">
            <summary>
            An exception thrown by a lookup or lookup with update operation that does not 
            find the lookup item and has no other means to communicate failure.
            <para>The typical scenario is a lookup by key in a dictionary with an indexer,
            see e.g. <see cref="P:C5.IDictionary`2.Item(`0)"/></para>
            </summary>
        </member>
        <member name="M:Csla.C5.NoSuchItemException.#ctor">
            <summary>
            Create a simple exception with no further explanation.
            </summary>
        </member>
        <member name="M:Csla.C5.NoSuchItemException.#ctor(System.String)">
            <summary>
            Create the exception with an explanation of the reason.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Csla.C5.NotAViewException">
            <summary>
            An exception thrown by an operation on a list (<see cref="T:C5.IList`1"/>)
            that only makes sense for a view, not for an underlying list.
            </summary>
        </member>
        <member name="M:Csla.C5.NotAViewException.#ctor">
            <summary>
            Create a simple exception with no further explanation.
            </summary>
        </member>
        <member name="M:Csla.C5.NotAViewException.#ctor(System.String)">
            <summary>
            Create the exception with an explanation of the reason.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Csla.C5.DuplicateNotAllowedException">
            <summary>
            An exception thrown when an operation attempts to create a duplicate in a collection with set semantics 
            (<see cref="P:C5.IExtensible`1.AllowsDuplicates"/> is false) or attempts to create a duplicate key in a dictionary.
            <para>With collections this can only happen with Insert operations on lists, since the Add operations will
            not try to create duplictes and either ignore the failure or report it in a bool return value.
            </para>
            <para>With dictionaries this can happen with the <see cref="M:C5.IDictionary`2.Add(`0,`1)"/> metod.</para>
            </summary>
        </member>
        <member name="M:Csla.C5.DuplicateNotAllowedException.#ctor">
            <summary>
            Create a simple exception with no further explanation.
            </summary>
        </member>
        <member name="M:Csla.C5.DuplicateNotAllowedException.#ctor(System.String)">
            <summary>
            Create the exception with an explanation of the reason.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Csla.C5.InvalidPriorityQueueHandleException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.InvalidPriorityQueueHandleException.#ctor">
            <summary>
            Create a simple exception with no further explanation.
            </summary>
        </member>
        <member name="M:Csla.C5.InvalidPriorityQueueHandleException.#ctor(System.String)">
            <summary>
            Create the exception with an explanation of the reason.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Csla.C5.NotComparableException">
            <summary>
            An exception thrown by an operation that need to construct a natural
            comparer for a type.
            </summary>
        </member>
        <member name="M:Csla.C5.NotComparableException.#ctor">
            <summary>
            Create a simple exception with no further explanation.
            </summary>
        </member>
        <member name="M:Csla.C5.NotComparableException.#ctor(System.String)">
            <summary>
            Create the exception with an explanation of the reason.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Csla.C5.IncompatibleViewException">
            <summary>
            An exception thrown by operations on a list that expects an argument
            that is a view on the same underlying list.
            </summary>
        </member>
        <member name="M:Csla.C5.IncompatibleViewException.#ctor">
            <summary>
            Create a simple exception with no further explanation.
            </summary>
        </member>
        <member name="M:Csla.C5.IncompatibleViewException.#ctor(System.String)">
            <summary>
            Create the exception with an explanation of the reason.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Csla.Wpf.Execute">
            <summary>
            Executes a method on the current DataContext.
            </summary>
        </member>
        <member name="F:Csla.Wpf.Execute.MethodNameProperty">
            <summary>
            Gets or sets the name of the method
            to be invoked.
            </summary>
        </member>
        <member name="F:Csla.Wpf.Execute.MethodParameterProperty">
            <summary>
            Gets or sets the value of a parameter to
            be passed to the invoked method.
            </summary>
        </member>
        <member name="M:Csla.Wpf.Execute.Invoke(System.Object)">
            <summary>
            Executes the specified method.
            </summary>
            <param name="parameter">
            EventArgs parameter from the event that
            triggered this invocation.
            </param>
        </member>
        <member name="P:Csla.Wpf.Execute.MethodName">
            <summary>
            Gets or sets the name of the method
            to be invoked.
            </summary>
        </member>
        <member name="P:Csla.Wpf.Execute.MethodParameter">
            <summary>
            Gets or sets the value of a parameter to
            be passed to the invoked method.
            </summary>
        </member>
        <member name="T:Csla.Wpf.CslaDataProviderCommandManager">
            <summary>
            Implements support for RoutedCommands that can
            be executed by the CslaDataProvider control.
            </summary>
            <remarks>
            Use this object as the CommandTarget for command
            source objects when you want the CslaDataProvider
            to execute the command.
            </remarks>
        </member>
        <member name="T:Csla.Web.Design.ObjectSchema">
            <summary>
            Object providing access to schema information for
            a business object.
            </summary>
            <remarks>
            This object returns only one view, which corresponds
            to the business object used by data binding.
            </remarks>
        </member>
        <member name="M:Csla.Web.Design.ObjectSchema.#ctor(Csla.Web.Design.CslaDataSourceDesigner,System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="designer">Data source designer object.</param>
            <param name="typeName">Type name for
            which the schema should be generated.</param>
        </member>
        <member name="M:Csla.Web.Design.ObjectSchema.GetViews">
            <summary>
            Returns a single element array containing the
            schema for the CSLA .NET business object.
            </summary>
        </member>
        <member name="T:Csla.Web.Design.ObjectFieldInfo">
            <summary>
            Contains schema information for a single
            object property.
            </summary>
        </member>
        <member name="M:Csla.Web.Design.ObjectFieldInfo.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="field">The PropertyInfo object
            describing the property.</param>
        </member>
        <member name="P:Csla.Web.Design.ObjectFieldInfo.DataType">
            <summary>
            Gets the data type of the property.
            </summary>
        </member>
        <member name="P:Csla.Web.Design.ObjectFieldInfo.Identity">
            <summary>
            Gets a value indicating whether this property
            is an identity key for the object.
            </summary>
            <remarks>
            Returns the optional value provided through
            the <see cref="T:System.ComponentModel.DataObjectFieldAttribute">DataObjectField</see>
            attribute on the property.
            </remarks>
        </member>
        <member name="P:Csla.Web.Design.ObjectFieldInfo.IsReadOnly">
            <summary>
            Gets a value indicating whether this property
            is readonly.
            </summary>
        </member>
        <member name="P:Csla.Web.Design.ObjectFieldInfo.IsUnique">
            <summary>
            Gets a value indicating whether this property
            must contain a unique value.
            </summary>
            <returns>
            Always returns True if the property
            is marked as a primary key, otherwise
            returns False.
            </returns>
        </member>
        <member name="P:Csla.Web.Design.ObjectFieldInfo.Length">
            <summary>
            Gets the length of the property value.
            </summary>
            <remarks>
            Returns the optional value provided through
            the <see cref="T:System.ComponentModel.DataObjectFieldAttribute">DataObjectField</see>
            attribute on the property.
            </remarks>
        </member>
        <member name="P:Csla.Web.Design.ObjectFieldInfo.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:Csla.Web.Design.ObjectFieldInfo.Nullable">
            <summary>
            Gets a value indicating whether the property
            is nullable
            </summary>
            <remarks>
            Returns True for reference types, and for
            value types wrapped in the Nullable generic.
            The result can also be set to True through
            the <see cref="T:System.ComponentModel.DataObjectFieldAttribute">DataObjectField</see>
            attribute on the property.
            </remarks>
        </member>
        <member name="P:Csla.Web.Design.ObjectFieldInfo.Precision">
            <summary>
            Gets the property's numeric precision.
            </summary>
            <returns>Always returns -1.</returns>
        </member>
        <member name="P:Csla.Web.Design.ObjectFieldInfo.PrimaryKey">
            <summary>
            Gets a value indicating whether the property
            is a primary key value.
            </summary>
            <remarks>
            Returns the optional value provided through
            the <see cref="T:System.ComponentModel.DataObjectFieldAttribute">DataObjectField</see>
            attribute on the property.
            </remarks>
        </member>
        <member name="P:Csla.Web.Design.ObjectFieldInfo.Scale">
            <summary>
            Gets the property's scale.
            </summary>
            <returns>Always returns -1.</returns>
        </member>
        <member name="T:Csla.Validation.ValidationRulesManager">
            <summary>
            Maintains rule methods for a business object
            or business object type.
            </summary>
        </member>
        <member name="M:Csla.Validation.ValidationRulesManager.AddDependentProperty(System.String,System.String)">
            <summary>
            Adds a property to the list of dependencies for
            the specified property
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="dependentPropertyName">
            The name of the dependent property.
            </param>
            <remarks>
            When rules are checked for propertyName, they will
            also be checked for any dependent properties associated
            with that property.
            </remarks>
        </member>
        <member name="T:Csla.SortedBindingList`1">
            <summary>
            Provides a sorted view into an existing IList(Of T).
            </summary>
            <typeparam name="T">
            Type of child object contained by
            the original list or collection.
            </typeparam>
        </member>
        <member name="M:Csla.SortedBindingList`1.GetEnumerator">
            <summary>
            Returns an enumerator for the list, honoring
            any sort that is active at the time.
            </summary>
        </member>
        <member name="M:Csla.SortedBindingList`1.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="property">Property on which
            to build the index.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.AddNew">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="M:Csla.SortedBindingList`1.ApplySort(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Applies a sort to the view.
            </summary>
            <param name="propertyName">The text name of the property on which to sort.</param>
            <param name="direction">The direction to sort the data.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Applies a sort to the view.
            </summary>
            <param name="property">A PropertyDescriptor for the property on which to sort.</param>
            <param name="direction">The direction to sort the data.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.Find(System.String,System.Object)">
            <summary>
            Finds an item in the view
            </summary>
            <param name="propertyName">Name of the property to search</param>
            <param name="key">Value to find</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="key">Key value for which to search.</param>
            <param name="property">Property to search for the key
            value.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Csla.SortedBindingList`1.ListChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="property">Property for which the
            index should be removed.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.RemoveSort">
            <summary>
            Removes any sort currently applied to the view.
            </summary>
        </member>
        <member name="M:Csla.SortedBindingList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="array">Array to receive the data.</param>
            <param name="arrayIndex">Starting array index.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.Add(`0)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="item">Item to add to the list.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.Clear">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="M:Csla.SortedBindingList`1.Contains(`0)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="item">Item for which to search.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.IndexOf(`0)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="item">Item for which to search.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.Insert(System.Int32,`0)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="index">Index at
            which to insert the item.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.Remove(`0)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="item">Item to be removed.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the child object at the specified index
            in the list, resorting the display as needed.
            </summary>
            <param name="index">The index of the object to remove.</param>
            <remarks>
            See Chapter 5 for details on how and why the list is
            altered during the remove process.
            </remarks>
        </member>
        <member name="M:Csla.SortedBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new view based on the provided IList object.
            </summary>
            <param name="list">The IList (collection) containing the data.</param>
        </member>
        <member name="M:Csla.SortedBindingList`1.ToArray">
            <summary>
            Get an array containing all items in the list.
            </summary>
        </member>
        <member name="P:Csla.SortedBindingList`1.AllowEdit">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.SortedBindingList`1.AllowNew">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.SortedBindingList`1.AllowRemove">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.SortedBindingList`1.IsSorted">
            <summary>
            Gets a value indicating whether the view is currently sorted.
            </summary>
        </member>
        <member name="E:Csla.SortedBindingList`1.ListChanged">
            <summary>
            Raised to indicate that the list's data has changed.
            </summary>
            <remarks>
            This event is raised if the underling IList object's data changes
            (assuming the underling IList also implements the IBindingList
            interface). It is also raised if the sort property or direction
            is changed to indicate that the view's data has changed. See
            Chapter 5 for details.
            </remarks>
        </member>
        <member name="P:Csla.SortedBindingList`1.SortDirection">
            <summary>
            Returns the direction of the current sort.
            </summary>
        </member>
        <member name="P:Csla.SortedBindingList`1.SortProperty">
            <summary>
            Returns the PropertyDescriptor of the current sort.
            </summary>
        </member>
        <member name="P:Csla.SortedBindingList`1.SupportsChangeNotification">
            <summary>
            Returns <see langword="true"/> since this object does raise the
            ListChanged event.
            </summary>
        </member>
        <member name="P:Csla.SortedBindingList`1.SupportsSearching">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.SortedBindingList`1.SupportsSorting">
            <summary>
            Returns <see langword="true"/>. Sorting is supported.
            </summary>
        </member>
        <member name="P:Csla.SortedBindingList`1.Count">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.SortedBindingList`1.IsReadOnly">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.SortedBindingList`1.Item(System.Int32)">
            <summary>
            Gets the child item at the specified index in the list,
            honoring the sort order of the items.
            </summary>
            <param name="index">The index of the item in the sorted list.</param>
        </member>
        <member name="P:Csla.SortedBindingList`1.SourceList">
            <summary>
            Gets the source list over which this
            SortedBindingList is a view.
            </summary>
        </member>
        <member name="M:Csla.SortedBindingList`1.SortedEnumerator.Finalize">
            <summary>
            Allows an <see cref="T:System.Object"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.SerializationInfo">
            <summary>
            Object containing the serialization
            data for a specific object.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.AddValue(System.String,System.Object)">
            <summary>
            Adds a value to the serialization stream.
            </summary>
            <param name="name">
            Name of the field.
            </param>
            <param name="value">
            Value of the field.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.AddValue(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a value to the list of fields.
            </summary>
            <param name="name">
            Name of the field.
            </param>
            <param name="value">
            Value of the field.
            </param>
            <param name="isDirty">
            Flag indicating whether the value is dirty.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.GetValue``1(System.String)">
            <summary>
            Gets a value from the list of fields.
            </summary>
            <typeparam name="T">
            Type to which the value should be coerced.
            </typeparam>
            <param name="name">
            Name of the field.
            </param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.AddChild(System.String,System.Int32)">
            <summary>
            Adds a child to the list of child references.
            </summary>
            <param name="name">
            Name of the field.
            </param>
            <param name="referenceId">
            Reference id for the child object.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.AddChild(System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a child to the list of child references.
            </summary>
            <param name="name">
            Name of the field.
            </param>
            <param name="referenceId">
            Reference id for the child object.
            </param>
            <param name="isDirty">
            Flag indicating whether the child is dirty.
            </param>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.Children">
            <summary>
            Dictionary containing child reference data.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.Values">
            <summary>
            Dictionary containg field data.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.ReferenceId">
            <summary>
            Reference number for this object.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.TypeName">
            <summary>
            Assembly-qualified type name of the
            object being serialized.
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.SerializationInfo.FieldData">
            <summary>
            Object that contains information about
            a single field.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.FieldData.Value">
            <summary>
            Field value.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.FieldData.EnumTypeName">
            <summary>
            If non-null, indicates that the value is a integer value representing the
            specified enum type. Upon deserialization, the integer will be converted back
            to the enum type.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.FieldData.IsDirty">
            <summary>
            Indicates whether the field is dirty.
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.SerializationInfo.ChildData">
            <summary>
            Object that contains information about
            a single child reference.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.ChildData.ReferenceId">
            <summary>
            Reference number for the child.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.ChildData.IsDirty">
            <summary>
            Indicates whether the child is dirty.
            </summary>
        </member>
        <member name="T:Csla.Reflection.LateBoundObject">
            <summary>
            Enables simple invocation of methods
            against the contained object using 
            late binding.
            </summary>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.#ctor(System.Type)">
            <summary>
            Creates an instance of the specified
            type and contains it within a new
            LateBoundObject.
            </summary>
            <param name="objectType">
            Type of object to create.
            </param>
            <remarks>
            The specified type must implement a
            default constructor.
            </remarks>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.#ctor(System.Object)">
            <summary>
            Contains the provided object within
            a new LateBoundObject.
            </summary>
            <param name="instance">
            Object to contain.
            </param>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.CallMethodIfImplemented(System.String,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method
            if that method is implemented on the target object.
            </summary>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.CallMethod(System.String)">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="method">
            Name of the method.
            </param>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.CallMethod(System.String,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="P:Csla.Reflection.LateBoundObject.Instance">
            <summary>
            Object instance managed by LateBoundObject.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.WcfChannel.NetDataContractOperationBehavior">
            <summary>
            Override the DataContract serialization behavior to
            use the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"/>.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.NetDataContractOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="operation">Operation description.</param>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.NetDataContractOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription,System.ServiceModel.DataContractFormatAttribute)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="operation">Operation description.</param>
            <param name="dataContractFormatAttribute">Data contract attribute object.</param>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.NetDataContractOperationBehavior.CreateSerializer(System.Type,System.String,System.String,System.Collections.Generic.IList{System.Type})">
            <summary>
            Overrided CreateSerializer to return an XmlObjectSerializer which is capable of 
            preserving the object references.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.NetDataContractOperationBehavior.CreateSerializer(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IList{System.Type})">
            <summary>
            Overrided CreateSerializer to return an XmlObjectSerializer which is capable of 
            preserving the object references.
            </summary>
        </member>
        <member name="T:Csla.DataPortalClient.LocalProxy">
            <summary>
            Implements a data portal proxy to relay data portal
            calls to an application server hosted locally 
            in the client process and AppDomain.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.LocalProxy.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to create a
            new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.LocalProxy.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to load an
            existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.LocalProxy.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to update a
            business object.
            </summary>
            <param name="obj">The business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.LocalProxy.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to delete a
            business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="P:Csla.DataPortalClient.LocalProxy.IsServerRemote">
            <summary>
            Get a value indicating whether this proxy will invoke
            a remote data portal server, or run the "server-side"
            data portal in the caller's process and AppDomain.
            </summary>
        </member>
        <member name="T:Csla.Data.ConnectionManager">
            <summary>
            Provides an automated way to reuse open
            database connections within the context
            of a single data portal operation.
            </summary>
            <remarks>
            This type stores the open database connection
            in <see cref="P:Csla.ApplicationContext.LocalContext"/>
            and uses reference counting through
            <see cref="T:System.IDisposable"/> to keep the connection
            open for reuse by child objects, and to automatically
            dispose the connection when the last consumer
            has called Dispose."
            </remarks>
        </member>
        <member name="M:Csla.Data.ConnectionManager.GetManager(System.String)">
            <summary>
            Gets the ConnectionManager object for the 
            specified database.
            </summary>
            <param name="database">
            Database name as shown in the config file.
            </param>
        </member>
        <member name="M:Csla.Data.ConnectionManager.GetManager(System.String,System.String)">
            <summary>
            Gets the ConnectionManager object for the 
            specified database.
            </summary>
            <param name="database">
            Database name as shown in the config file.
            </param>
            <param name="label">Label for this connection.</param>
        </member>
        <member name="M:Csla.Data.ConnectionManager.GetManager(System.String,System.Boolean)">
            <summary>
            Gets the ConnectionManager object for the 
            specified database.
            </summary>
            <param name="database">
            The database name or connection string.
            </param>
            <param name="isDatabaseName">
            True to indicate that the connection string
            should be retrieved from the config file. If
            False, the database parameter is directly 
            used as a connection string.
            </param>
            <returns>ConnectionManager object for the name.</returns>
        </member>
        <member name="M:Csla.Data.ConnectionManager.GetManager(System.String,System.Boolean,System.String)">
            <summary>
            Gets the ConnectionManager object for the 
            specified database.
            </summary>
            <param name="database">
            The database name or connection string.
            </param>
            <param name="isDatabaseName">
            True to indicate that the connection string
            should be retrieved from the config file. If
            False, the database parameter is directly 
            used as a connection string.
            </param>
            <param name="label">Label for this connection.</param>
            <returns>ConnectionManager object for the name.</returns>
        </member>
        <member name="M:Csla.Data.ConnectionManager.Dispose">
            <summary>
            Dispose object, dereferencing or
            disposing the connection it is
            managing.
            </summary>
        </member>
        <member name="P:Csla.Data.ConnectionManager.Connection">
            <summary>
            Dispose object, dereferencing or
            disposing the connection it is
            managing.
            </summary>
        </member>
        <member name="P:Csla.Data.ConnectionManager.RefCount">
            <summary>
            Gets the current reference count for this
            object.
            </summary>
        </member>
        <member name="T:Csla.Server.ObjectFactory">
            <summary>
            Base class to be used when creating a data portal
            factory object.
            </summary>
        </member>
        <member name="M:Csla.Server.ObjectFactory.SetIsReadOnly(System.Object,System.Boolean)">
            <summary>
            Sets the IsReadOnly property on the specified
            object, if possible.
            </summary>
            <param name="obj">Object on which to operate.</param>
            <param name="value">New value for IsReadOnly.</param>
        </member>
        <member name="M:Csla.Server.ObjectFactory.CheckRules(System.Object)">
            <summary>
            Calls the ValidationRules.CheckRules() method 
            on the specified object, if possible.
            </summary>
            <param name="obj">
            Object on which to call the method.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactory.MarkOld(System.Object)">
            <summary>
            Calls the MarkOld method on the specified
            object, if possible.
            </summary>
            <param name="obj">
            Object on which to call the method.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactory.MarkNew(System.Object)">
            <summary>
            Calls the MarkNew method on the specified
            object, if possible.
            </summary>
            <param name="obj">
            Object on which to call the method.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactory.MarkAsChild(System.Object)">
            <summary>
            Calls the MarkAsChild method on the specified
            object, if possible.
            </summary>
            <param name="obj">
            Object on which to call the method.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactory.LoadProperty``1(System.Object,Csla.PropertyInfo{``0},``0)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="obj">
            Object on which to call the method. 
            </param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Server.ObjectFactory.ReadProperty``1(System.Object,Csla.PropertyInfo{``0})">
            <summary>
            Reads a property's managed field value.
            </summary>
            <typeparam name="P"></typeparam>
            <param name="obj">
            Object on which to call the method. 
            </param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            No authorization checks occur when this method is called.
            </remarks>
        </member>
        <member name="M:Csla.Server.ObjectFactory.BypassPropertyChecks(Csla.Core.BusinessBase)">
            <summary>
            By wrapping this property inside Using block
            you can set property values on 
            <paramref name="businessObject">business object</paramref>
            without raising PropertyChanged events
            and checking user rights.
            </summary>
            <param name="businessObject">
            Object on with you would like to set property values
            </param>
            <returns>
            An instance of IDisposable object that allows
            bypassing of normal authorization checks during
            property setting.
            </returns>
        </member>
        <member name="M:Csla.Server.ObjectFactory.FieldExists(System.Object,Csla.Core.IPropertyInfo)">
            <summary>
            Gets a value indicating whether a managed field
            exists for the specified property.
            </summary>
            <param name="obj">Business object.</param>
            <param name="property">Property info object.</param>
        </member>
        <member name="M:Csla.Server.ObjectFactory.GetDeletedList``1(System.Object)">
            <summary>
            Gets the list of deleted items from 
            an editable collection.
            </summary>
            <typeparam name="C">Type of child objects in the colletion.</typeparam>
            <param name="obj">Editable collection object.</param>
        </member>
        <member name="T:Csla.Security.UsernameCriteria">
            <summary>
            Criteria class for passing a
            username/password pair to a
            custom identity class.
            </summary>
        </member>
        <member name="F:Csla.Security.UsernameCriteria.UsernameProperty">
            <summary>
            Username property definition.
            </summary>
        </member>
        <member name="F:Csla.Security.UsernameCriteria.PasswordProperty">
            <summary>
            Password property definition.
            </summary>
        </member>
        <member name="M:Csla.Security.UsernameCriteria.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the object.
            </summary>
            <param name="username">
            Username value.
            </param>
            <param name="password">
            Password value.
            </param>
        </member>
        <member name="M:Csla.Security.UsernameCriteria.#ctor">
            <summary>
            Creates a new instance of the object.
            </summary>
        </member>
        <member name="P:Csla.Security.UsernameCriteria.Username">
            <summary>
            Gets the username.
            </summary>
        </member>
        <member name="P:Csla.Security.UsernameCriteria.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="T:Csla.LinqBindingList`1">
            <summary>
            Provides a filtered view into an existing IList(Of T).
            </summary>
            <typeparam name="T">The type of the objects contained
            in the original list.</typeparam>
        </member>
        <member name="M:Csla.LinqBindingList`1.ApplyFilter">
            <summary>
            Applies a filter from the original Linq query to the view 
            </summary>
        </member>
        <member name="M:Csla.LinqBindingList`1.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="property">Property on which
            to build the index.</param>
        </member>
        <member name="M:Csla.LinqBindingList`1.AddNew">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="M:Csla.LinqBindingList`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list if the original list
            supports sorting.
            </summary>
            <param name="property">Property on which to sort.</param>
            <param name="direction">Direction of the sort.</param>
        </member>
        <member name="M:Csla.LinqBindingList`1.Find(System.String,System.Object)">
            <summary>
            Finds an item in the view
            </summary>
            <param name="propertyName">Name of the property to search</param>
            <param name="key">Value to find</param>
        </member>
        <member name="M:Csla.LinqBindingList`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="key">Key value for which to search.</param>
            <param name="property">Property to search for the key
            value.</param>
        </member>
        <member name="M:Csla.LinqBindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the ListChanged event.
            </summary>
            <param name="e">Parameter for the event.</param>
        </member>
        <member name="M:Csla.LinqBindingList`1.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="property">Property for which the
            index should be removed.</param>
        </member>
        <member name="M:Csla.LinqBindingList`1.RemoveSort">
            <summary>
            Removes any sort currently applied to the view.
            </summary>
        </member>
        <member name="M:Csla.LinqBindingList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of the list to
            an array.
            </summary>
            <param name="array">Array to receive the data.</param>
            <param name="arrayIndex">Starting array index.</param>
        </member>
        <member name="M:Csla.LinqBindingList`1.Add(`0)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="item">Item to be added.</param>
        </member>
        <member name="M:Csla.LinqBindingList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Csla.LinqBindingList`1.Contains(`0)">
            <summary>
            Determines whether the specified
            item is contained in the list.
            </summary>
            <param name="item">Item to find.</param>
            <returns><see langword="true"/> if the item is
            contained in the list.</returns>
        </member>
        <member name="M:Csla.LinqBindingList`1.IndexOf(`0)">
            <summary>
            Gets the 0-based index of an
            item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>0-based index of the item
            in the list.</returns>
        </member>
        <member name="M:Csla.LinqBindingList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the list.
            </summary>
            <param name="index">Index at
            which to insert the item.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Csla.LinqBindingList`1.Remove(`0)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns><see langword="true"/> if the 
            remove succeeds.</returns>
        </member>
        <member name="M:Csla.LinqBindingList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="index">Index of item
            to be removed.</param>
        </member>
        <member name="M:Csla.LinqBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new view based on the provided IList object.
            </summary>
            <param name="list">The IList (collection) containing the data.</param>
        </member>
        <member name="M:Csla.LinqBindingList`1.ToArray">
            <summary>
            Get an array containing all items in the list.
            </summary>
        </member>
        <member name="M:Csla.LinqBindingList`1.ToList``1">
            <summary>
            Gets a List object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.LinqBindingList`1.GetEnumerator">
            <summary>
            Gets an enumerator object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.LinqBindingList`1.GetSubset">
            <summary>
            Called from GetEnumerator and BuildFilterIndex.
            </summary>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Csla.LinqBindingList`1.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="P:Csla.LinqBindingList`1.AllowEdit">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.LinqBindingList`1.AllowNew">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.LinqBindingList`1.AllowRemove">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.LinqBindingList`1.IsSorted">
            <summary>
            Returns True if the view is currently sorted.
            </summary>
        </member>
        <member name="E:Csla.LinqBindingList`1.ListChanged">
            <summary>
            Raised to indicate that the list's data has changed.
            </summary>
            <remarks>
            This event is raised if the underling IList object's data changes
            (assuming the underling IList also implements the IBindingList
            interface). It is also raised if the filter
            is changed to indicate that the view's data has changed.
            </remarks>
        </member>
        <member name="P:Csla.LinqBindingList`1.SortDirection">
            <summary>
            Returns the direction of the current sort.
            </summary>
        </member>
        <member name="P:Csla.LinqBindingList`1.SortProperty">
            <summary>
            Returns the PropertyDescriptor of the current sort.
            </summary>
        </member>
        <member name="P:Csla.LinqBindingList`1.SupportsChangeNotification">
            <summary>
            Returns True since this object does raise the
            ListChanged event.
            </summary>
        </member>
        <member name="P:Csla.LinqBindingList`1.SupportsSearching">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.LinqBindingList`1.SupportsSorting">
            <summary>
            Returns True. Sorting is supported.
            </summary>
        </member>
        <member name="P:Csla.LinqBindingList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Csla.LinqBindingList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the list
            is read-only.
            </summary>
        </member>
        <member name="P:Csla.LinqBindingList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at 
            the specified index.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>Item at the specified index.</returns>
        </member>
        <member name="P:Csla.LinqBindingList`1.SourceList">
            <summary>
            Gets the source list over which this
            SortedBindingList is a view.
            </summary>
        </member>
        <member name="T:Csla.Core.ContextDictionary">
            <summary>
            Dictionary type that is serializable
            with the MobileFormatter.
            </summary>
        </member>
        <member name="T:Csla.Core.FieldManager.DefaultPropertyInfoFactory">
            <summary>
            Creates PropertyInfo objects.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.DefaultPropertyInfoFactory.Create``1(System.Type,System.String)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
        </member>
        <member name="M:Csla.Core.FieldManager.DefaultPropertyInfoFactory.Create``1(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.DefaultPropertyInfoFactory.Create``1(System.Type,System.String,System.String,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="relationship">Relationship with
            referenced object.</param>
        </member>
        <member name="M:Csla.Core.FieldManager.DefaultPropertyInfoFactory.Create``1(System.Type,System.String,System.String,``0)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="defaultValue">
            Default value for the property.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.DefaultPropertyInfoFactory.Create``1(System.Type,System.String,System.String,``0,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="defaultValue">
            Default value for the property.
            </param>
            <param name="relationship">Relationship with
            referenced object.</param>
        </member>
        <member name="T:Csla.C5.WrappedArray`1">
            <summary>
            An advanced interface to operations on an array. The array is viewed as an 
            <see cref="T:C5.IList`1"/> of fixed size, and so all operations that would change the
            size of the array will be invalid (and throw <see cref="T:C5.FixedSizeCollectionException"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.#ctor(`0[])">
            <summary>
            
            </summary>
            <param name="wrappedarray"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.FindAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Map``1(Csla.C5.Fun{`0,``0})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Map``1(Csla.C5.Fun{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <param name="mapper"></param>
            <param name="equalityComparer"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Insert(Csla.C5.IList{`0},`0)">
            <summary>
            
            </summary>
            <param name="pointer"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.InsertFirst(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.InsertLast(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.InsertAll``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="i"></param>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Remove">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.RemoveFirst">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.RemoveLast">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.View(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.ViewOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.LastViewOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Slide(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Slide(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.TrySlide(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.TrySlide(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Span(Csla.C5.IList{`0})">
            <summary>
            
            </summary>
            <param name="otherView"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Reverse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.IsSorted">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.IsSorted(System.Collections.Generic.IComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Shuffle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Shuffle(System.Random)">
            <summary>
            
            </summary>
            <param name="rnd"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.LastIndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.FindIndex(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.FindLastIndex(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.RemoveInterval(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.GetSequencedHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.SequencedEquals(Csla.C5.ISequenced{`0})">
            <summary>
            
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.GetUnsequencedHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.UnsequencedEquals(Csla.C5.ICollection{`0})">
            <summary>
            
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.ContainsCount(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Find(`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.FindOrAdd(`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Update(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Update(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.UpdateOrAdd(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.UpdateOrAdd(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Remove(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="removeditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.RemoveAllCopies(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.RemoveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.RetainAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Check">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Apply(Csla.C5.Act{`0})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Exists(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Find(Csla.C5.Fun{`0,System.Boolean},`0@)">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.All(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Choose">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Filter(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Show(System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="stringbuilder"></param>
            <param name="rest"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Backwards">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.FindLast(Csla.C5.Fun{`0,System.Boolean},`0@)">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Dispose">
            <summary>
            Dispose this if a view else operation is illegal 
            </summary>
            <exception cref="T:Csla.C5.FixedSizeCollectionException">If not a view</exception>
        </member>
        <member name="M:Csla.C5.WrappedArray`1.Clone">
            <summary>
            Make a shallow copy of this WrappedArray.
            
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.First">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.Last">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.FIFO">
            <summary>
            ???? should we throw NotRelevantException
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.Underlying">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.Offset">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.IsValid">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.IndexingSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.Item(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.ContainsSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.IsReadOnly">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.AllowsDuplicates">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.EqualityComparer">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.DuplicatesByCounting">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.ListenableEvents">
            <summary>
            No listeners may be installed
            </summary>
            <value>0</value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.ActiveEvents">
            <summary>
            No listeners ever installed
            </summary>
            <value>0</value>
        </member>
        <member name="E:Csla.C5.WrappedArray`1.CollectionChanged">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="E:Csla.C5.WrappedArray`1.CollectionCleared">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="E:Csla.C5.WrappedArray`1.ItemsAdded">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="E:Csla.C5.WrappedArray`1.ItemInserted">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="E:Csla.C5.WrappedArray`1.ItemsRemoved">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="E:Csla.C5.WrappedArray`1.ItemRemovedAt">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.IsEmpty">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.Count">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.CountSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.WrappedArray`1.Direction">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Csla.C5.ArrayList`1">
             <summary>
             A list collection based on a plain dynamic array data structure.
             Expansion of the internal array is performed by doubling on demand. 
             The internal array is only shrinked by the Clear method. 
            
             <i>When the FIFO property is set to false this class works fine as a stack of T.
             When the FIFO property is set to true the class will function as a (FIFO) queue
             but very inefficiently, use a LinkedList (<see cref="T:C5.LinkedList`1"/>) instead.</i>
             </summary>
        </member>
        <member name="F:Csla.C5.ArrayList`1.isValid">
            <summary>
            Has this list or view not been invalidated by some operation (by someone calling Dispose())
            </summary>
        </member>
        <member name="F:Csla.C5.ArrayList`1.underlying">
            <summary>
            The underlying list if we are a view, null else.
            </summary>
        </member>
        <member name="F:Csla.C5.ArrayList`1.fIFO">
            <summary>
            The underlying field of the FIFO property
            </summary>
        </member>
        <member name="M:Csla.C5.ArrayList`1.addtosize(System.Int32)">
            <summary>
            Increment or decrement the private size fields
            </summary>
            <param name="delta">Increment (with sign)</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.expand">
            <summary>
            Double the size of the internal array.
            </summary>
        </member>
        <member name="M:Csla.C5.ArrayList`1.expand(System.Int32,System.Int32)">
            <summary>
            Expand the internal array, resetting the index of the first unused element.
            </summary>
            <param name="newcapacity">The new capacity (will be rouded upwards to a power of 2).</param>
            <param name="newsize">The new count of </param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.updatecheck">
            <summary>
            Check if it is valid to perform updates and increment stamp if so.
            </summary>
            <exception cref="T:Csla.C5.ViewDisposedException"> If check fails by this list being a disposed view.</exception>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> If check fails by this being a read only list.</exception>
        </member>
        <member name="M:Csla.C5.ArrayList`1.validitycheck">
            <summary>
            Check if we are a view that the underlying list has only been updated through us.
            <para>This method should be called from enumerators etc to guard against 
            modification of the base collection.</para>
            </summary>
            <exception cref="T:Csla.C5.ViewDisposedException"> if check fails.</exception>
        </member>
        <member name="M:Csla.C5.ArrayList`1.modifycheck(System.Int32)">
            <summary>
            Check that the list has not been updated since a particular time.
            <para>To be used by enumerators and range </para>
            </summary>
            <exception cref="T:Csla.C5.ViewDisposedException"> If check fails by this list being a disposed view.</exception>
            <exception cref="T:Csla.C5.CollectionModifiedException">If the list *has* beeen updated since that  time..</exception>
            <param name="stamp">The stamp indicating the time.</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.indexOf(`0)">
            <summary>
            Internal version of IndexOf without modification checks.
            </summary>
            <param name="item">Item to look for</param>
            <returns>The index of first occurrence</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.lastIndexOf(`0)">
            <summary>
            Internal version of LastIndexOf without modification checks.
            </summary>
            <param name="item">Item to look for</param>
            <returns>The index of last occurrence</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.insert(System.Int32,`0)">
            <summary>
            Internal version of Insert with no modification checks.
            </summary>
            <param name="i">Index to insert at</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.removeAt(System.Int32)">
            <summary>
            Internal version of RemoveAt with no modification checks.
            </summary>
            <param name="i">Index to remove at</param>
            <returns>The removed item</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.fixViewsAfterInsert(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="added">The actual number of inserted nodes</param>
            <param name="realInsertionIndex"></param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.fixViewsBeforeRemove(System.Int32,System.Int32)">
            <summary>
            Fix offsets and sizes of other views before removing an interval from this 
            </summary>
            <param name="start">the start of the interval relative to the array/underlying</param>
            <param name="count"></param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.viewPosition(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="otherOffset"></param>
            <param name="otherSize"></param>
            <returns>The position of View(otherOffset, otherSize) wrt. this view</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.#ctor">
            <summary>
            Create an array list with default item equalityComparer and initial capacity 8 items.
            </summary>
        </member>
        <member name="M:Csla.C5.ArrayList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create an array list with external item equalityComparer and initial capacity 8 items.
            </summary>
            <param name="itemequalityComparer">The external item equalityComparer</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.#ctor(System.Int32)">
            <summary>
            Create an array list with default item equalityComparer and prescribed initial capacity.
            </summary>
            <param name="capacity">The prescribed capacity</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create an array list with external item equalityComparer and prescribed initial capacity.
            </summary>
            <param name="capacity">The prescribed capacity</param>
            <param name="itemequalityComparer">The external item equalityComparer</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Insert(System.Int32,`0)">
             <summary>
             Insert an item at a specific index location in this list. 
            </summary>
             <exception cref="T:System.IndexOutOfRangeException"> if i is negative or
             &gt; the size of the collection. </exception>
             <param name="index">The index at which to insert.</param>
             <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Insert(Csla.C5.IList{`0},`0)">
            <summary>
            Insert an item at the end of a compatible view, used as a pointer.
            <para>The <code>pointer</code> must be a view on the same list as
            <code>this</code> and the endpoitn of <code>pointer</code> must be
            a valid insertion point of <code>this</code></para>
            </summary>
            <exception cref="T:Csla.C5.IncompatibleViewException">If <code>pointer</code> 
            is not a view on or the same list as <code>this</code></exception>
            <exception cref="T:System.IndexOutOfRangeException"><b>??????</b> if the endpoint of 
             <code>pointer</code> is not inside <code>this</code></exception>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> if the list has
            <code>AllowsDuplicates==false</code> and the item is 
            already in the list.</exception>
            <param name="pointer"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.InsertAll``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insert into this list all items from an enumerable collection starting 
            at a particular index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"> if index is negative or
            &gt; the size of the collection.</exception>
            <param name="index">Index to start inserting at</param>
            <param name="items">Items to insert</param>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Csla.C5.ArrayList`1.InsertFirst(`0)">
            <summary>
            Insert an item at the front of this list;
            </summary>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.InsertLast(`0)">
            <summary>
            Insert an item at the back of this list.
            </summary>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.FindAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create a new list consisting of the items of this list satisfying a 
            certain predicate.
            <para>The new list will be of type ArrayList</para>
            </summary>
            <param name="filter">The filter delegate defining the predicate.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Map``1(Csla.C5.Fun{`0,``0})">
            <summary>
            Create a new list consisting of the results of mapping all items of this
            list. The new list will use the default item equalityComparer for the item type V.
            <para>The new list will be of type ArrayList</para>
            </summary>
            <typeparam name="V">The type of items of the new list</typeparam>
            <param name="mapper">The delegate defining the map.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Map``1(Csla.C5.Fun{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create a new list consisting of the results of mapping all items of this
            list. The new list will use a specified item equalityComparer for the item type.
            <para>The new list will be of type ArrayList</para>
            </summary>
            <typeparam name="V">The type of items of the new list</typeparam>
            <param name="mapper">The delegate defining the map.</param>
            <param name="itemequalityComparer">The item equalityComparer to use for the new list</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Remove">
            <summary>
            Remove one item from the list: from the front if <code>FIFO</code>
            is true, else from the back.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.RemoveFirst">
            <summary>
            Remove one item from the fromnt of the list.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.RemoveLast">
            <summary>
            Remove one item from the back of the list.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.View(System.Int32,System.Int32)">
            <summary>
            Create a list view on this list. 
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the start or count is negative
            or the range does not fit within list.</exception>
            <param name="start">The index in this list of the start of the view.</param>
            <param name="count">The size of the view.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.ViewOf(`0)">
            <summary>
            Create a list view on this list containing the (first) occurrence of a particular item.
            <para>Returns <code>null</code> if the item is not in this list.</para>
            </summary>
            <param name="item">The item to find.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.LastViewOf(`0)">
            <summary>
            Create a list view on this list containing the last occurrence of a particular item. 
            <para>Returns <code>null</code> if the item is not in this list.</para>
            </summary>
            <param name="item">The item to find.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Slide(System.Int32)">
            <summary>
            Slide this list view along the underlying list.
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the operation
            would bring either end of the view outside the underlying list.</exception>
            <param name="offset">The signed amount to slide: positive to slide
            towards the end.</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Slide(System.Int32,System.Int32)">
            <summary>
            Slide this list view along the underlying list, changing its size.
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the operation
            would bring either end of the view outside the underlying list.</exception>
            <param name="offset">The signed amount to slide: positive to slide
            towards the end.</param>
            <param name="size">The new size of the view.</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.TrySlide(System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.TrySlide(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Span(Csla.C5.IList{`0})">
            <summary>
            
            <para>Returns null if <code>otherView</code> is strictly to the left of this view</para>
            </summary>
            <param name="otherView"></param>
            <exception cref="T:Csla.C5.IncompatibleViewException">If otherView does not have the same underlying list as this</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Reverse">
            <summary>
            Reverst the list so the items are in the opposite sequence order.
            </summary>
        </member>
        <member name="M:Csla.C5.ArrayList`1.IsSorted">
            <summary>
            Check if this list is sorted according to the default sorting order
            for the item type T, as defined by the <see cref="T:C5.Comparer`1"/> class 
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">if T is not comparable</exception>
            <returns>True if the list is sorted, else false.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.IsSorted(System.Collections.Generic.IComparer{`0})">
            <summary>
            Check if this list is sorted according to a specific sorting order.
            </summary>
            <param name="c">The comparer defining the sorting order.</param>
            <returns>True if the list is sorted, else false.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Sort">
            <summary>
            Sort the items of the list according to the default sorting order
            for the item type T, as defined by the Comparer[T] class 
            (<see cref="T:C5.Comparer`1"/>).
            </summary>
            <exception cref="T:System.InvalidOperationException">if T is not comparable</exception>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort the items of the list according to a specific sorting order.
            </summary>
            <param name="comparer">The comparer defining the sorting order.</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Shuffle">
            <summary>
            Randomly shuffle the items of this list. 
            </summary>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Shuffle(System.Random)">
            <summary>
            Shuffle the items of this list according to a specific random source.
            </summary>
            <param name="rnd">The random source.</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.IndexOf(`0)">
            <summary>
            Search for an item in the list going forwrds from the start.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of item from start.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.LastIndexOf(`0)">
            <summary>
            Search for an item in the list going backwords from the end.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of item from the end.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at a specific position of the list.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"> if index is negative or
            &gt;= the size of the collection.</exception>
            <param name="index">The index of the item to remove.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.RemoveInterval(System.Int32,System.Int32)">
            <summary>
            Remove all items in an index interval.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If <code>start</code>
            and <code>count</code> does not describe a valid interval in the list</exception> 
            <param name="start">The index of the first item to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.GetUnsequencedHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.UnsequencedEquals(Csla.C5.ICollection{`0})">
            <summary>
            
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Contains(`0)">
            <summary>
            Check if this collection contains (an item equivalent to according to the
            itemequalityComparer) a particular value.
            </summary>
            <param name="item">The value to check for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Find(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Update(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value. This will only update the first 
            mathching item.
            </summary>
            <param name="item">Value to update.</param>
            <returns>True if the item was found and hence updated.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Update(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.FindOrAdd(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found. Else, add the item to the collection.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the item was found (hence not added).</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.UpdateOrAdd(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value. This will only update the first 
            mathching item.
            </summary>
            <param name="item">Value to update.</param>
            <returns>True if the item was found and hence updated.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.UpdateOrAdd(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Remove(`0)">
            <summary>
            Remove a particular item from this list. The item will be searched 
            for from the end of the list if <code>FIFO == false</code> (the default), 
            else from the start.
            </summary>
            <param name="item">The value to remove.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Remove(`0,`0@)">
            <summary>
            Remove the first copy of a particular item from this collection if found.
            If an item was removed, report a binary copy of the actual item removed in 
            the argument. The item will be searched 
            for from the end of the list if <code>FIFO == false</code> (the default), 
            else from the start.
            </summary>
            <param name="item">The value to remove.</param>
            <param name="removeditem">The removed value.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.RemoveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items in another collection from this one, taking multiplicities into account.
            Matching items will be removed from the front. Current implementation is not optimal.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to remove.</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.RemoveAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Clear">
            <summary>
            Remove all items from this collection, resetting internal array size.
            </summary>
        </member>
        <member name="M:Csla.C5.ArrayList`1.RetainAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items not in some other collection from this one, taking multiplicities into account.
            Items are retained front first.  
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to retain.</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.RetainAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if this collection contains all the values in another collection,
            taking multiplicities into account.
            Current implementation is not optimal.
            </summary>
            <param name="items">The </param>
            <typeparam name="U"></typeparam>
            <returns>True if all values in <code>items</code>is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.ContainsCount(`0)">
            <summary>
            Count the number of items of the collection equal to a particular value.
            Returns 0 if and only if the value is not in the collection.
            </summary>
            <param name="item">The value to count.</param>
            <returns>The number of copies found.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.RemoveAllCopies(`0)">
            <summary>
            Remove all items equal to a given one.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Check">
            <summary>
            Check the integrity of the internal data structures of this array list.
            </summary>
            <returns>True if check does not fail.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Add(`0)">
            <summary>
            Add an item to end of this list.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add the elements from another collection to this collection.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Csla#C5#IDirectedEnumerable{T}#Backwards">
            <summary>
            Create a collection containing the same items as this collection, but
            whose enumerator will enumerate the items backwards. The new collection
            will become invalid if the original is modified. Method typicaly used as in
            <code>foreach (T x in coll.Backwards()) {...}</code>
            </summary>
            <returns>The backwards collection.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.GetEnumerator">
            <summary>
            Create an enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Push(`0)">
            <summary>
            Push an item to the top of the stack.
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Pop">
            <summary>
            Pop the item at the top of the stack from the stack.
            </summary>
            <returns>The popped item.</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Enqueue(`0)">
            <summary>
            Enqueue an item at the back of the queue. 
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Dequeue">
            <summary>
            Dequeue an item from the front of the queue.
            </summary>
            <returns>The item</returns>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Dispose">
            <summary>
            Invalidate this list. If a view, just invalidate the view. 
            If not a view, invalidate the list and all views on it.
            </summary>
        </member>
        <member name="M:Csla.C5.ArrayList`1.Clone">
            <summary>
            Make a shallow copy of this ArrayList.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.ArrayList`1.underlyingsize">
            <summary>
            The size of the underlying list.
            </summary>
        </member>
        <member name="P:Csla.C5.ArrayList`1.ListenableEvents">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.ArrayList`1.First">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <value>The first item in this list.</value>
        </member>
        <member name="P:Csla.C5.ArrayList`1.Last">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <value>The last item in this list.</value>
        </member>
        <member name="P:Csla.C5.ArrayList`1.FIFO">
            <summary>
            Since <code>Add(T item)</code> always add at the end of the list,
            this describes if list has FIFO or LIFO semantics.
            </summary>
            <value>True if the <code>Remove()</code> operation removes from the
            start of the list, false if it removes from the end. The default for a new array list is false.</value>
        </member>
        <member name="P:Csla.C5.ArrayList`1.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.ArrayList`1.Item(System.Int32)">
            <summary>
            On this list, this indexer is read/write.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"> if index is negative or
            &gt;= the size of the collection.</exception>
            <value>The index'th item of this list.</value>
            <param name="index">The index of the item to fetch or store.</param>
        </member>
        <member name="P:Csla.C5.ArrayList`1.IndexingSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.ArrayList`1.Underlying">
            <summary>
            Null if this list is not a view.
            </summary>
            <value>Underlying list for view.</value>
        </member>
        <member name="P:Csla.C5.ArrayList`1.Offset">
            <summary>
            </summary>
            <value>Offset for this list view or 0 for an underlying list.</value>
        </member>
        <member name="P:Csla.C5.ArrayList`1.IsValid">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.ArrayList`1.ContainsSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant).
            </summary>
            <value>Speed.Linear</value>
        </member>
        <member name="P:Csla.C5.ArrayList`1.AllowsDuplicates">
            <summary>
            
            </summary>
            <value>True, indicating array list has bag semantics.</value>
        </member>
        <member name="P:Csla.C5.ArrayList`1.DuplicatesByCounting">
            <summary>
            By convention this is true for any collection with set semantics.
            </summary>
            <value>True if only one representative of a group of equal items 
            is kept in the collection together with the total count.</value>
        </member>
        <member name="P:Csla.C5.ArrayList`1.Count">
            <summary>
            
            </summary>
            <value>The number of items in this collection</value>
        </member>
        <member name="T:Csla.C5.ArrayList`1.Position">
            <summary>
            During RemoveAll, we need to cache the original endpoint indices of views (??? also for ArrayList?)
            </summary>
        </member>
        <member name="T:Csla.C5.ArrayList`1.ViewHandler">
            <summary>
            Handle the update of (other) views during a multi-remove operation.
            </summary>
        </member>
        <member name="M:Csla.C5.ArrayList`1.ViewHandler.skipEndpoints(System.Int32,System.Int32)">
            <summary>
            This is to be called with realindex pointing to the first node to be removed after a (stretch of) node that was not removed
            </summary>
            <param name="removed"></param>
            <param name="realindex"></param>
        </member>
        <member name="T:Csla.C5.TreeBag`1">
            <summary>
            An implementation of Red-Black trees as an indexed, sorted collection with bag semantics,
            cf. <a href="litterature.htm#CLRS">CLRS</a>. (<see cref="T:C5.TreeBag`1"/> for an 
            implementation with set semantics).
            <br/>
            The comparer (sorting order) may be either natural, because the item type is comparable 
            (generic: <see cref="T:C5.IComparable`1"/> or non-generic: System.IComparable) or it can
            be external and supplied by the user in the constructor.
            <br/>
            Each distinct item is only kept in one place in the tree - together with the number
            of times it is a member of the bag. Thus, if two items that are equal according
            </summary>
        </member>
        <member name="M:Csla.C5.TreeBag`1.left(Csla.C5.TreeBag{`0}.Node)">
            <summary>
            Fetch the left child of n taking node-copying persistence into
            account if relevant. 
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.#ctor">
            <summary>
            Create a red-black tree collection with natural comparer and item equalityComparer.
            We assume that if <code>T</code> is comparable, its default equalityComparer 
            will be compatible with the comparer.
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">If <code>T</code> is not comparable.
            </exception>
        </member>
        <member name="M:Csla.C5.TreeBag`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a red-black tree collection with an external comparer. 
            <para>The itemequalityComparer will be a compatible 
            <see cref="T:C5.ComparerZeroHashCodeEqualityComparer`1"/> since the 
            default equalityComparer for T (<see cref="P:C5.EqualityComparer`1.Default"/>)
            is unlikely to be compatible with the external comparer. This makes the
            tree inadequate for use as item in a collection of unsequenced or sequenced sets or bags
            (<see cref="T:C5.ICollection`1"/> and <see cref="T:C5.ISequenced`1"/>)
            </para>
            </summary>
            <param name="comparer">The external comparer</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a red-black tree collection with an external comparer and an external
            item equalityComparer, assumed consistent.
            </summary>
            <param name="comparer">The external comparer</param>
            <param name="equalityComparer">The external item equalityComparer</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Choose">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException">If tree is empty</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.GetEnumerator">
            <summary>
            Create an enumerator for this tree
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.addIterative(`0,`0@,System.Boolean,System.Boolean@)">
            <summary>
            Add item to tree. If already there, return the found item in the second argument.
            </summary>
            <param name="item">Item to add</param>
            <param name="founditem">item found</param>
            <param name="update">whether item in node should be updated</param>
            <param name="wasfound">true if found in bag, false if not found or tre is a set</param>
            <returns>True if item was added</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Add(`0)">
            <summary>
            Add an item to this collection if possible. If this collection has set
            semantics, the item will be added if not already in the collection. If
            bag semantics, the item will always be added.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if item was added.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Add an item to this collection if possible. If this collection has set
            semantics, the item will be added if not already in the collection. If
            bag semantics, the item will always be added.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add the elements from another collection with a more specialized item type 
            to this collection. If this
            collection has set semantics, only items not already in the collection
            will be added.
            </summary>
            <typeparam name="U">The type of items to add</typeparam>
            <param name="items">The items to add</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.AddSorted``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add all the items from another collection with an enumeration order that 
            is increasing in the items. <para>The idea is that the implementation may use
            a faster algorithm to merge the two collections.</para>
            <exception cref="T:System.ArgumentException"/> if the enumerated items turns out
            not to be in increasing order.
            </summary>
            <param name="items">The collection to add.</param>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Contains(`0)">
            <summary>
            Check if this collection contains (an item equivalent to according to the
            itemequalityComparer) a particular value.
            </summary>
            <param name="item">The value to check for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Find(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.FindOrAdd(`0@)">
             <summary>
             Find or add the item to the tree. If the tree does not contain
             an item equivalent to this item add it, else return the exisiting
             one in the ref argument. 
            
             </summary>
             <param name="item"></param>
             <returns>True if item was found</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Update(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value. If the collection has bag semantics,
            this updates all equivalent copies in
            the collection.
            </summary>
            <param name="item">Value to update.</param>
            <returns>True if the item was found and hence updated.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Update(`0,`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            with a binary copy of the supplied value. If the collection has bag semantics,
            this updates all equivalent copies in
            the collection.
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.UpdateOrAdd(`0)">
             <summary>
             Check if this collection contains an item equivalent according to the
             itemequalityComparer to a particular value. If so, update the item in the collection 
             with a binary copy of the supplied value; else add the value to the collection. 
            
             <i>NOTE: the bag implementation is currently wrong! ?????</i>
             </summary>
             <param name="item">Value to add or update.</param>
             <returns>True if the item was found and updated (hence not added).</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.UpdateOrAdd(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Remove(`0)">
            <summary>
            Remove a particular item from this collection. If the collection has bag
            semantics only one copy equivalent to the supplied item is removed. 
            </summary>
            <param name="item">The value to remove.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Remove(`0,`0@)">
            <summary>
            Remove a particular item from this collection if found. If the collection
            has bag semantics only one copy equivalent to the supplied item is removed,
            which one is implementation dependent. 
            If an item was removed, report a binary copy of the actual item removed in 
            the argument.
            </summary>
            <param name="item">The value to remove.</param>
            <param name="removeditem">The removed value.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.removeIterative(`0@,System.Boolean,System.Int32@)">
            <summary>
            
            </summary>
            <param name="item">input: item to remove; output: item actually removed</param>
            <param name="all">If true, remove all copies</param>
            <param name="wasRemoved"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Clear">
            <summary>
            Remove all items from this collection.
            </summary>
        </member>
        <member name="M:Csla.C5.TreeBag`1.RemoveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items in another collection from this one. If this collection
            has bag semantics, take multiplicities into account.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to remove.</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.RetainAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items not in some other collection from this one. If this collection
            has bag semantics, take multiplicities into account.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to retain.</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if this collection contains all the values in another collection.
            If this collection has bag semantics (<code>AllowsDuplicates==true</code>)
            the check is made with respect to multiplicities, else multiplicities
            are not taken into account.
            </summary>
            <param name="items">The </param>
            <typeparam name="U"></typeparam>
            <returns>True if all values in <code>items</code>is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.FindAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create a new indexed sorted collection consisting of the items of this
            indexed sorted collection satisfying a certain predicate.
            </summary>
            <param name="filter">The filter delegate defining the predicate.</param>
            <returns>The new indexed sorted collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Map``1(Csla.C5.Fun{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Create a new indexed sorted collection consisting of the results of
            mapping all items of this list.
            <exception cref="T:System.ArgumentException"/> if the map is not increasing over 
            the items of this collection (with respect to the two given comparison 
            relations).
            </summary>
            <param name="mapper">The delegate definging the map.</param>
            <param name="c">The comparion relation to use for the result.</param>
            <returns>The new sorted collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.ContainsCount(`0)">
            <summary>
            Count the number of items of the collection equal to a particular value.
            Returns 0 if and only if the value is not in the collection.
            </summary>
            <param name="item">The value to count.</param>
            <returns>The number of copies found.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.RemoveAllCopies(`0)">
            <summary>
            Remove all items equivalent to a given value.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.IndexOf(`0)">
            <summary>
            Searches for an item in this indexed collection going forwards from the start.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of first occurrence from start of the item
            if found, else the two-complement 
            (always negative) of the index at which the item would be put if it was added.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.LastIndexOf(`0)">
            <summary>
            Searches for an item in the tree going backwords from the end.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of last occurrence from the end of item if found, 
            else the two-complement (always negative) of the index at which 
            the item would be put if it was added.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at a specific position of the list.
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt;= the size of the collection.
            </summary>
            <param name="i">The index of the item to remove.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.RemoveInterval(System.Int32,System.Int32)">
            <summary>
            Remove all items in an index interval.
            <exception cref="T:System.IndexOutOfRangeException"/>???. 
            </summary>
            <param name="start">The index of the first item to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Backwards">
            <summary>
            Create a collection containing the same items as this collection, but
            whose enumerator will enumerate the items backwards. The new collection
            will become invalid if the original is modified. Method typicaly used as in
            <code>foreach (T x in coll.Backwards()) {...}</code>
            </summary>
            <returns>The backwards collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.FindMin">
            <summary>
            Find the current least item of this priority queue.
            </summary>
            <returns>The least item.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.DeleteMin">
            <summary>
            Remove the least item from this  priority queue.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.FindMax">
            <summary>
            Find the current largest item of this priority queue.
            </summary>
            <returns>The largest item.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.DeleteMax">
            <summary>
            Remove the largest item from this  priority queue.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.TryPredecessor(`0,`0@)">
            <summary>
            Find the strict predecessor of item in the sorted collection,
            that is, the greatest item in the collection smaller than the item.
            </summary>
            <param name="item">The item to find the predecessor for.</param>
            <param name="res">The predecessor, if any; otherwise the default value for T.</param>
            <returns>True if item has a predecessor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.TrySuccessor(`0,`0@)">
            <summary>
            Find the strict successor of item in the sorted collection,
            that is, the least item in the collection greater than the supplied value.
            </summary>
            <param name="item">The item to find the successor for.</param>
            <param name="res">The successor, if any; otherwise the default value for T.</param>
            <returns>True if item has a successor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.TryWeakPredecessor(`0,`0@)">
            <summary>
            Find the weak predecessor of item in the sorted collection,
            that is, the greatest item in the collection smaller than or equal to the item.
            </summary>
            <param name="item">The item to find the weak predecessor for.</param>
            <param name="res">The weak predecessor, if any; otherwise the default value for T.</param>
            <returns>True if item has a weak predecessor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.TryWeakSuccessor(`0,`0@)">
            <summary>
            Find the weak successor of item in the sorted collection,
            that is, the least item in the collection greater than or equal to the supplied value.
            </summary>
            <param name="item">The item to find the weak successor for.</param>
            <param name="res">The weak successor, if any; otherwise the default value for T.</param>
            <returns>True if item has a weak successor; otherwise false.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Predecessor(`0)">
            <summary>
            Find the strict predecessor in the sorted collection of a particular value,
            i.e. the largest item in the collection less than the supplied value.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is less than or equal to the minimum of this collection.)</exception>
            <param name="item">The item to find the predecessor for.</param>
            <returns>The predecessor.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.WeakPredecessor(`0)">
            <summary>
            Find the weak predecessor in the sorted collection of a particular value,
            i.e. the largest item in the collection less than or equal to the supplied value.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is less than the minimum of this collection.)</exception>
            <param name="item">The item to find the weak predecessor for.</param>
            <returns>The weak predecessor.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Successor(`0)">
            <summary>
            Find the strict successor in the sorted collection of a particular value,
            i.e. the least item in the collection greater than the supplied value.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is greater than or equal to the maximum of this collection.)</exception>
            <param name="item">The item to find the successor for.</param>
            <returns>The successor.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.WeakSuccessor(`0)">
            <summary>
            Find the weak successor in the sorted collection of a particular value,
            i.e. the least item in the collection greater than or equal to the supplied value.
            <exception cref="T:Csla.C5.NoSuchItemException"> if no such element exists (the
            supplied  value is greater than the maximum of this collection.)</exception>
            </summary>
            <param name="item">The item to find the weak successor for.</param>
            <returns>The weak successor.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.RangeFrom(`0)">
            <summary>
            Query this sorted collection for items greater than or equal to a supplied value.
            </summary>
            <param name="bot">The lower bound (inclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.RangeFromTo(`0,`0)">
            <summary>
            Query this sorted collection for items between two supplied values.
            </summary>
            <param name="bot">The lower bound (inclusive).</param>
            <param name="top">The upper bound (exclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.RangeTo(`0)">
            <summary>
            Query this sorted collection for items less than a supplied value.
            </summary>
            <param name="top">The upper bound (exclusive).</param>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.RangeAll">
            <summary>
            Create a directed collection with the same items as this collection.
            </summary>
            <returns>The result directed collection.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Cut(System.IComparable{`0},`0@,System.Boolean@,`0@,System.Boolean@)">
            <summary>
            Perform a search in the sorted collection for the ranges in which a
            non-increasing (i.e. weakly decrerasing) function from the item type to 
            <code>int</code> is
            negative, zero respectively positive. If the supplied cut function is
            not non-increasing, the result of this call is undefined.
            </summary>
            <param name="c">The cut function <code>T</code> to <code>int</code>, given
            as an <code>IComparable&lt;T&gt;</code> object, where the cut function is
            the <code>c.CompareTo(T that)</code> method.</param>
            <param name="low">Returns the largest item in the collection, where the
            cut function is positive (if any).</param>
            <param name="lowIsValid">True if the cut function is positive somewhere
            on this collection.</param>
            <param name="high">Returns the least item in the collection, where the
            cut function is negative (if any).</param>
            <param name="highIsValid">True if the cut function is negative somewhere
            on this collection.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.CountFrom(`0)">
            <summary>
            Determine the number of items at or above a supplied threshold.
            </summary>
            <param name="bot">The lower bound (inclusive)</param>
            <returns>The number of matcing items.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.CountFromTo(`0,`0)">
            <summary>
            Determine the number of items between two supplied thresholds.
            </summary>
            <param name="bot">The lower bound (inclusive)</param>
            <param name="top">The upper bound (exclusive)</param>
            <returns>The number of matcing items.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.CountTo(`0)">
            <summary>
            Determine the number of items below a supplied threshold.
            </summary>
            <param name="top">The upper bound (exclusive)</param>
            <returns>The number of matcing items.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.RemoveRangeFrom(`0)">
            <summary>
            Remove all items of this collection above or at a supplied threshold.
            </summary>
            <param name="low">The lower threshold (inclusive).</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.RemoveRangeFromTo(`0,`0)">
            <summary>
            Remove all items of this collection between two supplied thresholds.
            </summary>
            <param name="low">The lower threshold (inclusive).</param>
            <param name="hi">The upper threshold (exclusive).</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.RemoveRangeTo(`0)">
            <summary>
            Remove all items of this collection below a supplied threshold.
            </summary>
            <param name="hi">The upper threshold (exclusive).</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Dispose">
            <summary>
            If this tree is a snapshot, remove registration in base tree
            </summary>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Snapshot">
            <summary>
            Make a (read-only) snapshot of this collection.
            </summary>
            <returns>The snapshot.</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.minidump(Csla.C5.TreeBag{`0}.Node,System.String)">
            <summary>
            Display this node on the console, and recursively its subnodes.
            </summary>
            <param name="n">Node to display</param>
            <param name="space">Indentation</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.dump">
            <summary>
            Print the tree structure to the console stdout.
            </summary>
        </member>
        <member name="M:Csla.C5.TreeBag`1.dump(System.String)">
            <summary>
            Print the tree structure to the console stdout.
            </summary>
        </member>
        <member name="M:Csla.C5.TreeBag`1.dump(System.String,System.String)">
            <summary>
            Display this tree on the console.
            </summary>
            <param name="msg">Identifying string of this call to dump</param>
            <param name="err">Extra (error)message to include</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.massert(System.Boolean,Csla.C5.TreeBag{`0}.Node,System.String,System.IO.TextWriter)">
            <summary>
            Print warning m on o if b is false.
            </summary>
            <param name="b">Condition that should hold</param>
            <param name="n">Place (used for id display)</param>
            <param name="m">Message</param>
            <param name="o">Output stream</param>
            <returns>b</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Check(System.String)">
            <summary>
            Checks red-black invariant. Dumps tree to console if bad
            </summary>
            <param name="name">Title of dump</param>
            <returns>false if invariant violation</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Check">
            <summary>
            Checks red-black invariant. Dumps tree to console if bad
            </summary>
            <returns>false if invariant violation</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Clone">
            <summary>
            Make a shallow copy of this TreeBag.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.TreeBag`1.ListenableEvents">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.TreeBag`1.AllowsDuplicates">
            <summary></summary>
            <value>True since this collection has bag semantics.</value>
        </member>
        <member name="P:Csla.C5.TreeBag`1.DuplicatesByCounting">
            <summary>
            By convention this is true for any collection with set semantics.
            </summary>
            <value>True if only one representative of a group of equal items 
            is kept in the collection together with the total count.</value>
        </member>
        <member name="P:Csla.C5.TreeBag`1.ContainsSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant).
            </summary>
            <value>Speed.Log</value>
        </member>
        <member name="P:Csla.C5.TreeBag`1.Item(System.Int32)">
            <summary>
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt;= the size of the collection.
            </summary>
            <value>The i'th item of this list.</value>
            <param name="i">the index to lookup</param>
        </member>
        <member name="P:Csla.C5.TreeBag`1.IndexingSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.TreeBag`1.Item(System.Int32,System.Int32)">
            <summary>
            <exception cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <value>The directed collection of items in a specific index interval.</value>
            <param name="start">The low index of the interval (inclusive).</param>
            <param name="end">The high index of the interval (exclusive).</param>
        </member>
        <member name="P:Csla.C5.TreeBag`1.Comparer">
            <summary>
            The comparer object supplied at creation time for this collection
            </summary>
            <value>The comparer</value>
        </member>
        <member name="T:Csla.C5.TreeBag`1.Node">
            <summary>
            The type of node in a Red-Black binary tree
            </summary>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Node.update(Csla.C5.TreeBag{`0}.Node@,System.Boolean,Csla.C5.TreeBag{`0}.Node,System.Int32,System.Int32)">
            <summary>
            Update a child pointer
            </summary>
            <param name="cursor"></param>
            <param name="leftnode"></param>
            <param name="child"></param>
            <param name="maxsnapid"></param>
            <param name="generation"></param>
            <returns>True if node was *copied*</returns>
        </member>
        <member name="T:Csla.C5.TreeBag`1.Enumerator">
            <summary>
            An enumerator for a red-black tree collection. Based on an explicit stack
            of subtrees waiting to be enumerated. Currently only used for the tree set 
            enumerators (tree bag enumerators use an iterator block based enumerator).
            </summary>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Enumerator.#ctor(Csla.C5.TreeBag{`0})">
            <summary>
            Create a tree enumerator
            </summary>
            <param name="tree">The red-black tree to enumerate</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Enumerator.MoveNext">
            <summary>
            Move enumerator to next item in tree, or the first item if
            this is the first call to MoveNext. 
            <exception cref="T:Csla.C5.CollectionModifiedException"/> if underlying tree was modified.
            </summary>
            <returns>True if enumerator is valid now</returns>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Enumerator.Dispose">
            <summary>
            Call Dispose(true) and then suppress finalization of this enumerator.
            </summary>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Enumerator.Dispose(System.Boolean)">
            <summary>
            Remove the internal data (notably the stack array).
            </summary>
            <param name="disposing">True if called from Dispose(),
            false if called from the finalizer</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Enumerator.Finalize">
            <summary>
            Finalizer for enumerator
            </summary>
        </member>
        <member name="P:Csla.C5.TreeBag`1.Enumerator.Current">
            <summary>
            Undefined if enumerator is not valid (MoveNext hash been called returning true)
            </summary>
            <value>The current item of the enumerator.</value>
        </member>
        <member name="T:Csla.C5.TreeBag`1.SnapEnumerator">
            <summary>
            An enumerator for a snapshot of a node copy persistent red-black tree
            collection.
            </summary>
        </member>
        <member name="M:Csla.C5.TreeBag`1.SnapEnumerator.#ctor(Csla.C5.TreeBag{`0})">
            <summary>
            Creta an enumerator for a snapshot of a node copy persistent red-black tree
            collection
            </summary>
            <param name="tree">The snapshot</param>
        </member>
        <member name="M:Csla.C5.TreeBag`1.SnapEnumerator.MoveNext">
            <summary>
            Move enumerator to next item in tree, or the first item if
            this is the first call to MoveNext. 
            <exception cref="T:Csla.C5.CollectionModifiedException"/> if underlying tree was modified.
            </summary>
            <returns>True if enumerator is valid now</returns>
        </member>
        <member name="P:Csla.C5.TreeBag`1.SnapEnumerator.Current">
            <summary>
            Undefined if enumerator is not valid (MoveNext hash been called returning true)
            </summary>
            <value>The current value of the enumerator.</value>
        </member>
        <member name="M:Csla.C5.TreeBag`1.Range.Enumerator.MoveNext">
            <summary>
            Move enumerator to next item in tree, or the first item if
            this is the first call to MoveNext. 
            <exception cref="T:Csla.C5.CollectionModifiedException"/> if underlying tree was modified.
            </summary>
            <returns>True if enumerator is valid now</returns>
        </member>
        <member name="P:Csla.C5.TreeBag`1.Range.Enumerator.Current">
            <summary>
            Undefined if enumerator is not valid (MoveNext hash been called returning true)
            </summary>
            <value>The current value of the enumerator.</value>
        </member>
        <member name="T:Csla.C5.Rec`2">
            <summary>
            A generic record type with two fields. 
            <para>
            Equality is defined field by field, using the <code>Equals</code> method 
            inherited from <code>System.Object</code> (i.e. using <see cref="T:C5.NaturalEqualityComparer`1"/>).
            </para>
            <para>
            This type is similar to <see cref="T:C5.KeyValuePair`2"/>, but the latter
            uses <see cref="P:C5.EqualityComparer`1.Default"/> to define field equality instead of <see cref="T:C5.NaturalEqualityComparer`1"/>.
            </para>
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="F:Csla.C5.Rec`2.X1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.Rec`2.X2">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.Rec`2.#ctor(`0,`1)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
        </member>
        <member name="M:Csla.C5.Rec`2.Equals(Csla.C5.Rec{`0,`1})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`2.op_Equality(Csla.C5.Rec{`0,`1},Csla.C5.Rec{`0,`1})">
            <summary>
            
            </summary>
            <param name="record1"></param>
            <param name="record2"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`2.op_Inequality(Csla.C5.Rec{`0,`1},Csla.C5.Rec{`0,`1})">
            <summary>
            
            </summary>
            <param name="record1"></param>
            <param name="record2"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`2.Show(System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="stringbuilder"></param>
            <param name="rest"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`2.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.Rec`3">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="F:Csla.C5.Rec`3.X1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.Rec`3.X2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.Rec`3.X3">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.Rec`3.#ctor(`0,`1,`2)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="x3"></param>
        </member>
        <member name="M:Csla.C5.Rec`3.Equals(Csla.C5.Rec{`0,`1,`2})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`3.op_Equality(Csla.C5.Rec{`0,`1,`2},Csla.C5.Rec{`0,`1,`2})">
            <summary>
            
            </summary>
            <param name="record1"></param>
            <param name="record2"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`3.op_Inequality(Csla.C5.Rec{`0,`1,`2},Csla.C5.Rec{`0,`1,`2})">
            <summary>
            
            </summary>
            <param name="record1"></param>
            <param name="record2"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`3.Show(System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="stringbuilder"></param>
            <param name="rest"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`3.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.Rec`4">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
        </member>
        <member name="F:Csla.C5.Rec`4.X1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.Rec`4.X2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.Rec`4.X3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.C5.Rec`4.X4">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.Rec`4.#ctor(`0,`1,`2,`3)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="x3"></param>
            <param name="x4"></param>
        </member>
        <member name="M:Csla.C5.Rec`4.Equals(Csla.C5.Rec{`0,`1,`2,`3})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`4.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`4.op_Equality(Csla.C5.Rec{`0,`1,`2,`3},Csla.C5.Rec{`0,`1,`2,`3})">
            <summary>
            
            </summary>
            <param name="record1"></param>
            <param name="record2"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`4.op_Inequality(Csla.C5.Rec{`0,`1,`2,`3},Csla.C5.Rec{`0,`1,`2,`3})">
            <summary>
            
            </summary>
            <param name="record1"></param>
            <param name="record2"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`4.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`4.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`4.Show(System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="stringbuilder"></param>
            <param name="rest"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.Rec`4.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.HashDictionary`2">
            <summary>
            A generic dictionary class based on a hash set class <see cref="T:C5.HashSet`1"/>. 
            </summary>
        </member>
        <member name="T:Csla.C5.DictionaryBase`2">
            <summary>
            A base class for implementing a dictionary based on a set collection implementation.
            <i>See the source code for <see cref="T:C5.HashDictionary`2"/> for an example</i>
            
            </summary>
        </member>
        <member name="F:Csla.C5.DictionaryBase`2.pairs">
            <summary>
            The set collection of entries underlying this dictionary implementation
            </summary>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="keyequalityComparer"></param>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Add(`0,`1)">
            <summary>
            Add a new (key, value) pair (a mapping) to the dictionary.
            </summary>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> if there already is an entry with the same key. </exception>
            <param name="key">Key to add</param>
            <param name="value">Value to add</param>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.AddAll``2(System.Collections.Generic.IEnumerable{Csla.C5.KeyValuePair{``0,``1}})">
            <summary>
            Add the entries from a collection of <see cref="T:C5.KeyValuePair`2"/> pairs to this dictionary.
            <para><b>TODO: add restrictions L:K and W:V when the .Net SDK allows it </b></para>
            </summary>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> 
            If the input contains duplicate keys or a key already present in this dictionary.</exception>
            <param name="entries"></param>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Remove(`0)">
            <summary>
            Remove an entry with a given key from the dictionary
            </summary>
            <param name="key">The key of the entry to remove</param>
            <returns>True if an entry was found (and removed)</returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Remove(`0,`1@)">
            <summary>
            Remove an entry with a given key from the dictionary and report its value.
            </summary>
            <param name="key">The key of the entry to remove</param>
            <param name="value">On exit, the value of the removed entry</param>
            <returns>True if an entry was found (and removed)</returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Clear">
            <summary>
            Remove all entries from the dictionary
            </summary>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Contains(`0)">
            <summary>
            Check if there is an entry with a specified key
            </summary>
            <param name="key">The key to look for</param>
            <returns>True if key was found</returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Find(`0,`1@)">
            <summary>
            Check if there is an entry with a specified key and report the corresponding
            value if found. This can be seen as a safe form of "val = this[key]".
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">On exit, the value of the entry</param>
            <returns>True if key was found</returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Find(`0@,`1@)">
            <summary>
            Check if there is an entry with a specified key and report the corresponding
            value if found. This can be seen as a safe form of "val = this[key]".
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">On exit, the value of the entry</param>
            <returns>True if key was found</returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Update(`0,`1)">
            <summary>
            Look for a specific key in the dictionary and if found replace the value with a new one.
            This can be seen as a non-adding version of "this[key] = val".
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The new value</param>
            <returns>True if key was found</returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Update(`0,`1,`1@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="oldvalue"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.FindOrAdd(`0,`1@)">
            <summary>
            Look for a specific key in the dictionary. If found, report the corresponding value,
            else add an entry with the key and the supplied value.
            </summary>
            <param name="key">On entry the key to look for</param>
            <param name="value">On entry the value to add if the key is not found.
            On exit the value found if any.</param>
            <returns>True if key was found</returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.UpdateOrAdd(`0,`1)">
            <summary>
            Update value in dictionary corresponding to key if found, else add new entry.
            More general than "this[key] = val;" by reporting if key was found.
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to add or replace with.</param>
            <returns>True if entry was updated.</returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.UpdateOrAdd(`0,`1,`1@)">
            <summary>
            Update value in dictionary corresponding to key if found, else add new entry.
            More general than "this[key] = val;" by reporting if key was found and the old value if any.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="oldvalue"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Check">
            <summary>
            Check the integrity of the internal data structures of this dictionary.
            </summary>
            <returns>True if check does not fail.</returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Choose">
            <summary>
            Choose some entry in this Dictionary. 
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException">if collection is empty.</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.GetEnumerator">
            <summary>
            Create an enumerator for the collection of entries of the dictionary
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Show(System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="stringbuilder"></param>
            <param name="rest"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.DictionaryBase`2.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="E:Csla.C5.DictionaryBase`2.CollectionChanged">
            <summary>
            The change event. Will be raised for every change operation on the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.DictionaryBase`2.CollectionCleared">
            <summary>
            The change event. Will be raised for every change operation on the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.DictionaryBase`2.ItemsAdded">
            <summary>
            The item added  event. Will be raised for every individual addition to the collection.
            </summary>
        </member>
        <member name="E:Csla.C5.DictionaryBase`2.ItemsRemoved">
            <summary>
            The item added  event. Will be raised for every individual removal from the collection.
            </summary>
        </member>
        <member name="P:Csla.C5.DictionaryBase`2.ListenableEvents">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.DictionaryBase`2.ActiveEvents">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.DictionaryBase`2.EqualityComparer">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.DictionaryBase`2.ContainsSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.DictionaryBase`2.Keys">
            <summary>
            
            </summary>
            <value>A collection containg the all the keys of the dictionary</value>
        </member>
        <member name="P:Csla.C5.DictionaryBase`2.Values">
            <summary>
            
            </summary>
            <value>A collection containing all the values of the dictionary</value>
        </member>
        <member name="P:Csla.C5.DictionaryBase`2.Fun">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.DictionaryBase`2.Item(`0)">
            <summary>
            Indexer by key for dictionary. 
            <para>The get method will throw an exception if no entry is found. </para>
            <para>The set method behaves like <see cref="M:C5.DictionaryBase`2.UpdateOrAdd(`0,`1)"/>.</para>
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> On get if no entry is found. </exception>
            <value>The value corresponding to the key</value>
        </member>
        <member name="P:Csla.C5.DictionaryBase`2.IsReadOnly">
            <summary>
            
            </summary>
            <value>True if dictionary is read  only</value>
        </member>
        <member name="P:Csla.C5.DictionaryBase`2.IsEmpty">
            <summary>
            
            </summary>
            <value>True if this collection is empty.</value>
        </member>
        <member name="P:Csla.C5.DictionaryBase`2.Count">
            <summary>
            
            </summary>
            <value>The number of entrues in the dictionary</value>
        </member>
        <member name="P:Csla.C5.DictionaryBase`2.CountSpeed">
            <summary>
            
            </summary>
            <value>The number of entrues in the dictionary</value>
        </member>
        <member name="M:Csla.C5.HashDictionary`2.#ctor">
            <summary>
            Create a hash dictionary using a default equalityComparer for the keys.
            Initial capacity of internal table will be 16 entries and threshold for 
            expansion is 66% fill.
            </summary>
        </member>
        <member name="M:Csla.C5.HashDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a hash dictionary using a custom equalityComparer for the keys.
            Initial capacity of internal table will be 16 entries and threshold for 
            expansion is 66% fill.
            </summary>
            <param name="keyequalityComparer">The external key equalityComparer</param>
        </member>
        <member name="M:Csla.C5.HashDictionary`2.#ctor(System.Int32,System.Double,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a hash dictionary using a custom equalityComparer and prescribing the 
            initial size of the dictionary and a non-default threshold for internal table expansion.
            </summary>
            <param name="capacity">The initial capacity. Will be rounded upwards to nearest
            power of 2, at least 16.</param>
            <param name="fill">The expansion threshold. Must be between 10% and 90%.</param>
            <param name="keyequalityComparer">The external key equalityComparer</param>
        </member>
        <member name="M:Csla.C5.HashDictionary`2.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Csla.Wpf.CslaDataProvider">
            <summary>
            Wraps and creates a CSLA .NET-style object 
            that you can use as a binding source.
            </summary>
        </member>
        <member name="M:Csla.Wpf.CslaDataProvider.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Wpf.CslaDataProvider.OnSaved(System.Object,System.Exception,System.Object)">
            <summary>
            Raise the Saved event when the object has been saved.
            </summary>
            <param name="newObject">New object reference as a result
            of the save operation.</param>
            <param name="error">Reference to an exception object if
            an error occurred.</param>
            <param name="userState">Reference to a userstate object.</param>
        </member>
        <member name="M:Csla.Wpf.CslaDataProvider.Rebind">
            <summary>
            Triggers WPF data binding to rebind to the
            data object.
            </summary>
        </member>
        <member name="M:Csla.Wpf.CslaDataProvider.BeginInit">
            <summary>
            Indicates that the control is about to initialize.
            </summary>
        </member>
        <member name="M:Csla.Wpf.CslaDataProvider.EndInit">
            <summary>
            Indicates that the control has initialized.
            </summary>
        </member>
        <member name="M:Csla.Wpf.CslaDataProvider.BeginQuery">
            <summary>
            Overridden. Starts to create the requested object, 
            either immediately or on a background thread, 
            based on the value of the IsAsynchronous property.
            </summary>
        </member>
        <member name="M:Csla.Wpf.CslaDataProvider.Cancel">
            <summary>
            Cancels changes to the business object, returning
            it to its previous state.
            </summary>
            <remarks>
            This metod does nothing unless ManageLifetime is
            set to true and the object supports n-level undo.
            </remarks>
        </member>
        <member name="M:Csla.Wpf.CslaDataProvider.Save">
            <summary>
            Accepts changes to the business object, and
            commits them by calling the object's Save()
            method.
            </summary>
            <remarks>
            <para>
            This method does nothing unless the object
            implements Csla.Core.ISavable.
            </para><para>
            If the object implements IClonable, it
            will be cloned, and the clone will be
            saved.
            </para><para>
            If the object supports n-level undo and
            ManageLifetime is true, then this method
            will automatically call ApplyEdit() and
            BeginEdit() appropriately.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Wpf.CslaDataProvider.AddNew">
            <summary>
            Adds a new item to the object if the object
            implements IBindingList and AllowNew is true.
            </summary>
        </member>
        <member name="M:Csla.Wpf.CslaDataProvider.RemoveItem(System.Object,Csla.Wpf.ExecuteEventArgs)">
            <summary>
            Removes an item from the list if the object
            implements IBindingList and AllowRemove is true.
            </summary>
            <param name="sender">Object invoking this method.</param>
            <param name="e">
            ExecuteEventArgs, where MethodParameter contains 
            the item to be removed from the list.
            </param>
        </member>
        <member name="E:Csla.Wpf.CslaDataProvider.Saved">
            <summary>
            Event raised when the object has been saved.
            </summary>
        </member>
        <member name="P:Csla.Wpf.CslaDataProvider.CommandManager">
            <summary>
            Gets an object that can be used to execute
            Save and Undo commands on this CslaDataProvider 
            through XAML command bindings.
            </summary>
        </member>
        <member name="P:Csla.Wpf.CslaDataProvider.ObjectType">
            <summary>
            Gets or sets the type of object 
            to create an instance of.
            </summary>
        </member>
        <member name="P:Csla.Wpf.CslaDataProvider.ManageObjectLifetime">
            <summary>
            Gets or sets a value indicating whether the
            data control should manage the lifetime of
            the business object, including using n-level
            undo.
            </summary>
        </member>
        <member name="P:Csla.Wpf.CslaDataProvider.DataChangedHandler">
            <summary>
            Gets or sets a reference to an object that
            will handle the DataChanged event raised
            by this data provider.
            </summary>
            <remarks>
            This property is designed to 
            reference an IErrorDialog control.
            </remarks>
        </member>
        <member name="P:Csla.Wpf.CslaDataProvider.FactoryMethod">
            <summary>
            Gets or sets the name of the static
            (Shared in Visual Basic) factory method
            that should be called to create the
            object instance.
            </summary>
        </member>
        <member name="P:Csla.Wpf.CslaDataProvider.FactoryParameters">
            <summary>
            Get the list of parameters to pass
            to the factory method.
            </summary>
        </member>
        <member name="P:Csla.Wpf.CslaDataProvider.IsAsynchronous">
            <summary>
            Gets or sets a value that indicates 
            whether to perform object creation in 
            a worker thread or in the active context.
            </summary>
        </member>
        <member name="P:Csla.Wpf.CslaDataProvider.ObjectInstance">
            <summary>
            Gets or sets a reference to the data
            object.
            </summary>
        </member>
        <member name="P:Csla.Wpf.CslaDataProvider.IsBusy">
            <summary>
            Gets a value indicating if this object is busy.
            </summary>
        </member>
        <member name="T:Csla.Windows.BindingSourceHelper">
            <summary>
            Helper methods for dealing with BindingSource
            objects and data binding.
            </summary>
        </member>
        <member name="M:Csla.Windows.BindingSourceHelper.InitializeBindingSourceTree(System.ComponentModel.IContainer,System.Windows.Forms.BindingSource)">
            <summary>
            Sets up BindingSourceNode objects for all
            BindingSource objects related to the provided
            root source.
            </summary>
            <param name="container">
            Container for the components.
            </param>
            <param name="rootSource">
            Root BindingSource object.
            </param>
            <returns></returns>
        </member>
        <member name="T:Csla.Web.UpdateObjectArgs">
            <summary>
            Argument object used in the UpdateObject event.
            </summary>
        </member>
        <member name="M:Csla.Web.UpdateObjectArgs.#ctor(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="P:Csla.Web.UpdateObjectArgs.RowsAffected">
            <summary>
            Gets or sets the number of rows affected
            while handling this event.
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            The code handling the event should set this
            value to indicate the number of rows affected
            by the operation.
            </remarks>
        </member>
        <member name="P:Csla.Web.UpdateObjectArgs.Keys">
            <summary>
            The list of key values entered by the user.
            </summary>
            <remarks>It is up to the event handler in the
            web page to take the list of values, put them
            into a business object and to save that object
            into the database.</remarks>
        </member>
        <member name="P:Csla.Web.UpdateObjectArgs.Values">
            <summary>
            The list of data values entered by the user.
            </summary>
            <remarks>It is up to the event handler in the
            web page to take the list of values, put them
            into a business object and to save that object
            into the database.</remarks>
        </member>
        <member name="P:Csla.Web.UpdateObjectArgs.OldValues">
            <summary>
            The list of old data values maintained by
            data binding.
            </summary>
            <remarks>It is up to the event handler in the
            web page to take the list of values, put them
            into a business object and to save that object
            into the database.</remarks>
        </member>
        <member name="T:Csla.Web.DeleteObjectArgs">
            <summary>
            Argument object used in the DeleteObject event.
            </summary>
        </member>
        <member name="M:Csla.Web.DeleteObjectArgs.#ctor(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Create an instance of the object.
            </summary>
        </member>
        <member name="P:Csla.Web.DeleteObjectArgs.RowsAffected">
            <summary>
            Gets or sets the number of rows affected
            while handling this event.
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            The code handling the event should set this
            value to indicate the number of rows affected
            by the operation.
            </remarks>
        </member>
        <member name="P:Csla.Web.DeleteObjectArgs.Keys">
            <summary>
            The list of key values entered by the user.
            </summary>
            <remarks>It is up to the event handler in the
            web page to use the values to identify the 
            object to be deleted.</remarks>
        </member>
        <member name="P:Csla.Web.DeleteObjectArgs.OldValues">
            <summary>
            The list of old data values maintained by
            data binding.
            </summary>
            <remarks>It is up to the event handler in the
            web page to use the values to identify the 
            object to be deleted.</remarks>
        </member>
        <member name="T:Csla.WebServiceHost.WebServicePortal">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.#ctor">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.Create(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.CreateAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.CreateAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.Fetch(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.FetchAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.FetchAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.Update(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.UpdateAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.UpdateAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.Delete(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.DeleteAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.DeleteAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Csla.WebServiceHost.WebServicePortal.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:Csla.WebServiceHost.WebServicePortal.CreateCompleted">
            <remarks/>
        </member>
        <member name="E:Csla.WebServiceHost.WebServicePortal.FetchCompleted">
            <remarks/>
        </member>
        <member name="E:Csla.WebServiceHost.WebServicePortal.UpdateCompleted">
            <remarks/>
        </member>
        <member name="E:Csla.WebServiceHost.WebServicePortal.DeleteCompleted">
            <remarks/>
        </member>
        <member name="T:Csla.WebServiceHost.CreateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Csla.WebServiceHost.CreateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Csla.WebServiceHost.CreateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Csla.WebServiceHost.FetchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Csla.WebServiceHost.FetchCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Csla.WebServiceHost.FetchCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Csla.WebServiceHost.UpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Csla.WebServiceHost.UpdateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Csla.WebServiceHost.UpdateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Csla.WebServiceHost.DeleteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Csla.WebServiceHost.DeleteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Csla.WebServiceHost.DeleteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Csla.Validation.SharedValidationRules">
            <summary>
            Maintains a list of all the per-type
            <see cref="T:Csla.Validation.ValidationRulesManager"/> objects
            loaded in memory.
            </summary>
        </member>
        <member name="M:Csla.Validation.SharedValidationRules.GetManager(System.Type,System.Boolean)">
            <summary>
            Gets the <see cref="T:Csla.Validation.ValidationRulesManager"/> for the 
            specified object type, optionally creating a new instance 
            of the object if necessary.
            </summary>
            <param name="objectType">
            Type of business object for which the rules apply.
            </param>
            <param name="create">Indicates whether to create
            a new instance of the object if one doesn't exist.</param>
        </member>
        <member name="M:Csla.Validation.SharedValidationRules.RulesExistFor(System.Type)">
            <summary>
            Gets a value indicating whether a set of rules
            have been created for a given <see cref="T:System.Type"/>.
            </summary>
            <param name="objectType">
            Type of business object for which the rules apply.
            </param>
            <returns><see langword="true"/> if rules exist for the type.</returns>
        </member>
        <member name="T:Csla.Validation.BrokenRulesCollection">
            <summary>
            A collection of currently broken rules.
            </summary>
            <remarks>
            This collection is readonly and can be safely made available
            to code outside the business object such as the UI. This allows
            external code, such as a UI, to display the list of broken rules
            to the user.
            </remarks>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.GetFirstBrokenRule(System.String)">
            <summary>
            Returns the first <see cref="T:Csla.Validation.BrokenRule"/> object
            corresponding to the specified property.
            </summary>
            <remarks>
            Code in a business object or UI can also use this value to retrieve
            the first broken rule in <see cref="T:Csla.Validation.BrokenRulesCollection"/> that corresponds
            to a specfic property on the object.
            </remarks>
            <param name="property">The name of the property affected by the rule.</param>
            <returns>
            The first BrokenRule object corresponding to the specified property, or null if 
            there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.GetFirstMessage(System.String)">
            <summary>
            Returns the first <see cref="T:Csla.Validation.BrokenRule"/> object
            corresponding to the specified property.
            </summary>
            <remarks>
            Code in a business object or UI can also use this value to retrieve
            the first broken rule in <see cref="T:Csla.Validation.BrokenRulesCollection"/> that corresponds
            to a specfic property.
            </remarks>
            <param name="property">The name of the property affected by the rule.</param>
            <returns>
            The first BrokenRule object corresponding to the specified property, or Nothing
            (null in C#) if there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.GetFirstMessage(System.String,Csla.Validation.RuleSeverity)">
            <summary>
            Returns the first <see cref="T:Csla.Validation.BrokenRule"/> object
            corresponding to the specified property
            and severity.
            </summary>
            <param name="property">The name of the property affected by the rule.</param>
            <param name="severity">The severity of broken rule to return.</param>
            <returns>
            The first BrokenRule object corresponding to the specified property, or Nothing
            (null in C#) if there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.ToString">
            <summary>
            Returns the text of all broken rule descriptions, each
            separated by a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.ToString(Csla.Validation.RuleSeverity)">
            <summary>
            Returns the text of all broken rule descriptions
            for a specific severity, each
            separated by a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="severity">The severity of rules to
            include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.ToString(System.String)">
            <summary>
            Returns the text of all broken rule descriptions.
            </summary>
            <param name="separator">
            String to place between each broken rule description.
            </param>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.ToString(System.String,Csla.Validation.RuleSeverity)">
            <summary>
            Returns the text of all broken rule descriptions
            for a specific severity.
            </summary>
            <param name="separator">
            String to place between each broken rule description.
            </param>
            <param name="severity">The severity of rules to
            include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.ToArray">
            <summary>
            Returns a string array containing all broken
            rule descriptions.
            </summary>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.ToArray(Csla.Validation.RuleSeverity)">
            <summary>
            Returns a string array containing all broken
            rule descriptions.
            </summary>
            <param name="severity">The severity of rules
            to include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.CreateCollection">
            <summary>
            Gets an empty collection on which the Merge()
            method may be called to merge in data from
            other BrokenRuleCollection objects.
            </summary>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.Merge(System.String,Csla.Validation.BrokenRulesCollection)">
            <summary>
            Merges data from the supplied list into this
            list, changing the rule names to be unique
            based on the source value.
            </summary>
            <param name="source">
            A unique source name for each list being
            merged into this master list.
            </param>
            <param name="list">
            A list to merge into this master list.
            </param>
            <remarks>
            This method is intended to allow merging of
            all BrokenRulesCollection objects in a business
            object graph into a single list. To this end,
            no attempt is made to remove duplicates during
            the merge process. Also, the source parameter
            value must be unqiue for each object instance
            in the graph, or rule name collisions may
            occur.
            </remarks>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
        </member>
        <member name="M:Csla.Validation.BrokenRulesCollection.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
        </member>
        <member name="P:Csla.Validation.BrokenRulesCollection.ErrorCount">
            <summary>
            Gets the number of broken rules in
            the collection that have a severity
            of Error.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:Csla.Validation.BrokenRulesCollection.WarningCount">
            <summary>
            Gets the number of broken rules in
            the collection that have a severity
            of Warning.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:Csla.Validation.BrokenRulesCollection.InformationCount">
            <summary>
            Gets the number of broken rules in
            the collection that have a severity
            of Information.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:Csla.Validation.BrokenRulesCollection.Revision">
            <summary>
            Gets the current revision number of
            the collection.
            </summary>
            <remarks>
            The revision value changes each time an
            item is added or removed from the collection.
            </remarks>
        </member>
        <member name="T:Csla.Validation.AddRuleArgs">
            <summary>
            Contains information about a
            data annotation business rule.
            </summary>
        </member>
        <member name="P:Csla.Validation.AddRuleArgs.BusinessObject">
            <summary>
            Reference to the business object.
            </summary>
        </member>
        <member name="P:Csla.Validation.AddRuleArgs.Attribute">
            <summary>
            Data annotation validation attribute.
            </summary>
        </member>
        <member name="P:Csla.Validation.AddRuleArgs.PropertyInfo">
            <summary>
            Property to which the rule is attached.
            </summary>
        </member>
        <member name="P:Csla.Validation.AddRuleArgs.RuleAdded">
            <summary>
            Flag indicating whether the rule has been added.
            </summary>
        </member>
        <member name="T:Csla.Serialization.SerializationFormatterFactory">
            <summary>
            Factory used to create the appropriate
            serialization formatter object based
            on the application configuration.
            </summary>
        </member>
        <member name="M:Csla.Serialization.SerializationFormatterFactory.GetFormatter">
            <summary>
            Creates a serialization formatter object.
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.MobileFormatter">
            <summary>
            Serializes and deserializes objects
            at the field level. A Silverlight-
            compatible facsimile of the
            BinaryFormatter or NetDataContractSerializer.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serialize an object graph into XML.
            </summary>
            <param name="serializationStream">
            Stream to which the serialized data
            will be written.
            </param>
            <param name="graph">
            Root object of the object graph
            to serialize.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serialize an object graph into XML.
            </summary>
            <param name="textWriter">
            TextWriter to which the serialized data
            will be written.
            </param>
            <param name="graph">
            Root object of the object graph
            to serialize.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Serialize(System.Xml.XmlWriter,System.Object)">
            <summary>
            Serialize an object graph into XML.
            </summary>
            <param name="writer">
            XmlWriter to which the serialized data
            will be written.
            </param>
            <param name="graph">
            Root object of the object graph
            to serialize.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.SerializeAsDTO(System.Object)">
            <summary>
            Serialize an object graph into DTO.
            </summary>
            <param name="graph">
            Root object of the object graph
            to serialize.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.ConvertEnumsToIntegers">
            <summary>
            <para>
            Converts any enum values in the <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> objects to
            integer representations. Normally, <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> requires
            all non-standard primitive types to be provided to it's constructor both upon
            serialization and deserialization. Since there is no way of knowing what enum
            values are being deserialized, there is no way to supply the types to the constructor
            at the time of deserialization.
            </para>
            <para>
            Instead we convert the enum values to integers prior to serialization and then back
            to proper enum objects after deserialization.
            </para>
            </summary>
            <seealso cref="M:Csla.Serialization.Mobile.MobileFormatter.ConvertEnumsFromIntegers(Csla.Serialization.Mobile.SerializationInfo)"/>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.SerializeObject(System.Object)">
            <summary>
            Serializes an object into a SerializationInfo object.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize an object from XML.
            </summary>
            <param name="serializationStream">
            Stream containing the serialized XML
            data.
            </param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Deserialize(System.IO.TextReader)">
            <summary>
            Deserialize an object from XML.
            </summary>
            <param name="textReader">
            TextReader containing the serialized XML
            data.
            </param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Deserialize(System.Xml.XmlReader)">
            <summary>
            Deserialize an object from XML.
            </summary>
            <param name="reader">
            XmlReader containing the serialized XML
            data.
            </param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.DeserializeAsDTO(System.Collections.Generic.List{Csla.Serialization.Mobile.SerializationInfo})">
             <summary>
             Deserialize an object from DTO graph.
             </summary>
            <param name="deserialized">DTO grap to deserialize</param>
             <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.ConvertEnumsFromIntegers(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Converts any enum values in the <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> object from their
            integer representations to normal enum objects.
            </summary>
            <seealso cref="M:Csla.Serialization.Mobile.MobileFormatter.ConvertEnumsToIntegers"/>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.GetObject(System.Int32)">
            <summary>
            Gets a deserialized object based on the object's
            reference id within the serialization stream.
            </summary>
            <param name="referenceId">Id of object in stream.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Serialize(System.Object)">
            <summary>
            Serializes the object into a byte array.
            </summary>
            <param name="obj">
            The object to be serialized, which must implement
            IMobileObject.
            </param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.SerializeToDTO(System.Object)">
            <summary>
            Serializes the object into a DTO.
            </summary>
            <param name="obj">
            The object to be serialized, which must implement
            IMobileObject.
            </param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.DeserializeFromDTO(System.Collections.Generic.List{Csla.Serialization.Mobile.SerializationInfo})">
            <summary>
            Serilizes an object from a DTO graph
            </summary>
            <param name="serialized">DTO Graph to deserialize</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Deserialize(System.Byte[])">
            <summary>
            Deserializes a byte stream into an object.
            </summary>
            <param name="data">
            Byte array containing the object's serialized
            data.
            </param>
            <returns>
            An object containing the data from the
            byte stream. The object must implement
            IMobileObject to be deserialized.
            </returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Deserialize(System.Collections.Generic.List{Csla.Serialization.Mobile.SerializationInfo})">
            <summary>
            Deserializes a byte stream into an object.
            </summary>
            <param name="data">
            DTO containing the object's serialized
            data.
            </param>
            <returns>
            An object containing the data from the
            byte stream. The object must implement
            IMobileObject to be deserialized.
            </returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.GetXmlWriter(System.IO.Stream)">
            <summary>
            Gets a new XmlWriter object.
            </summary>
            <param name="stream">The stream to which you
            want to write.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.GetXmlReader(System.IO.Stream)">
            <summary>
            Gets a new XmlReader object.
            </summary>
            <param name="stream">The stream from which you
            want to read.</param>
            <returns></returns>
        </member>
        <member name="P:Csla.Serialization.Mobile.MobileFormatter.UseBinaryXml">
            <summary>
            Gets or sets a value indicating whether to use
            binary XML for serialization. Defaults to true.
            </summary>
        </member>
        <member name="T:Csla.Security.AuthorizationRulesManager">
            <summary>
            Maintains authorization roles for a business object
            or business object type.
            </summary>
        </member>
        <member name="T:Csla.Security.IsInRoleProvider">
            <summary>
            Delegate for the method called when the a role
            needs to be checked for the current user.
            </summary>
            <param name="principal">
            The current security principal object.
            </param>
            <param name="role">
            The role to be checked.
            </param>
            <returns>
            True if the current user is in the specified role.
            </returns>
        </member>
        <member name="T:Csla.Server.Hosts.WcfChannel.UpdateRequest">
            <summary>
            Request message for updating
            a business object.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.UpdateRequest.#ctor(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">Data portal context from client.</param>
        </member>
        <member name="P:Csla.Server.Hosts.WcfChannel.UpdateRequest.Object">
            <summary>
            Business object to be updated.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WcfChannel.UpdateRequest.Context">
            <summary>
            Data portal context from client.
            </summary>
        </member>
        <member name="T:Csla.DataPortalClient.EnterpriseServicesProxy">
            <summary>
            Implements a data portal proxy to relay data portal
            calls to an application server hosted in COM+.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.EnterpriseServicesProxy.GetServerObject">
            <summary>
            Override this method to return a reference to
            the server-side COM+ (ServicedComponent) object
            implementing the data portal server functionality.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.EnterpriseServicesProxy.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to create a
            new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.EnterpriseServicesProxy.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to load an
            existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.EnterpriseServicesProxy.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to update a
            business object.
            </summary>
            <param name="obj">The business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.EnterpriseServicesProxy.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to delete a
            business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="P:Csla.DataPortalClient.EnterpriseServicesProxy.IsServerRemote">
            <summary>
            Get a value indicating whether this proxy will invoke
            a remote data portal server, or run the "server-side"
            data portal in the caller's process and AppDomain.
            </summary>
        </member>
        <member name="T:Csla.FilteredBindingList`1">
            <summary>
            Provides a filtered view into an existing IList(Of T).
            </summary>
            <typeparam name="T">The type of the objects contained
            in the original list.</typeparam>
        </member>
        <member name="M:Csla.FilteredBindingList`1.GetEnumerator">
            <summary>
            Gets an enumerator object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.FilteredBindingList`1.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="property">Property on which
            to build the index.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.AddNew">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="M:Csla.FilteredBindingList`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list if the original list
            supports sorting.
            </summary>
            <param name="property">Property on which to sort.</param>
            <param name="direction">Direction of the sort.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.ApplySort(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list if the original list
            supports sorting.
            </summary>
            <param name="propertyName">PropertyName on which to sort.</param>
            <param name="direction">Direction of the sort.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.GetPropertyDescriptor(System.String)">
            <summary>
            Gets the property descriptor.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>PropertyDescriptor</returns>
        </member>
        <member name="M:Csla.FilteredBindingList`1.Find(System.String,System.Object)">
            <summary>
            Finds an item in the view
            </summary>
            <param name="propertyName">Name of the property to search</param>
            <param name="key">Value to find</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="key">Key value for which to search.</param>
            <param name="property">Property to search for the key
            value.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the ListChanged event.
            </summary>
            <param name="e">Parameter for the event.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Implemented by IList source object.
            </summary>
            <param name="property">Property for which the
            index should be removed.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.RemoveSort">
            <summary>
            Removes any sort currently applied to the view.
            </summary>
        </member>
        <member name="M:Csla.FilteredBindingList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of the list to
            an array.
            </summary>
            <param name="array">Array to receive the data.</param>
            <param name="arrayIndex">Starting array index.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.Add(`0)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="item">Item to be added.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Csla.FilteredBindingList`1.Contains(`0)">
            <summary>
            Determines whether the specified
            item is contained in the list.
            </summary>
            <param name="item">Item to find.</param>
            <returns><see langword="true"/> if the item is
            contained in the list.</returns>
        </member>
        <member name="M:Csla.FilteredBindingList`1.IndexOf(`0)">
            <summary>
            Gets the 0-based index of an
            item in the list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>0-based index of the item
            in the list.</returns>
        </member>
        <member name="M:Csla.FilteredBindingList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the list.
            </summary>
            <param name="index">Index at
            which to insert the item.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.Remove(`0)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns><see langword="true"/> if the 
            remove succeeds.</returns>
        </member>
        <member name="M:Csla.FilteredBindingList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="index">Index of item
            to be removed.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new view based on the provided IList object.
            </summary>
            <param name="list">The IList (collection) containing the data.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.#ctor(System.Collections.Generic.IList{`0},Csla.FilterProvider)">
            <summary>
            Creates a new view based on the provided IList object.
            </summary>
            <param name="list">The IList (collection) containing the data.</param>
            <param name="filterProvider">
            Delegate pointer to a method that implements the filter behavior.
            </param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.ApplyFilter">
            <summary>
            Applies a filter to the view using the
            most recently used property name and
            filter provider.
            </summary>
        </member>
        <member name="M:Csla.FilteredBindingList`1.ApplyFilter(System.String,System.Object)">
            <summary>
            Applies a filter to the view.
            </summary>
            <param name="propertyName">The text name of the property on which to filter.</param>
            <param name="filter">The filter criteria.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.ApplyFilter(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Applies a filter to the view.
            </summary>
            <param name="property">A PropertyDescriptor for the property on which to filter.</param>
            <param name="filter">The filter criteria.</param>
        </member>
        <member name="M:Csla.FilteredBindingList`1.RemoveFilter">
            <summary>
            Removes the filter from the list,
            so the view reflects the state of
            the original list.
            </summary>
        </member>
        <member name="M:Csla.FilteredBindingList`1.ToArray">
            <summary>
            Get an array containing all items in the list.
            </summary>
        </member>
        <member name="P:Csla.FilteredBindingList`1.AllowEdit">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.FilteredBindingList`1.AllowNew">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.FilteredBindingList`1.AllowRemove">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.FilteredBindingList`1.IsSorted">
            <summary>
            Returns True if the view is currently sorted.
            </summary>
        </member>
        <member name="E:Csla.FilteredBindingList`1.ListChanged">
            <summary>
            Raised to indicate that the list's data has changed.
            </summary>
            <remarks>
            This event is raised if the underling IList object's data changes
            (assuming the underling IList also implements the IBindingList
            interface). It is also raised if the filter
            is changed to indicate that the view's data has changed.
            </remarks>
        </member>
        <member name="P:Csla.FilteredBindingList`1.SortDirection">
            <summary>
            Returns the direction of the current sort.
            </summary>
        </member>
        <member name="P:Csla.FilteredBindingList`1.SortProperty">
            <summary>
            Returns the PropertyDescriptor of the current sort.
            </summary>
        </member>
        <member name="P:Csla.FilteredBindingList`1.SupportsChangeNotification">
            <summary>
            Returns True since this object does raise the
            ListChanged event.
            </summary>
        </member>
        <member name="P:Csla.FilteredBindingList`1.SupportsSearching">
            <summary>
            Implemented by IList source object.
            </summary>
        </member>
        <member name="P:Csla.FilteredBindingList`1.SupportsSorting">
            <summary>
            Returns True. Sorting is supported.
            </summary>
        </member>
        <member name="P:Csla.FilteredBindingList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Csla.FilteredBindingList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the list
            is read-only.
            </summary>
        </member>
        <member name="P:Csla.FilteredBindingList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at 
            the specified index.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>Item at the specified index.</returns>
        </member>
        <member name="P:Csla.FilteredBindingList`1.SourceList">
            <summary>
            Gets the source list over which this
            SortedBindingList is a view.
            </summary>
        </member>
        <member name="P:Csla.FilteredBindingList`1.FilterProvider">
            <summary>
            Gets or sets the filter provider method.
            </summary>
            <value>
            Delegate pointer to a method that implements the filter behavior.
            </value>
            <returns>
            Delegate pointer to a method that implements the filter behavior.
            </returns>
            <remarks>
            If this value is set to Nothing (null in C#) then the default
            filter provider, <see cref="T:Csla.DefaultFilter"/> will be used.
            </remarks>
        </member>
        <member name="P:Csla.FilteredBindingList`1.FilterProperty">
            <summary>
            The property on which the items will be filtered.
            </summary>
            <value>A descriptor for the property on which
            the items in the collection will be filtered.</value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Csla.FilteredBindingList`1.IsFiltered">
            <summary>
            Returns True if the view is currently filtered.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.SilverlightResponse">
            <summary>
            Object that encompasses the resut of the request from 
            a Silverlight client
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightResponse.Error">
            <summary>
            Exception that occurred during portal execution
            Null if no exception occurred
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightResponse.GlobalContext">
            <summary>
            Global context object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightResponse.Object">
            <summary>
            Result of the request
            </summary>
        </member>
        <member name="T:Csla.C5.MutualViewPosition">
            <summary>
            Characterize the mutual position of some view B (other) relative to view A (this)
            </summary>
        </member>
        <member name="F:Csla.C5.MutualViewPosition.Contains">
            <summary>
            B contains A(this)
            </summary>
        </member>
        <member name="F:Csla.C5.MutualViewPosition.ContainedIn">
            <summary>
            B is containd in A(this), but not vice versa
            </summary>
        </member>
        <member name="F:Csla.C5.MutualViewPosition.NonOverlapping">
            <summary>
            A and B does not overlap
            </summary>
        </member>
        <member name="F:Csla.C5.MutualViewPosition.Overlapping">
            <summary>
            A and B overlap, but neither is contained in the other
            </summary>
        </member>
        <member name="T:Csla.C5.WeakViewList`1">
            <summary>
            This class is shared between the linked list and array list implementations.
            </summary>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:Csla.C5.WeakViewList`1.GetEnumerator">
            <summary>
            Note that it is safe to call views.Remove(view.myWeakReference) if view
            is the currently yielded object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.TreeDictionary`2">
            <summary>
            A sorted generic dictionary based on a red-black tree set.
            </summary>
        </member>
        <member name="T:Csla.C5.SortedDictionaryBase`2">
            <summary>
            A base class for implementing a sorted dictionary based on a sorted set collection implementation.
            <i>See the source code for <see cref="T:C5.TreeDictionary`2"/> for an example</i>
            
            </summary>
        </member>
        <member name="F:Csla.C5.SortedDictionaryBase`2.sortedpairs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="keycomparer"></param>
            <param name="keyequalityComparer"></param>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.TryPredecessor(`0,Csla.C5.KeyValuePair{`0,`1}@)">
            <summary>
            Find the entry in the dictionary whose key is the
            predecessor of the specified key.
            </summary>
            <param name="key">The key</param>
            <param name="res">The predecessor, if any</param>
            <returns>True if key has a predecessor</returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.TrySuccessor(`0,Csla.C5.KeyValuePair{`0,`1}@)">
            <summary>
            Find the entry in the dictionary whose key is the
            successor of the specified key.
            </summary>
            <param name="key">The key</param>
            <param name="res">The successor, if any</param>
            <returns>True if the key has a successor</returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.TryWeakPredecessor(`0,Csla.C5.KeyValuePair{`0,`1}@)">
            <summary>
            Find the entry in the dictionary whose key is the
            weak predecessor of the specified key.
            </summary>
            <param name="key">The key</param>
            <param name="res">The predecessor, if any</param>
            <returns>True if key has a weak predecessor</returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.TryWeakSuccessor(`0,Csla.C5.KeyValuePair{`0,`1}@)">
            <summary>
            Find the entry in the dictionary whose key is the
            weak successor of the specified key.
            </summary>
            <param name="key">The key</param>
            <param name="res">The weak successor, if any</param>
            <returns>True if the key has a weak successor</returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.Predecessor(`0)">
            <summary>
            Get the entry in the dictionary whose key is the
            predecessor of the specified key.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"></exception>
            <param name="key">The key</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.Successor(`0)">
            <summary>
            Get the entry in the dictionary whose key is the
            successor of the specified key.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"></exception>
            <param name="key">The key</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.WeakPredecessor(`0)">
            <summary>
            Get the entry in the dictionary whose key is the
            weak predecessor of the specified key.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"></exception>
            <param name="key">The key</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.WeakSuccessor(`0)">
            <summary>
            Get the entry in the dictionary whose key is the
            weak successor of the specified key.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"></exception>
            <param name="key">The key</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.FindMin">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.DeleteMin">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.FindMax">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.DeleteMax">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.Cut(System.IComparable{`0},Csla.C5.KeyValuePair{`0,`1}@,System.Boolean@,Csla.C5.KeyValuePair{`0,`1}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="cutter"></param>
            <param name="lowEntry"></param>
            <param name="lowIsValid"></param>
            <param name="highEntry"></param>
            <param name="highIsValid"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.RangeFrom(`0)">
            <summary>
            
            </summary>
            <param name="bot"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.RangeFromTo(`0,`0)">
            <summary>
            
            </summary>
            <param name="bot"></param>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.RangeTo(`0)">
            <summary>
            
            </summary>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.RangeAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.AddSorted(System.Collections.Generic.IEnumerable{Csla.C5.KeyValuePair{`0,`1}})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.RemoveRangeFrom(`0)">
            <summary>
            
            </summary>
            <param name="lowKey"></param>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.RemoveRangeFromTo(`0,`0)">
            <summary>
            
            </summary>
            <param name="lowKey"></param>
            <param name="highKey"></param>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.RemoveRangeTo(`0)">
            <summary>
            
            </summary>
            <param name="highKey"></param>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.Show(System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="stringbuilder"></param>
            <param name="rest"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.SortedDictionaryBase`2.Comparer">
            <summary>
            The key comparer used by this dictionary.
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.SortedDictionaryBase`2.Keys">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.SortedKeysCollection.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.SortedKeysCollection.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.SortedDictionaryBase`2.SortedKeysCollection.Clone">
            <summary>
            Make a shallow copy of this SortedKeysCollection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.TreeDictionary`2.#ctor">
            <summary>
            Create a red-black tree dictionary using the natural comparer for keys.
            <exception cref="T:System.ArgumentException"/> if the key type K is not comparable.
            </summary>
        </member>
        <member name="M:Csla.C5.TreeDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a red-black tree dictionary using an external comparer for keys.
            </summary>
            <param name="comparer">The external comparer</param>
        </member>
        <member name="M:Csla.C5.TreeDictionary`2.Snapshot">
            <summary>
            Make a snapshot of the current state of this dictionary
            </summary>
            <returns>The snapshot</returns>
        </member>
        <member name="M:Csla.C5.TreeDictionary`2.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Csla.Windows.ObjectSaveException">
            <summary>
            Exception indicating a failure during an object
            save operation.
            </summary>
        </member>
        <member name="M:Csla.Windows.ObjectSaveException.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Windows.ObjectSaveException.#ctor(System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">
            Exception message text.
            </param>
        </member>
        <member name="M:Csla.Windows.ObjectSaveException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">
            Exception message text.
            </param>
            <param name="innerException">
            Reference to an inner exception.
            </param>
        </member>
        <member name="M:Csla.Windows.ObjectSaveException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="innerException">
            Reference to an inner exception.
            </param>
        </member>
        <member name="T:Csla.Windows.BindingSourceNode">
            <summary>
            Maintains a reference to a BindingSource object
            on the form.
            </summary>
        </member>
        <member name="M:Csla.Windows.BindingSourceNode.#ctor(System.Windows.Forms.BindingSource)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="source">
            BindingSource object to be mananaged.
            </param>
        </member>
        <member name="M:Csla.Windows.BindingSourceNode.Bind(System.Object)">
            <summary>
            Binds a business object to the BindingSource.
            </summary>
            <param name="objectToBind">
            Business object.
            </param>
        </member>
        <member name="M:Csla.Windows.BindingSourceNode.Apply">
            <summary>
            Applies changes to the business object.
            </summary>
        </member>
        <member name="M:Csla.Windows.BindingSourceNode.Cancel(System.Object)">
            <summary>
            Cancels changes to the business object.
            </summary>
            <param name="businessObject"></param>
        </member>
        <member name="M:Csla.Windows.BindingSourceNode.Close">
            <summary>
            Disconnects from the BindingSource object.
            </summary>
        </member>
        <member name="T:Csla.Validation.RuleHandler">
            <summary>
            Delegate that defines the method signature for all rule handler methods.
            </summary>
            <param name="target">
            Object containing the data to be validated.
            </param>
            <param name="e">
            Parameter used to pass information to and from
            the rule method.
            </param>
            <returns>
            <see langword="true" /> if the rule was satisfied.
            </returns>
            <remarks>
            <para>
            When implementing a rule handler, you must conform to the method signature
            defined by this delegate. You should also apply the Description attribute
            to your method to provide a meaningful description for your rule.
            </para><para>
            The method implementing the rule must return 
            <see langword="true"/> if the data is valid and
            return <see langword="false"/> if the data is invalid.
            </para>
            </remarks>
        </member>
        <member name="T:Csla.Validation.RuleHandler`2">
            <summary>
            Delegate that defines the method signature for all rule handler methods.
            </summary>
            <typeparam name="T">Type of the target object.</typeparam>
            <typeparam name="R">Type of the arguments parameter.</typeparam>
            <param name="target">
            Object containing the data to be validated.
            </param>
            <param name="e">
            Parameter used to pass information to and from
            the rule method.
            </param>
            <returns>
            <see langword="true" /> if the rule was satisfied.
            </returns>
            <remarks>
            <para>
            When implementing a rule handler, you must conform to the method signature
            defined by this delegate. You should also apply the Description attribute
            to your method to provide a meaningful description for your rule.
            </para><para>
            The method implementing the rule must return 
            <see langword="true"/> if the data is valid and
            return <see langword="false"/> if the data is invalid.
            </para>
            </remarks>
        </member>
        <member name="T:Csla.Silverlight.MobileFactoryAttribute">
            <summary>
            Specifies that the Silverlight WCF data portal
            should invoke a factory object rather than
            the business object.
            </summary>
        </member>
        <member name="M:Csla.Silverlight.MobileFactoryAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <remarks>
            The default names for the factory methods are
            Create(), Fetch(), Update() and Delete().
            </remarks>
        </member>
        <member name="M:Csla.Silverlight.MobileFactoryAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <param name="createMethod">
            Name of the method to call for a create operation.</param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
        </member>
        <member name="M:Csla.Silverlight.MobileFactoryAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
        </member>
        <member name="M:Csla.Silverlight.MobileFactoryAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <param name="createMethod">
            Name of the method to call for a create operation.</param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
            <param name="updateMethod">
            Name of the method to call for a update operation.</param>
            <param name="deleteMethod">
            Name of the method to call for a delete operation.</param>
        </member>
        <member name="P:Csla.Silverlight.MobileFactoryAttribute.FactoryTypeName">
            <summary>
            Assembly qualified type name of the factory object.
            </summary>
            <remarks>
            Factory class must have a parameterless 
            default constructor.
            </remarks>
        </member>
        <member name="P:Csla.Silverlight.MobileFactoryAttribute.CreateMethodName">
            <summary>
            Name of the method to call for a create operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Silverlight.MobileFactoryAttribute.FetchMethodName">
            <summary>
            Name of the method to call for a fetch operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Silverlight.MobileFactoryAttribute.UpdateMethodName">
            <summary>
            Name of the method to call for a update operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Silverlight.MobileFactoryAttribute.DeleteMethodName">
            <summary>
            Name of the method to call for a delete operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="T:Csla.Core.StateMode">
            <summary>
            Indicates the reason the MobileFormatter
            functionality has been invoked.
            </summary>
        </member>
        <member name="F:Csla.Core.StateMode.Serialization">
            <summary>
            The object is being serialized for
            a clone or data portal operation.
            </summary>
        </member>
        <member name="F:Csla.Core.StateMode.Undo">
            <summary>
            The object is being serialized for
            an n-level undo operation.
            </summary>
        </member>
        <member name="M:Csla.Security.RolesForType.AllowGet(System.String[])">
            <summary>
            Specify the roles allowed to get (fetch)
            a given type of business object.
            </summary>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.RolesForType.DenyGet(System.String[])">
            <summary>
            Specify the roles not allowed to get (fetch)
            a given type of business object.
            </summary>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.RolesForType.AllowEdit(System.String[])">
            <summary>
            Specify the roles allowed to edit (save)
            a given type of business object.
            </summary>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.RolesForType.DenyEdit(System.String[])">
            <summary>
            Specify the roles not allowed to edit (save)
            a given type of business object.
            </summary>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.RolesForType.AllowCreate(System.String[])">
            <summary>
            Specify the roles allowed to create
            a given type of business object.
            </summary>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.RolesForType.DenyCreate(System.String[])">
            <summary>
            Specify the roles not allowed to create
            a given type of business object.
            </summary>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.RolesForType.AllowDelete(System.String[])">
            <summary>
            Specify the roles allowed to delete
            a given type of business object.
            </summary>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.RolesForType.DenyDelete(System.String[])">
            <summary>
            Specify the roles not allowed to delete
            a given type of business object.
            </summary>
            <param name="roles">List of roles.</param>
        </member>
        <member name="T:Csla.Server.DataPortalContext">
            <summary>
            Provides consistent context information between the client
            and server DataPortal objects. 
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalContext.#ctor(System.Security.Principal.IPrincipal,System.Boolean)">
            <summary>
            Creates a new DataPortalContext object.
            </summary>
            <param name="principal">The current Principal object.</param>
            <param name="isRemotePortal">Indicates whether the DataPortal is remote.</param>
        </member>
        <member name="P:Csla.Server.DataPortalContext.Principal">
            <summary>
            The current principal object
            if CSLA security is being used.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalContext.IsRemotePortal">
            <summary>
            Returns <see langword="true" /> if the 
            server-side DataPortal is running
            on a remote server via remoting.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalContext.ClientCulture">
            <summary>
            The culture setting on the client
            workstation.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalContext.ClientUICulture">
            <summary>
            The culture setting on the client
            workstation.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalContext.TransactionalType">
            <summary>
            Gets the current transactional type. Only valid
            in the server-side data portal methods after
            the transactional type has been determined.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalContext.FactoryInfo">
            <summary>
            Gets the current ObjectFactory attribute
            value (if any). Only valid in the server-side
            data portal methods after the attribute
            value has been determined.
            </summary>
        </member>
        <member name="T:Csla.Core.SavedEventArgs">
            <summary>
            Event arguments containing a reference
            to the new object that was returned
            as a result of the Save() operation.
            </summary>
        </member>
        <member name="M:Csla.Core.SavedEventArgs.#ctor(System.Object)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="newObject">
            The object that was returned as a
            result of the Save() operation.
            </param>
        </member>
        <member name="M:Csla.Core.SavedEventArgs.#ctor(System.Object,System.Exception,System.Object)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="newObject">
            The object that was returned as a
            result of the Save() operation.
            </param>
            <param name="error">Exception object.</param>
            <param name="userState">User state object.</param>
        </member>
        <member name="P:Csla.Core.SavedEventArgs.NewObject">
            <summary>
            Gets the object that was returned
            as a result of the Save() operation.
            </summary>
        </member>
        <member name="P:Csla.Core.SavedEventArgs.Error">
            <summary>
            Gets any exception that occurred during the save.
            </summary>
        </member>
        <member name="P:Csla.Core.SavedEventArgs.UserState">
            <summary>
            Gets the user state object.
            </summary>
        </member>
        <member name="T:Csla.SingleCriteria`2">
            <summary>
            A single-value criteria used to retrieve business
            objects that only require one criteria value.
            </summary>
            <typeparam name="B">
            Type of business object to retrieve.
            </typeparam>
            <typeparam name="C">
            Type of the criteria value.
            </typeparam>
            <remarks></remarks>
        </member>
        <member name="M:Csla.SingleCriteria`2.#ctor(`1)">
            <summary>
            Creates an instance of the type,
            initializing it with the criteria
            value.
            </summary>
            <param name="value">
            The criteria value.
            </param>
        </member>
        <member name="M:Csla.SingleCriteria`2.#ctor">
            <summary>
            Creates an instance of the type.
            This is for use by the MobileFormatter,
            you must provide a criteria value
            parameter.
            </summary>
        </member>
        <member name="M:Csla.SingleCriteria`2.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.SingleCriteria`2.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="P:Csla.SingleCriteria`2.Value">
            <summary>
            Gets the criteria value provided by the caller.
            </summary>
        </member>
        <member name="T:Csla.DataPortalClient.DesignTimeProxy">
            <summary>
            Data portal proxy used when an object is to be created with
            design time data for Visual Studio or Expression Blend.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.DesignTimeProxy.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to create a
            new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.DesignTimeProxy.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to load an
            existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.DesignTimeProxy.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to update a
            business object.
            </summary>
            <param name="obj">The business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.DesignTimeProxy.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to delete a
            business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="P:Csla.DataPortalClient.DesignTimeProxy.IsServerRemote">
            <summary>
            Gets a value indicating whether the data portal
            will run remotely. Always returns false.
            </summary>
        </member>
        <member name="T:Csla.Core.MobileList`1">
            <summary>
            Implements a list that is serializable using
            the MobileFormatter.
            </summary>
            <typeparam name="T">
            Type of object contained in the list.
            </typeparam>
        </member>
        <member name="M:Csla.Core.MobileList`1.#ctor">
            <summary>
            Creates an instance of the type.
            </summary>
        </member>
        <member name="M:Csla.Core.MobileList`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="capacity">Capacity of the list.</param>
        </member>
        <member name="M:Csla.Core.MobileList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="collection">Data to add to list.</param>
        </member>
        <member name="M:Csla.Core.MobileList`1.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to add extra field values to
            the serialization stream.
            </summary>
            <param name="info">Object containing field values.</param>
        </member>
        <member name="M:Csla.Core.MobileList`1.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to manually serialize child objects
            contained within the current object.
            </summary>
            <param name="info">Object containing serialized values.</param>
            <param name="formatter">Reference to the current MobileFormatter.</param>
        </member>
        <member name="M:Csla.Core.MobileList`1.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to retrieve extra field values to
            the serialization stream.
            </summary>
            <param name="info">Object containing field values.</param>
        </member>
        <member name="M:Csla.Core.MobileList`1.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to manually deserialize child objects
            from data in the serialization stream.
            </summary>
            <param name="info">Object containing serialized values.</param>
            <param name="formatter">Reference to the current MobileFormatter.</param>
        </member>
        <member name="T:Csla.Core.ChildChangedEventArgs">
            <summary>
            Contains event data about the changed child object.
            </summary>
        </member>
        <member name="M:Csla.Core.ChildChangedEventArgs.#ctor(System.Object,System.ComponentModel.PropertyChangedEventArgs,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="childObject">
            Reference to the child object that was changed.
            </param>
            <param name="listArgs">
            ListChangedEventArgs object or null.
            </param>
            <param name="propertyArgs">
            PropertyChangedEventArgs object or null.
            </param>
        </member>
        <member name="P:Csla.Core.ChildChangedEventArgs.ChildObject">
            <summary>
            Gets a reference to the changed child object.
            </summary>
        </member>
        <member name="P:Csla.Core.ChildChangedEventArgs.PropertyChangedArgs">
            <summary>
            Gets the PropertyChangedEventArgs object from the
            child's PropertyChanged event, if the child is
            not a collection or list.
            </summary>
        </member>
        <member name="P:Csla.Core.ChildChangedEventArgs.ListChangedArgs">
            <summary>
            Gets the ListChangedEventArgs object from the
            child's ListChanged event, if the child is a
            collection or list.
            </summary>
        </member>
        <member name="T:Csla.Core.FieldManager.PropertyInfoFactory">
            <summary>
            Creates the factory object that
            creates PropertyInfo objects.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.PropertyInfoFactory.Factory">
            <summary>
            Gets or sets the factory object that
            creates PropertyInfo objects.
            </summary>
        </member>
        <member name="T:Csla.C5.HashedLinkedList`1">
            <summary>
            A list collection class based on a doubly linked list data structure.
            </summary>
        </member>
        <member name="F:Csla.C5.HashedLinkedList`1.fIFO">
            <summary>
            IExtensible.Add(T) always does AddLast(T), fIFO determines 
            if T Remove() does RemoveFirst() or RemoveLast()
            </summary>
        </member>
        <member name="F:Csla.C5.HashedLinkedList`1.startsentinel">
            <summary>
            Node to the left of first node 
            </summary>
        </member>
        <member name="F:Csla.C5.HashedLinkedList`1.endsentinel">
            <summary>
            Node to the right of last node
            </summary>
        </member>
        <member name="F:Csla.C5.HashedLinkedList`1.offset">
            <summary>
            Offset of this view in underlying list
            </summary>
        </member>
        <member name="F:Csla.C5.HashedLinkedList`1.underlying">
            <summary>
            underlying list of this view (or null for the underlying list)
            </summary>
        </member>
        <member name="F:Csla.C5.HashedLinkedList`1.isValid">
            <summary>
            Has this list or view not been invalidated by some operation (by someone calling Dispose())
            </summary>
        </member>
        <member name="F:Csla.C5.HashedLinkedList`1.taggroups">
            <summary>
            Number of taggroups
            </summary>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.updatecheck">
            <summary>
            Check if it is valid to perform updates and increment stamp of 
            underlying if this is a view.
            <para>This method should be called in every public modifying 
            methods before any modifications are performed.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException"> if check fails.</exception>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.validitycheck">
            <summary>
            Check if we are a view that the underlyinglist has only been updated through us.
            <br/>
            This method should be called from enumerators etc to guard against 
            modification of the base collection.
            </summary>
            <exception cref="T:System.InvalidOperationException"> if check fails.</exception>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.modifycheck(System.Int32)">
            <summary>
            Check that the list has not been updated since a particular time.
            </summary>
            <param name="stamp">The stamp indicating the time.</param>
            <exception cref="T:Csla.C5.CollectionModifiedException"> if check fails.</exception>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.find(`0,Csla.C5.HashedLinkedList{`0}.Node@,System.Int32@)">
            <summary>
            Search forwards from a node for a node with a particular item.
            </summary>
            <param name="item">The item to look for</param>
            <param name="node">On input, the node to start at. If item was found, the node found on output.</param>
            <param name="index">If node was found, the value will be the number of links followed higher than 
            the value on input. If item was not found, the value on output is undefined.</param>
            <returns>True if node was found.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.get(System.Int32)">
            <summary>
            Return the node at position pos
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.dist(System.Int32,System.Int32@,System.Int32[])">
            <summary>
            Find the distance from pos to the set given by positions. Return the
            signed distance as return value and as an out parameter, the
            array index of the nearest position. This is used for up to length 5 of
            positions, and we do not assume it is sorted. 
            </summary>
            <param name="pos"></param>
            <param name="positions"></param>
            <param name="nearest"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.get(System.Int32,System.Int32[],Csla.C5.HashedLinkedList{`0}.Node[])">
            <summary>
            Find the node at position pos, given known positions of several nodes.
            </summary>
            <param name="pos"></param>
            <param name="positions"></param>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.getPair(System.Int32,System.Int32,Csla.C5.HashedLinkedList{`0}.Node@,Csla.C5.HashedLinkedList{`0}.Node@,System.Int32[],Csla.C5.HashedLinkedList{`0}.Node[])">
            <summary>
            Get nodes at positions p1 and p2, given nodes at several positions.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="n1"></param>
            <param name="n2"></param>
            <param name="positions"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.insertNode(System.Boolean,Csla.C5.HashedLinkedList{`0}.Node,Csla.C5.HashedLinkedList{`0}.Node)">
            <summary>
            Insert a Node before another one. Unchecked version. 
            </summary>
            <param name="succ">The successor to be</param>
            <param name="newnode">Node to insert</param>
            <param name="updateViews">update overlapping view in this call</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.fixViewsAfterInsert(Csla.C5.HashedLinkedList{`0}.Node,Csla.C5.HashedLinkedList{`0}.Node,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="added">The actual number of inserted nodes</param>
            <param name="pred">The predecessor of the inserted nodes</param>
            <param name="succ">The successor of the added nodes</param>
            <param name="realInsertionIndex"></param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.viewPosition(Csla.C5.HashedLinkedList{`0})">
            <summary>
            
            </summary>
            <param name="otherView"></param>
            <returns>The position of View(otherOffset, otherSize) wrt. this view</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a linked list with en external item equalityComparer
            </summary>
            <param name="itemequalityComparer">The external equalityComparer</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.#ctor">
            <summary>
            Create a linked list with the natural item equalityComparer
            </summary>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.settag(Csla.C5.HashedLinkedList{`0}.Node)">
            <summary>
            Put a tag on a node (already inserted in the list). Split taggroups and renumber as 
            necessary.
            </summary>
            <param name="node">The node to tag</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.removefromtaggroup(Csla.C5.HashedLinkedList{`0}.Node)">
            <summary>
            Remove a node from its taggroup.
            <br/> When this is called, node must already have been removed from the underlying list
            </summary>
            <param name="node">The node to remove</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.splittaggroup(Csla.C5.HashedLinkedList{`0}.TagGroup)">
            <summary>
            Split a tag group to make rom for more tags.
            </summary>
            <param name="taggroup">The tag group</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Dispose">
            <summary>
            Invalidate this list. If a view, just invalidate the view. 
            If not a view, invalidate the list and all views on it.
            </summary>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Insert(System.Int32,`0)">
            <summary>
            Insert an item at a specific index location in this list. 
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt; the size of the collection.</summary>
            <param name="i">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Insert(Csla.C5.IList{`0},`0)">
            <summary>
            Insert an item at the end of a compatible view, used as a pointer.
            <para>The <code>pointer</code> must be a view on the same list as
            <code>this</code> and the endpoitn of <code>pointer</code> must be
            a valid insertion point of <code>this</code></para>
            </summary>
            <exception cref="T:Csla.C5.IncompatibleViewException">If <code>pointer</code> 
            is not a view on the same list as <code>this</code></exception>
            <exception cref="T:System.IndexOutOfRangeException"><b>??????</b> if the endpoint of 
             <code>pointer</code> is not inside <code>this</code></exception>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> if the list has
            <code>AllowsDuplicates==false</code> and the item is 
            already in the list.</exception>
            <param name="pointer"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.InsertAll``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insert into this list all items from an enumerable collection starting 
            at a particular index.
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt; the size of the collection.
            </summary>
            <param name="i">Index to start inserting at</param>
            <param name="items">Items to insert</param>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.InsertFirst(`0)">
            <summary>
            Insert an item at the front of this list.
            </summary>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.InsertLast(`0)">
            <summary>
            Insert an item at the back of this list.
            </summary>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Map``1(Csla.C5.Fun{`0,``0})">
            <summary>
            Create a new list consisting of the results of mapping all items of this
            list.
            </summary>
            <param name="mapper">The delegate defining the map.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Map``1(Csla.C5.Fun{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create a new list consisting of the results of mapping all items of this
            list. The new list will use a specified equalityComparer for the item type.
            </summary>
            <typeparam name="V">The type of items of the new list</typeparam>
            <param name="mapper">The delegate defining the map.</param>
            <param name="equalityComparer">The equalityComparer to use for the new list</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Remove">
            <summary>
            Remove one item from the list: from the front if <code>FIFO</code>
            is true, else from the back.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if this list is empty.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.RemoveFirst">
            <summary>
            Remove one item from the front of the list.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if this list is empty.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.RemoveLast">
            <summary>
            Remove one item from the back of the list.
            <exception cref="T:Csla.C5.NoSuchItemException"/> if this list is empty.
            </summary>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.View(System.Int32,System.Int32)">
            <summary>
            Create a list view on this list. 
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the start or count is negative</exception>
            <exception cref="T:System.ArgumentException"> if the range does not fit within list.</exception>
            <param name="start">The index in this list of the start of the view.</param>
            <param name="count">The size of the view.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.ViewOf(`0)">
            <summary>
            Create a list view on this list containing the (first) occurrence of a particular item. 
            </summary>
            <exception cref="T:System.ArgumentException"> if the item is not in this list.</exception>
            <param name="item">The item to find.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.LastViewOf(`0)">
            <summary>
            Create a list view on this list containing the last occurrence of a particular item. 
            <exception cref="T:System.ArgumentException"/> if the item is not in this list.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Slide(System.Int32)">
            <summary>
            Slide this list view along the underlying list.
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the operation
            would bring either end of the view outside the underlying list.</exception>
            <param name="offset">The signed amount to slide: positive to slide
            towards the end.</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Slide(System.Int32,System.Int32)">
            <summary>
            Slide this list view along the underlying list, perhaps changing its size.
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the operation
            would bring either end of the view outside the underlying list.</exception>
            <param name="offset">The signed amount to slide: positive to slide
            towards the end.</param>
            <param name="size">The new size of the view.</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.TrySlide(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.TrySlide(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Span(Csla.C5.IList{`0})">
            <summary>
            
            <para>Returns null if <code>otherView</code> is strictly to the left of this view</para>
            </summary>
            <param name="otherView"></param>
            <exception cref="T:Csla.C5.IncompatibleViewException">If otherView does not have the same underlying list as this</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Reverse">
            <summary>
            Reverse the list so the items are in the opposite sequence order.
            </summary>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.IsSorted">
            <summary>
            Check if this list is sorted according to the default sorting order
            for the item type T, as defined by the <see cref="T:C5.Comparer`1"/> class 
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">if T is not comparable</exception>
            <returns>True if the list is sorted, else false.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.IsSorted(System.Collections.Generic.IComparer{`0})">
            <summary>
            Check if this list is sorted according to a specific sorting order.
            </summary>
            <param name="c">The comparer defining the sorting order.</param>
            <returns>True if the list is sorted, else false.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Sort">
            <summary>
            Sort the items of the list according to the default sorting order
            for the item type T, as defined by the Comparer[T] class. 
            (<see cref="T:C5.Comparer`1"/>).
            The sorting is stable.
            </summary>
            <exception cref="T:System.InvalidOperationException">if T is not comparable</exception>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort the items of the list according to a specific sorting order.
            The sorting is stable.
            </summary>
            <param name="c">The comparer defining the sorting order.</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Shuffle">
            <summary>
            Randomly shuffle the items of this list. 
            <para>Will invalidate overlapping views???</para>
            </summary>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Shuffle(System.Random)">
            <summary>
            Shuffle the items of this list according to a specific random source.
            <para>Will invalidate overlapping views???</para>
            </summary>
            <param name="rnd">The random source.</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.IndexOf(`0)">
            <summary>
            Searches for an item in the list going forwrds from the start.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of item from start.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.LastIndexOf(`0)">
            <summary>
            Searches for an item in the list going backwords from the end.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of of item from the end.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at a specific position of the list.
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt;= the size of the collection.
            </summary>
            <param name="i">The index of the item to remove.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.RemoveInterval(System.Int32,System.Int32)">
            <summary>
            Remove all items in an index interval.
            <exception cref="T:System.IndexOutOfRangeException"/>???. 
            </summary>
            <param name="start">The index of the first item to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.GetSequencedHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.SequencedEquals(Csla.C5.ISequenced{`0})">
            <summary>
            
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Backwards">
            <summary>
            Create a collection containing the same items as this collection, but
            whose enumerator will enumerate the items backwards. The new collection
            will become invalid if the original is modified. Method typicaly used as in
            <code>foreach (T x in coll.Backwards()) {...}</code>
            </summary>
            <returns>The backwards collection.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.GetUnsequencedHashCode">
            <summary>
            Performs a check for view validity before calling base.GetUnsequencedHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.UnsequencedEquals(Csla.C5.ICollection{`0})">
            <summary>
            
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Contains(`0)">
            <summary>
            Check if this collection contains (an item equivalent to according to the
            itemequalityComparer) a particular value.
            </summary>
            <param name="item">The value to check for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Find(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Update(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value. Will update a single item.
            </summary>
            <param name="item">Value to update.</param>
            <returns>True if the item was found and hence updated.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Update(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.FindOrAdd(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found. Else, add the item to the collection.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the item was found (hence not added).</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.UpdateOrAdd(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value; else add the value to the collection. 
            </summary>
            <param name="item">Value to add or update.</param>
            <returns>True if the item was found and updated (hence not added).</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.UpdateOrAdd(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Remove(`0)">
            <summary>
            Remove a particular item from this collection. Since the collection has bag
            semantics only one copy equivalent to the supplied item is removed. 
            </summary>
            <param name="item">The value to remove.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Remove(`0,`0@)">
            <summary>
            Remove a particular item from this collection if found (only one copy). 
            If an item was removed, report a binary copy of the actual item removed in 
            the argument.
            </summary>
            <param name="item">The value to remove on input.</param>
            <param name="removeditem">The value removed.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.RemoveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items in another collection from this one, taking multiplicities into account.
            <para>Always removes from the front of the list.
            </para>
            <para>The asymptotic running time complexity of this method is <code>O(n+m+v*log(v))</code>, 
            where <code>n</code> is the size of this list, <code>m</code> is the size of the
            <code>items</code> collection and <code>v</code> is the number of views. 
            The method will temporarily allocate memory of size <code>O(m+v)</code>.
            </para>
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to remove.</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.RemoveAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Clear">
            <summary>
            Remove all items from this collection.
            </summary>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.RetainAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items not in some other collection from this one, taking multiplicities into account.
            <para>The asymptotic running time complexity of this method is <code>O(n+m+v*log(v))</code>, 
            where <code>n</code> is the size of this collection, <code>m</code> is the size of the
            <code>items</code> collection and <code>v</code> is the number of views. 
            The method will temporarily allocate memory of size <code>O(m+v)</code>. The stated complexitiy 
            holds under the assumption that the itemequalityComparer of this list is well-behaved.
            </para>
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to retain.</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.RetainAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if this collection contains all the values in another collection
            with respect to multiplicities.
            </summary>
            <param name="items">The </param>
            <typeparam name="U"></typeparam>
            <returns>True if all values in <code>items</code>is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.FindAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create a new list consisting of the items of this list satisfying a 
            certain predicate.
            </summary>
            <param name="filter">The filter delegate defining the predicate.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.ContainsCount(`0)">
            <summary>
            Count the number of items of the collection equal to a particular value.
            Returns 0 if and only if the value is not in the collection.
            </summary>
            <param name="item">The value to count.</param>
            <returns>The number of copies found.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.RemoveAllCopies(`0)">
            <summary>
            Remove all items equivalent to a given value.
            <para>The asymptotic complexity of this method is <code>O(n+v*log(v))</code>, 
            where <code>n</code> is the size of the collection and <code>v</code> 
            is the number of views.
            </para>
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Choose">
            <summary>
            Choose some item of this collection. 
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException">if collection is empty.</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Filter(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create an enumerable, enumerating the items of this collection that satisfies 
            a certain condition.
            </summary>
            <param name="filter">The T->bool filter delegate defining the condition</param>
            <returns>The filtered enumerable</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.GetEnumerator">
            <summary>
            Create an enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Add(`0)">
            <summary>
            Add an item to this collection if possible. 
            </summary>
            <param name="item">The item to add.</param>
            <returns>True.</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add the elements from another collection with a more specialized item type 
            to this collection. 
            </summary>
            <typeparam name="U">The type of items to add</typeparam>
            <param name="items">The items to add</param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Check">
            <summary>
            Check the sanity of this list
            </summary>
            <returns>true if sane</returns>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.Clone">
            <summary>
            Make a shallow copy of this HashedLinkedList.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.ListenableEvents">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.Taggroups">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.First">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <value>The first item in this list.</value>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.Last">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <value>The last item in this list.</value>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.FIFO">
            <summary>
            Since <code>Add(T item)</code> always add at the end of the list,
            this describes if list has FIFO or LIFO semantics.
            </summary>
            <value>True if the <code>Remove()</code> operation removes from the
            start of the list, false if it removes from the end. THe default for a new linked list is true.</value>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.Item(System.Int32)">
            <summary>
            On this list, this indexer is read/write.
            <exception cref="T:System.IndexOutOfRangeException"/> if i is negative or
            &gt;= the size of the collection.
            </summary>
            <value>The i'th item of this list.</value>
            <param name="index">The index of the item to fetch or store.</param>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.IndexingSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.Underlying">
            <summary>
            Null if this list is not a view.
            </summary>
            <value>Underlying list for view.</value>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.IsValid">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.Offset">
            <summary>
            </summary>
            <value>Offset for this list view or 0 for a underlying list.</value>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.Item(System.Int32,System.Int32)">
            <summary>
            <exception cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <value>The directed collection of items in a specific index interval.</value>
            <param name="start">The low index of the interval (inclusive).</param>
            <param name="count">The size of the range.</param>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.ContainsSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant).
            </summary>
            <value>Speed.Linear</value>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.Count">
            <summary>
            
            </summary>
            <value>The number of items in this collection</value>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.AllowsDuplicates">
            <summary>
            
            </summary>
            <value>True since this collection has bag semantics.</value>
        </member>
        <member name="P:Csla.C5.HashedLinkedList`1.DuplicatesByCounting">
            <summary>
            By convention this is true for any collection with set semantics.
            </summary>
            <value>True if only one representative of a group of equal items 
            is kept in the collection together with the total count.</value>
        </member>
        <member name="T:Csla.C5.HashedLinkedList`1.Node">
            <summary>
            An individual cell in the linked list
            </summary>
        </member>
        <member name="T:Csla.C5.HashedLinkedList`1.TagGroup">
            <summary>
            A group of nodes with the same high tag. Purpose is to be
            able to tell the sequence order of two nodes without having to scan through
            the list.
            </summary>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.TagGroup.ToString">
            <summary>
            Pretty print a tag group
            </summary>
            <returns>Formatted tag group</returns>
        </member>
        <member name="T:Csla.C5.HashedLinkedList`1.Position">
            <summary>
            During RemoveAll, we need to cache the original endpoint indices of views
            </summary>
        </member>
        <member name="T:Csla.C5.HashedLinkedList`1.ViewHandler">
            <summary>
            Handle the update of (other) views during a multi-remove operation.
            </summary>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.ViewHandler.updateViewSizesAndCounts(System.Int32,Csla.C5.HashedLinkedList{`0}.Node)">
            <summary>
            To be called with n pointing to the right of each node to be removed in a stretch. 
            And at the endsentinel. 
            
            Update offset of a view whose left endpoint (has not already been handled and) is n or precedes n.
            I.e. startsentinel precedes n.
            Also update the size as a prelude to handling the right endpoint.
            
            Update size of a view not already handled and whose right endpoint precedes n.
            </summary>
            <param name="removed">The number of nodes left of n to be removed</param>
            <param name="n"></param>
        </member>
        <member name="M:Csla.C5.HashedLinkedList`1.ViewHandler.updateSentinels(Csla.C5.HashedLinkedList{`0}.Node,Csla.C5.HashedLinkedList{`0}.Node,Csla.C5.HashedLinkedList{`0}.Node)">
            <summary>
            To be called with n being the first not-to-be-removed node after a (stretch of) node(s) to be removed.
            
            It will update the startsentinel of views (that have not been handled before and) 
            whose startsentinel precedes n, i.e. is to be deleted.
            
            It will update the endsentinel of views (...) whose endsentinel precedes n, i.e. is to be deleted.
            
            PROBLEM: DOESNT WORK AS ORIGINALLY ADVERTISED. WE MUST DO THIS BEFORE WE ACTUALLY REMOVE THE NODES. WHEN THE 
            NODES HAVE BEEN REMOVED, THE precedes METHOD WILL NOT WORK!
            </summary>
            <param name="n"></param>
            <param name="newstart"></param>
            <param name="newend"></param>
        </member>
        <member name="T:Csla.Wpf.IdentityConverter">
            <summary>
            Provides the functionality of a WPF
            value converter without affecting the
            value as it flows to and from the UI.
            </summary>
        </member>
        <member name="M:Csla.Wpf.IdentityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the unchanged value.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="targetType">Desired value type.</param>
            <param name="parameter">Conversion parameter.</param>
            <param name="culture">Conversion culture.</param>
        </member>
        <member name="M:Csla.Wpf.IdentityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the unchanged value.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="targetType">Desired value type.</param>
            <param name="parameter">Conversion parameter.</param>
            <param name="culture">Conversion culture.</param>
        </member>
        <member name="T:Csla.Windows.ReadWriteAuthorization">
            <summary>
            Windows Forms extender control that automatically
            enables and disables detail form controls based
            on the authorization settings from a CSLA .NET 
            business object.
            </summary>
        </member>
        <member name="M:Csla.Windows.ReadWriteAuthorization.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="container">The container of the control.</param>
        </member>
        <member name="M:Csla.Windows.ReadWriteAuthorization.CanExtend(System.Object)">
            <summary>
            Gets a value indicating whether the extender control
            can extend the specified control.
            </summary>
            <param name="extendee">The control to be extended.</param>
            <remarks>
            Any control implementing either a ReadOnly property or
            Enabled property can be extended.
            </remarks>
        </member>
        <member name="M:Csla.Windows.ReadWriteAuthorization.GetApplyAuthorization(System.Windows.Forms.Control)">
            <summary>
            Gets the custom ApplyAuthorization extender
            property added to extended controls.
            </summary>
            <param name="source">Control being extended.</param>
        </member>
        <member name="M:Csla.Windows.ReadWriteAuthorization.SetApplyAuthorization(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the custom ApplyAuthorization extender
            property added to extended controls.
            </summary>
            <param name="source">Control being extended.</param>
            <param name="value">New value of property.</param>
        </member>
        <member name="M:Csla.Windows.ReadWriteAuthorization.ResetControlAuthorization">
            <summary>
            Causes the ReadWriteAuthorization control
            to apply authorization rules from the business
            object to all extended controls on the form.
            </summary>
            <remarks>
            Call this method to refresh the display of detail
            controls on the form any time the authorization
            rules may have changed. Examples include: after
            a user logs in or out, and after an object has
            been updated, inserted, deleted or retrieved
            from the database.
            </remarks>
        </member>
        <member name="T:Csla.Windows.CslaFormAction">
            <summary>
            The possible form actions.
            </summary>
        </member>
        <member name="F:Csla.Windows.CslaFormAction.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:Csla.Windows.CslaFormAction.Save">
            <summary>
            Perform a save.
            </summary>
        </member>
        <member name="F:Csla.Windows.CslaFormAction.Cancel">
            <summary>
            Perform a cancel.
            </summary>
        </member>
        <member name="F:Csla.Windows.CslaFormAction.Close">
            <summary>
            Close the form.
            </summary>
        </member>
        <member name="T:Csla.Windows.PostSaveActionType">
            <summary>
            The possible options for posting
            and saving.
            </summary>
        </member>
        <member name="F:Csla.Windows.PostSaveActionType.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:Csla.Windows.PostSaveActionType.AndClose">
            <summary>
            Also close the form.
            </summary>
        </member>
        <member name="F:Csla.Windows.PostSaveActionType.AndNew">
            <summary>
            Also create a new object.
            </summary>
        </member>
        <member name="T:Csla.Windows.BusyAnimation">
            <summary>
            User control that displays busy animation
            </summary>
        </member>
        <member name="F:Csla.Windows.BusyAnimation.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Csla.Windows.BusyAnimation.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Csla.Windows.BusyAnimation.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Csla.Windows.BusyAnimation.#ctor">
            <summary>
            new instance busy animation
            </summary>
        </member>
        <member name="P:Csla.Windows.BusyAnimation.ProgressBarForeColor">
            <summary>
            Set or get foreground color for busy animation's progress bar
            </summary>
        </member>
        <member name="P:Csla.Windows.BusyAnimation.ProgressBarBackColor">
            <summary>
            Set or get background color for busy animation's progress bar 
            </summary>
        </member>
        <member name="P:Csla.Windows.BusyAnimation.IsRunning">
            <summary>
            Indicates if animation needs to be shown.  Set to true to start 
            progress bar animation
            </summary>
        </member>
        <member name="T:Csla.Validation.AsyncValidationRuleContext">
            <summary>
            Provides context information to an asynchronous
            validation rule.
            </summary>
        </member>
        <member name="M:Csla.Validation.AsyncValidationRuleContext.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},Csla.Validation.AsyncRuleArgs,Csla.Validation.AsyncRuleResult,Csla.Validation.AsyncRuleResultHandler)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="propertyValues">
            Dictionary containing copies of the business object
            property values for the properties associated with this rule.
            </param>
            <param name="inargs">
            Input arguments for use by the rule method.
            </param>
            <param name="outargs">
            Default output arguments that can be changed by the rule
            method.
            </param>
            <param name="result">
            Async result handler for the async callback on completion
            of the rule.
            </param>
        </member>
        <member name="M:Csla.Validation.AsyncValidationRuleContext.Complete">
            <summary>
            Method that notifies the validation subsystem 
            when the async rule method is complete. This
            method <b>must be called</b>!
            </summary>
            <remarks>
            The async rule method <b>must</b> call this
            Complete() method when it is done (successfully
            or unsuccessfully). This includes the case
            where an exception occurred in the rule method.
            <b>This method must be called no matter what
            happens.</b>
            </remarks>
        </member>
        <member name="P:Csla.Validation.AsyncValidationRuleContext.PropertyValues">
            <summary>
            Gets a Dictionary containing the values of all properties
            associated with this rule.
            </summary>
            <remarks>
            The values provided by this property are copies of the original
            values. This helps provide thread safety, allowing a rule method
            to interact with the values safely, even though the code is running
            on a background thread.
            </remarks>
        </member>
        <member name="P:Csla.Validation.AsyncValidationRuleContext.InArgs">
            <summary>
            Gets the input arguments to the validation rule. 
            </summary>
            <remarks>
            This
            property provides much of the same information as the
            RuleArgs parameter does to a synchronous rule method.
            </remarks>
        </member>
        <member name="P:Csla.Validation.AsyncValidationRuleContext.OutArgs">
            <summary>
            Gets the output arguments for the validation rule. The rule
            should set properties on this object for return to the
            validation subsystem.
            </summary>
        </member>
        <member name="T:Csla.Validation.AsyncRuleArgs">
            <summary>
            Arguments provided to an async 
            validation rule method.
            </summary>
        </member>
        <member name="M:Csla.Validation.AsyncRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Core.IPropertyInfo[])">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="primaryProperty">
            The primary property to be validated by this
            rule method.
            </param>
            <param name="additionalProperties">
            A list of additional property values to be
            provided to the validationr rule.
            </param>
        </member>
        <member name="P:Csla.Validation.AsyncRuleArgs.Properties">
            <summary>
            List of the property values to be made available
            to this validation rule.
            </summary>
        </member>
        <member name="T:Csla.Utilities">
            <summary>
            Contains utility methods used by the
            CSLA .NET framework.
            </summary>
        </member>
        <member name="M:Csla.Utilities.IsNumeric(System.Object)">
            <summary>
            Determines whether the specified
            value can be converted to a valid number.
            </summary>
        </member>
        <member name="M:Csla.Utilities.CallByName(System.Object,System.String,Csla.CallType,System.Object[])">
            <summary>
            Allows late bound invocation of
            properties and methods.
            </summary>
            <param name="target">Object implementing the property or method.</param>
            <param name="methodName">Name of the property or method.</param>
            <param name="callType">Specifies how to invoke the property or method.</param>
            <param name="args">List of arguments to pass to the method.</param>
            <returns>The result of the property or method invocation.</returns>
        </member>
        <member name="M:Csla.Utilities.GetPropertyType(System.Type)">
            <summary>
            Returns a property's type, dealing with
            Nullable(Of T) if necessary.
            </summary>
            <param name="propertyType">Type of the
            property as returned by reflection.</param>
        </member>
        <member name="M:Csla.Utilities.GetChildItemType(System.Type)">
            <summary>
            Returns the type of child object
            contained in a collection or list.
            </summary>
            <param name="listType">Type of the list.</param>
        </member>
        <member name="M:Csla.Utilities.CoerceValue(System.Type,System.Type,System.Object,System.Object)">
            <summary>
            Attempts to coerce a value of one type into
            a value of a different type.
            </summary>
            <param name="desiredType">
            Type to which the value should be coerced.
            </param>
            <param name="valueType">
            Original type of the value.
            </param>
            <param name="oldValue">
            The previous value (if any) being replaced by
            the new coerced value.
            </param>
            <param name="value">
            The value to coerce.
            </param>
            <remarks>
            <para>
            If the desired type is a primitive type or Decimal, 
            empty string and null values will result in a 0 
            or equivalent.
            </para>
            <para>
            If the desired type is a Nullable type, empty string
            and null values will result in a null result.
            </para>
            <para>
            If the desired type is an enum the value's ToString()
            result is parsed to convert into the enum value.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Utilities.CoerceValue``1(System.Type,System.Object,System.Object)">
            <summary>
            Attempts to coerce a value of one type into
            a value of a different type.
            </summary>
            <typeparam name="D">
            Type to which the value should be coerced.
            </typeparam>
            <param name="valueType">
            Original type of the value.
            </param>
            <param name="oldValue">
            The previous value (if any) being replaced by
            the new coerced value.
            </param>
            <param name="value">
            The value to coerce.
            </param>
            <remarks>
            <para>
            If the desired type is a primitive type or Decimal, 
            empty string and null values will result in a 0 
            or equivalent.
            </para>
            <para>
            If the desired type is a Nullable type, empty string
            and null values will result in a null result.
            </para>
            <para>
            If the desired type is an enum the value's ToString()
            result is parsed to convert into the enum value.
            </para>
            </remarks>
        </member>
        <member name="T:Csla.CallType">
            <summary>
            Valid options for calling a property or method
            via the <see cref="M:Csla.Utilities.CallByName(System.Object,System.String,Csla.CallType,System.Object[])"/> method.
            </summary>
        </member>
        <member name="F:Csla.CallType.Get">
            <summary>
            Gets a value from a property.
            </summary>
        </member>
        <member name="F:Csla.CallType.Let">
            <summary>
            Sets a value into a property.
            </summary>
        </member>
        <member name="F:Csla.CallType.Method">
            <summary>
            Invokes a method.
            </summary>
        </member>
        <member name="F:Csla.CallType.Set">
            <summary>
            Sets a value into a property.
            </summary>
        </member>
        <member name="T:Csla.Serialization.NetDataContractSerializerWrapper">
            Wraps the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"/>
            in the 
            <see cref="T:Csla.Serialization.ISerializationFormatter"/>
            interface so it can be used in a standardized
            manner.
        </member>
        <member name="M:Csla.Serialization.NetDataContractSerializerWrapper.Deserialize(System.IO.Stream)">
            <summary>
            Converts a serialization stream into an
            object graph.
            </summary>
            <param name="serializationStream">
            Byte stream containing the serialized data.</param>
            <returns>A deserialized object graph.</returns>
        </member>
        <member name="M:Csla.Serialization.NetDataContractSerializerWrapper.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Converts an object graph into a byte stream.
            </summary>
            <param name="serializationStream">
            Stream that will contain the the serialized data.</param>
            <param name="graph">Object graph to be serialized.</param>
        </member>
        <member name="P:Csla.Serialization.NetDataContractSerializerWrapper.Formatter">
            <summary>
            Gets a reference to the underlying
            <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"/>
            object.
            </summary>
        </member>
        <member name="T:Csla.Security.AuthorizationRules">
            <summary>
            Maintains a list of allowed and denied user roles
            for each property.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.#ctor(System.Type)">
            <summary>
            Creates an instance of the object, initializing
            it with the business object type.
            </summary>
            <param name="businessObjectType">
            Type of the business object to which the rules
            apply.
            </param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.InstanceAllowRead(System.String,System.String[])">
            <summary>
            Specify the roles allowed to read a given
            property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="roles">List of roles granted read access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.InstanceDenyRead(System.String,System.String[])">
            <summary>
            Specify the roles denied read access to 
            a given property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="roles">List of roles denied read access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.InstanceAllowWrite(System.String,System.String[])">
            <summary>
            Specify the roles allowed to write a given
            property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="roles">List of roles granted write access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.InstanceDenyWrite(System.String,System.String[])">
            <summary>
            Specify the roles denied write access to 
            a given property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="roles">List of roles denied write access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.InstanceAllowExecute(System.String,System.String[])">
            <summary>
            Specify the roles allowed to execute a given
            method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="roles">List of roles granted read access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.InstanceDenyExecute(System.String,System.String[])">
            <summary>
            Specify the roles denied the right to execute 
            a given method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="roles">List of roles denied read access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowRead(Csla.Core.IPropertyInfo,System.String[])">
            <summary>
            Specify the roles allowed to read a given
            property.
            </summary>
            <param name="propertyInfo">PropertyInfo for the property.</param>
            <param name="roles">List of roles granted read access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowRead(System.String,System.String[])">
            <summary>
            Specify the roles allowed to read a given
            property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="roles">List of roles granted read access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyRead(Csla.Core.IPropertyInfo,System.String[])">
            <summary>
            Specify the roles denied read access to 
            a given property.
            </summary>
            <param name="propertyInfo">PropertyInfo for the property.</param>
            <param name="roles">List of roles denied read access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyRead(System.String,System.String[])">
            <summary>
            Specify the roles denied read access to 
            a given property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="roles">List of roles denied read access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowWrite(Csla.Core.IPropertyInfo,System.String[])">
            <summary>
            Specify the roles allowed to write a given
            property.
            </summary>
            <param name="propertyInfo">PropertyInfo for the property.</param>
            <param name="roles">List of roles granted write access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowWrite(System.String,System.String[])">
            <summary>
            Specify the roles allowed to write a given
            property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="roles">List of roles granted write access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyWrite(Csla.Core.IPropertyInfo,System.String[])">
            <summary>
            Specify the roles denied write access to 
            a given property.
            </summary>
            <param name="propertyInfo">PropertyInfo for the property.</param>
            <param name="roles">List of roles denied write access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyWrite(System.String,System.String[])">
            <summary>
            Specify the roles denied write access to 
            a given property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="roles">List of roles denied write access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowExecute(Csla.Core.IPropertyInfo,System.String[])">
            <summary>
            Specify the roles allowed to execute a given
            method.
            </summary>
            <param name="propertyInfo">PropertyInfo for the method.</param>
            <param name="roles">List of roles granted execute access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowExecute(System.String,System.String[])">
            <summary>
            Specify the roles allowed to execute a given
            method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="roles">List of roles granted execute access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyExecute(Csla.Core.IPropertyInfo,System.String[])">
            <summary>
            Specify the roles denied the right to execute 
            a given method.
            </summary>
            <param name="propertyInfo">PropertyInfo for the method.</param>
            <param name="roles">List of roles denied execute access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyExecute(System.String,System.String[])">
            <summary>
            Specify the roles denied the right to execute 
            a given method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="roles">List of roles denied execute access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.HasReadAllowedRoles(System.String)">
            <summary>
            Indicates whether the property has a list
            of roles granted read access.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.IsReadAllowed(System.String)">
            <summary>
            Indicates whether the current user as defined by
            <see cref="P:Csla.ApplicationContext.User"/>
            is explicitly allowed to read the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.HasReadDeniedRoles(System.String)">
            <summary>
            Indicates whether the property has a list
            of roles denied read access.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.IsReadDenied(System.String)">
            <summary>
            Indicates whether the current user as defined by
            <see cref="P:Csla.ApplicationContext.User"/>
            is explicitly denied read access to the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.HasWriteAllowedRoles(System.String)">
            <summary>
            Indicates whether the property has a list
            of roles granted write access.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.IsWriteAllowed(System.String)">
            <summary>
            Indicates whether the current user as defined by
            <see cref="P:Csla.ApplicationContext.User"/>
            is explicitly allowed to set the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.HasWriteDeniedRoles(System.String)">
            <summary>
            Indicates whether the property has a list
            of roles denied write access.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.IsWriteDenied(System.String)">
            <summary>
            Indicates whether the current user as defined by
            <see cref="P:Csla.ApplicationContext.User"/>
            is explicitly denied write access to the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.HasExecuteAllowedRoles(System.String)">
            <summary>
            Indicates whether the property has a list
            of roles granted execute access.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.IsExecuteAllowed(System.String)">
            <summary>
            Indicates whether the current user as defined by
            <see cref="P:Csla.ApplicationContext.User"/>
            is explicitly allowed to execute the method.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.HasExecuteDeniedRoles(System.String)">
            <summary>
            Indicates whether the property has a list
            of roles denied execute access.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.IsExecuteDenied(System.String)">
            <summary>
            Indicates whether the current user as defined by
            <see cref="P:Csla.ApplicationContext.User"/>
            is explicitly denied execute access to the method.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowGet(System.Type,System.String[])">
            <summary>
            Specify the roles allowed to get (fetch)
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyGet(System.Type,System.String[])">
            <summary>
            Specify the roles not allowed to get (fetch)
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowEdit(System.Type,System.String[])">
            <summary>
            Specify the roles allowed to edit (save)
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyEdit(System.Type,System.String[])">
            <summary>
            Specify the roles not allowed to edit (save)
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowCreate(System.Type,System.String[])">
            <summary>
            Specify the roles allowed to create
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyCreate(System.Type,System.String[])">
            <summary>
            Specify the roles not allowed to create
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowDelete(System.Type,System.String[])">
            <summary>
            Specify the roles allowed to delete
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyDelete(System.Type,System.String[])">
            <summary>
            Specify the roles not allowed to delete
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.CanCreateObject(System.Type)">
            <summary>
            Gets a value indicating whether the current user
            is allowed to create an instance of the business
            object.
            </summary>
            <param name="objectType">Type of business object.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.CanGetObject(System.Type)">
            <summary>
            Gets a value indicating whether the current user
            is allowed to get (fetch) an instance of the business
            object.
            </summary>
            <param name="objectType">Type of business object.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.CanEditObject(System.Type)">
            <summary>
            Gets a value indicating whether the current user
            is allowed to edit (save) an instance of the business
            object.
            </summary>
            <param name="objectType">Type of business object.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.CanDeleteObject(System.Type)">
            <summary>
            Gets a value indicating whether the current user
            is allowed to delete an instance of the business
            object.
            </summary>
            <param name="objectType">Type of business object.</param>
        </member>
        <member name="T:Csla.IndexModeEnum">
            <summary>
            Enum used to determine how a given property should be indexed
            </summary>
        </member>
        <member name="F:Csla.IndexModeEnum.IndexModeOnDemand">
            <summary>
            Sets up indexing only when used in a where clause
            </summary>
        </member>
        <member name="F:Csla.IndexModeEnum.IndexModeAlways">
            <summary>
            Specifies that the index is built upon creation of a BusinessListBase
            that uses this class on this property.
            </summary>
        </member>
        <member name="F:Csla.IndexModeEnum.IndexModeNever">
            <summary>
            Specifies that this property should never be indexed.  Technically, the
            same as not having this attribute at all.
            </summary>
        </member>
        <member name="T:Csla.DataPortalEventArgs">
            <summary>
            Provides information about the DataPortal 
            call.
            </summary>
        </member>
        <member name="M:Csla.DataPortalEventArgs.#ctor(Csla.Server.DataPortalContext,System.Type,Csla.DataPortalOperations)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="dataPortalContext">
            Data portal context object.
            </param>
            <param name="objectType">
            Business object type.
            </param>
            <param name="operation">
            Data portal operation being performed.
            </param>
        </member>
        <member name="M:Csla.DataPortalEventArgs.#ctor(Csla.Server.DataPortalContext,System.Type,Csla.DataPortalOperations,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="dataPortalContext">
            Data portal context object.
            </param>
            <param name="objectType">
            Business object type.
            </param>
            <param name="operation">
            Data portal operation being performed.
            </param>
            <param name="exception">
            Exception encountered during processing.
            </param>
        </member>
        <member name="P:Csla.DataPortalEventArgs.DataPortalContext">
            <summary>
            The DataPortalContext object passed to the
            server-side DataPortal.
            </summary>
        </member>
        <member name="P:Csla.DataPortalEventArgs.Operation">
            <summary>
            Gets the requested data portal operation.
            </summary>
        </member>
        <member name="P:Csla.DataPortalEventArgs.Exception">
            <summary>
            Gets a reference to any exception that occurred
            during the data portal call.
            </summary>
            <remarks>
            This property will return Nothing (null in C#) if no
            exception occurred. Exceptions are returned only as part
            of a data portal complete event or method.
            </remarks>
        </member>
        <member name="P:Csla.DataPortalEventArgs.ObjectType">
            <summary>
            Gets the object type being processed by the 
            data portal.
            </summary>
        </member>
        <member name="T:Csla.Core.ReadOnlyBindingListExtension">
            <summary>
            Extension method for implementation of LINQ methods on BusinessListBase
            </summary>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingListExtension.Where``1(Csla.Core.ReadOnlyBindingList{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Custom implementation of Where for BusinessListBase - used in LINQ
            </summary>
        </member>
        <member name="T:Csla.Core.ObjectCloner">
            <summary>
            This class provides an implementation of a deep
            clone of a complete object graph. Objects are
            copied at the field level.
            </summary>
        </member>
        <member name="M:Csla.Core.ObjectCloner.Clone(System.Object)">
            <summary>
            Clones an object.
            </summary>
            <param name="obj">The object to clone.</param>
            <remarks>
            <para>The object to be cloned must be serializable.</para>
            <para>The serialization is performed using the formatter
            specified in the application's configuration file
            using the CslaSerializationFormatter key.</para>
            <para>The default is to use the 
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
            </para>. You may also choose to use the Microsoft .NET 3.0
            <see cref="T:System.Runtime.Serialization.NetDataContractSerializer">
            NetDataContractSerializer</see> provided as part of WCF.
            </remarks>
        </member>
        <member name="T:Csla.Server.IObjectFactoryLoader">
            <summary>
            Defines an interface to be implemented by
            a factory loader object that returns ObjectFactory
            objects based on the ObjectFactory attributes
            used to decorate CSLA .NET business objects.
            </summary>
        </member>
        <member name="M:Csla.Server.IObjectFactoryLoader.GetFactoryType(System.String)">
            <summary>
            Returns the type of the factory object.
            </summary>
            <param name="factoryName">
            Name of the factory to create, typically
            an assembly qualified type name.
            </param>
        </member>
        <member name="M:Csla.Server.IObjectFactoryLoader.GetFactory(System.String)">
            <summary>
            Returns an ObjectFactory object.
            </summary>
            <param name="factoryName">
            Name of the factory to create, typically
            an assembly qualified type name.
            </param>
        </member>
        <member name="T:Csla.Web.CslaDataSource">
            <summary>
            A Web Forms data binding control designed to support
            CSLA .NET business objects as data sources.
            </summary>
        </member>
        <member name="M:Csla.Web.CslaDataSource.GetView(System.String)">
            <summary>
            Returns the default view for this data control.
            </summary>
            <param name="viewName">Ignored.</param>
            <returns></returns>
            <remarks>This control only contains a "Default" view.</remarks>
        </member>
        <member name="M:Csla.Web.CslaDataSource.GetType(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.Type">Type</see> object based on the
            assembly and type information provided.
            </summary>
            <param name="typeAssemblyName">Optional assembly name.</param>
            <param name="typeName">Full type name of the class,
            including assembly name.</param>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Web.CslaDataSource.GetViewNames">
            <summary>
            Returns a list of views available for this control.
            </summary>
            <remarks>This control only provides the "Default" view.</remarks>
        </member>
        <member name="M:Csla.Web.CslaDataSource.OnSelectObject(Csla.Web.SelectObjectArgs)">
            <summary>
            Raises the SelectObject event.
            </summary>
        </member>
        <member name="M:Csla.Web.CslaDataSource.OnInsertObject(Csla.Web.InsertObjectArgs)">
            <summary>
            Raises the InsertObject event.
            </summary>
        </member>
        <member name="M:Csla.Web.CslaDataSource.OnUpdateObject(Csla.Web.UpdateObjectArgs)">
            <summary>
            Raises the UpdateObject event.
            </summary>
        </member>
        <member name="M:Csla.Web.CslaDataSource.OnDeleteObject(Csla.Web.DeleteObjectArgs)">
            <summary>
            Raises the DeleteObject event.
            </summary>
        </member>
        <member name="E:Csla.Web.CslaDataSource.SelectObject">
            <summary>
            Event raised when an object is to be created and
            populated with data.
            </summary>
            <remarks>Handle this event in a page and set
            e.BusinessObject to the populated business object.
            </remarks>
        </member>
        <member name="E:Csla.Web.CslaDataSource.InsertObject">
            <summary>
            Event raised when an object is to be populated with data
            and inserted.
            </summary>
            <remarks>Handle this event in a page to create an
            instance of the object, load the object with data and
            insert the object into the database.</remarks>
        </member>
        <member name="E:Csla.Web.CslaDataSource.UpdateObject">
            <summary>
            Event raised when an object is to be updated.
            </summary>
            <remarks>Handle this event in a page to update an
            existing instance of an object with new data and then
            save the object into the database.</remarks>
        </member>
        <member name="E:Csla.Web.CslaDataSource.DeleteObject">
            <summary>
            Event raised when an object is to be deleted.
            </summary>
            <remarks>Handle this event in a page to delete
            an object from the database.</remarks>
        </member>
        <member name="P:Csla.Web.CslaDataSource.TypeAssemblyName">
            <summary>
            Get or set the name of the assembly (no longer used).
            </summary>
            <value>Obsolete - do not use.</value>
        </member>
        <member name="P:Csla.Web.CslaDataSource.TypeName">
            <summary>
            Get or set the full type name of the business object
            class to be used as a data source.
            </summary>
            <value>Full type name of the business class,
            including assembly name.</value>
        </member>
        <member name="P:Csla.Web.CslaDataSource.TypeSupportsPaging">
            <summary>
            Get or set a value indicating whether the
            business object data source supports paging.
            </summary>
            <remarks>
            To support paging, the business object
            (collection) must implement 
            <see cref="T:Csla.Core.IReportTotalRowCount"/>.
            </remarks>
        </member>
        <member name="P:Csla.Web.CslaDataSource.TypeSupportsSorting">
            <summary>
            Get or set a value indicating whether the
            business object data source supports sorting.
            </summary>
        </member>
        <member name="T:Csla.Validation.BrokenRule">
            <summary>
            Stores details about a specific broken business rule.
            </summary>
        </member>
        <member name="M:Csla.Validation.BrokenRule.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Validation.BrokenRule.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="P:Csla.Validation.BrokenRule.RuleName">
            <summary>
            Provides access to the name of the broken rule.
            </summary>
            <value>The name of the rule.</value>
        </member>
        <member name="P:Csla.Validation.BrokenRule.Description">
            <summary>
            Provides access to the description of the broken rule.
            </summary>
            <value>The description of the rule.</value>
        </member>
        <member name="P:Csla.Validation.BrokenRule.Property">
            <summary>
            Provides access to the property affected by the broken rule.
            </summary>
            <value>The property affected by the rule.</value>
        </member>
        <member name="P:Csla.Validation.BrokenRule.Severity">
            <summary>
            Gets the severity of the broken rule.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Csla.Validation.AsyncRuleResultHandler">
            <summary>
            Delegate defining a handler for an async validation rule
            result.
            </summary>
            <param name="result">
            Result arguments from a validation rule method.
            </param>
        </member>
        <member name="T:Csla.Reflection.MethodCaller">
            <summary>
            Provides methods to dynamically find and call methods.
            </summary>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a Type object based on the type name.
            </summary>
            <param name="typeName">Type name including assembly name.</param>
            <param name="throwOnError">true to throw an exception if the type can't be found.</param>
            <param name="ignoreCase">true for a case-insensitive comparison of the type name.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetType(System.String,System.Boolean)">
            <summary>
            Gets a Type object based on the type name.
            </summary>
            <param name="typeName">Type name including assembly name.</param>
            <param name="throwOnError">true to throw an exception if the type can't be found.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetType(System.String)">
            <summary>
            Gets a Type object based on the type name.
            </summary>
            <param name="typeName">Type name including assembly name.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CreateInstance(System.Type)">
            <summary>
            Uses reflection to create an object using its 
            default constructor.
            </summary>
            <param name="objectType">Type of object to create.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallPropertyGetter(System.Object,System.String)">
            <summary>
            Invokes a property getter using dynamic
            method invocation.
            </summary>
            <param name="obj">Target object.</param>
            <param name="property">Property to invoke.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallPropertySetter(System.Object,System.String,System.Object)">
            <summary>
            Invokes a property setter using dynamic
            method invocation.
            </summary>
            <param name="obj">Target object.</param>
            <param name="property">Property to invoke.</param>
            <param name="value">New value for property.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethodIfImplemented(System.Object,System.String,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method
            if that method is implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethod(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="info">
            MethodInfo for the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethod(System.Object,Csla.Reflection.DynamicMethodHandle,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not implemented
            on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="methodHandle">
            MethodHandle for the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetMethod(System.Type,System.String,System.Object[])">
            <summary>
            Uses reflection to locate a matching method
            on the target object.
            </summary>
            <param name="objectType">
            Type of object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.FindMethod(System.Type,System.String,System.Type[])">
            <summary>
            Returns information about the specified
            method, even if the parameter types are
            generic and are located in an abstract
            generic base class.
            </summary>
            <param name="objectType">
            Type of object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="types">
            Parameter types to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.FindMethod(System.Type,System.String,System.Int32)">
            <summary>
            Returns information about the specified
            method, finding the method based purely
            on the method name and number of parameters.
            </summary>
            <param name="objectType">
            Type of object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameterCount">
            Number of parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetParameterTypes(System.Object[])">
            <summary>
            Returns an array of Type objects corresponding
            to the type of parameters provided.
            </summary>
            <param name="parameters">
            Parameter values.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetObjectType(System.Object)">
            <summary>
            Returns a business object type based on
            the supplied criteria object.
            </summary>
            <param name="criteria">
            Criteria object.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetPropertyDescriptor(System.Type,System.String)">
            <summary>
            Gets a property type descriptor by name.
            </summary>
            <param name="t">Type of object containing the property.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetProperty(System.Type,System.String)">
            <summary>
            Gets information about a property.
            </summary>
            <param name="objectType">Object containing the property.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetPropertyValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets a property value.
            </summary>
            <param name="obj">Object containing the property.</param>
            <param name="info">Property info object for the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethod(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Invokes an instance method on an object.
            </summary>
            <param name="obj">Object containing method.</param>
            <param name="info">Method info object.</param>
            <returns>Any value returned from the method.</returns>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallFactoryMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invokes a static factory method.
            </summary>
            <param name="objectType">Business class where the factory is defined.</param>
            <param name="method">Name of the factory method</param>
            <param name="parameters">Parameters passed to factory method.</param>
            <returns>Result of the factory method invocation.</returns>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetNonPublicMethod(System.Type,System.String)">
            <summary>
            Gets a MethodInfo object corresponding to a
            non-public method.
            </summary>
            <param name="objectType">Object containing the method.</param>
            <param name="method">Name of the method.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.FindMethod(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Returns information about the specified
            method.
            </summary>
            <param name="objType">Type of object.</param>
            <param name="method">Name of the method.</param>
            <param name="flags">Flag values.</param>
        </member>
        <member name="T:Csla.TransactionalTypes">
            <summary>
            Provides a list of possible transactional
            technologies to be used by the server-side
            DataPortal.
            </summary>
        </member>
        <member name="F:Csla.TransactionalTypes.EnterpriseServices">
            <summary>
            Causes the server-side DataPortal to
            use Enterprise Services (COM+) transactions.
            </summary>
        </member>
        <member name="F:Csla.TransactionalTypes.TransactionScope">
            <summary>
            Causes the server-side DataPortal to
            use System.Transactions TransactionScope
            style transactions.
            </summary>
        </member>
        <member name="F:Csla.TransactionalTypes.Manual">
            <summary>
            Causes the server-side DataPortal to
            use no explicit transactional technology.
            </summary>
            <remarks>
            This option allows the business developer to
            implement their own transactions. Common options
            include ADO.NET transactions and System.Transactions
            TransactionScope.
            </remarks>
        </member>
        <member name="T:Csla.Core.IReportTotalRowCount">
            <summary>
            Implement this interface in a collection
            to report a total row count to
            <see cref="T:Csla.Web.CslaDataSource"/>, where that
            row count is different from the collection's
            normal Count property value.
            </summary>
            <remarks>
            This interface is used to provide paging
            support for web data binding through
            <see cref="T:Csla.Web.CslaDataSource"/>. You should
            implement this interface in your business
            collection class, along with windowed
            data loading, to provide efficient paging
            support.
            </remarks>
        </member>
        <member name="P:Csla.Core.IReportTotalRowCount.TotalRowCount">
            <summary>
            The total number of rows of available
            data.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalMethodCache.GetCreateMethod(System.Type,System.Object)">
            <summary>
            Gets a reference to the DataPortal_Create method for
            the specified business object type.
            </summary>
            <param name="objectType">Type of the business object.</param>
            <param name="criteria">Criteria parameter value.</param>
            <remarks>
            If the criteria parameter value is an integer, that is a special
            flag indicating that the parameter should be considered missing
            (not Nothing/null - just not there).
            </remarks>
        </member>
        <member name="M:Csla.Server.DataPortalMethodCache.GetFetchMethod(System.Type,System.Object)">
            <summary>
            Gets a reference to the DataPortal_Fetch method for
            the specified business object type.
            </summary>
            <param name="objectType">Type of the business object.</param>
            <param name="criteria">Criteria parameter value.</param>
            <remarks>
            If the criteria parameter value is an integer, that is a special
            flag indicating that the parameter should be considered missing
            (not Nothing/null - just not there).
            </remarks>
        </member>
        <member name="T:Csla.Serialization.Mobile.ReferenceComparer`1">
            <summary>
            Implements an equality comparer for <see cref="T:Csla.Serialization.Mobile.IMobileObject"/> that compares
            the objects only on the basis is the reference value.
            </summary>
            <typeparam name="T">Type of objects to compare.</typeparam>
        </member>
        <member name="M:Csla.Serialization.Mobile.ReferenceComparer`1.Equals(`0,`0)">
            <summary>
            Determines if the two objects are reference-equal.
            </summary>
            <param name="x">First object.</param>
            <param name="y">Second object.</param>
        </member>
        <member name="M:Csla.Serialization.Mobile.ReferenceComparer`1.GetHashCode(`0)">
            <summary>
            Gets the hash code value for the object.
            </summary>
            <param name="obj">Object reference.</param>
        </member>
        <member name="T:Csla.Wpf.PropertyStatus">
            <summary>
            Control providing services around business object
            validation, authorization and async busy status.
            </summary>
        </member>
        <member name="M:Csla.Wpf.PropertyStatus.#ctor">
            <summary>
            Creates an instance of the type.
            </summary>
        </member>
        <member name="M:Csla.Wpf.PropertyStatus.OnApplyTemplate">
            <summary>
            Invoked whenever application code
            or internal processes call System.Windows.FrameworkElement.ApplyTemplate()
            Once template is applied to the control,force state update.
            </summary>
        </member>
        <member name="F:Csla.Wpf.PropertyStatus.BrokenRulesProperty">
            <summary>
            Gets a reference to the business object's
            broken rules collection.
            </summary>
        </member>
        <member name="F:Csla.Wpf.PropertyStatus.TargetControlProperty">
            <summary>
            Reference to the target UI control to be managed
            for authorization rules.
            </summary>
        </member>
        <member name="F:Csla.Wpf.PropertyStatus.PopupTemplateProperty">
            <summary>
            Reference to the template for the validation rule popup.
            </summary>
        </member>
        <member name="F:Csla.Wpf.PropertyStatus.PropertyProperty">
            <summary>
            Defines the business object property to watch for
            validation, authorization and busy status.
            </summary>
        </member>
        <member name="F:Csla.Wpf.PropertyStatus.IsBusyProperty">
            <summary>
            Gets a value indicating whether the property
            is busy with an asynchronous operation.
            </summary>
        </member>
        <member name="M:Csla.Wpf.PropertyStatus.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
        </member>
        <member name="P:Csla.Wpf.PropertyStatus.Property">
            <summary>
            Gets or sets the name of the business object
            property to be monitored.
            </summary>
        </member>
        <member name="P:Csla.Wpf.PropertyStatus.BrokenRules">
            <summary>
            Gets a reference to the business object's
            broken rules collection.
            </summary>
        </member>
        <member name="P:Csla.Wpf.PropertyStatus.TargetControl">
            <summary>
            Gets or sets a reference to the UI control to
            be managed based on authorization rules.
            </summary>
        </member>
        <member name="P:Csla.Wpf.PropertyStatus.PopupTemplate">
            <summary>
            Gets or sets the template for the validation rules
            popup.
            </summary>
        </member>
        <member name="P:Csla.Wpf.PropertyStatus.CanRead">
            <summary>
            Gets a value indicating whether the user
            is authorized to read the property.
            </summary>
        </member>
        <member name="P:Csla.Wpf.PropertyStatus.CanWrite">
            <summary>
            Gets a value indicating whether the user
            is authorized to write the property.
            </summary>
        </member>
        <member name="P:Csla.Wpf.PropertyStatus.IsBusy">
            <summary>
            Gets a value indicating whether the property
            is busy with an asynchronous operation.
            </summary>
        </member>
        <member name="P:Csla.Wpf.PropertyStatus.IsValid">
            <summary>
            Gets a value indicating whether the 
            property is valid.
            </summary>
        </member>
        <member name="P:Csla.Wpf.PropertyStatus.RuleSeverity">
            <summary>
            Gets a valud indicating the worst
            severity of all broken rules
            for this property (if IsValid is
            false).
            </summary>
        </member>
        <member name="P:Csla.Wpf.PropertyStatus.RuleDescription">
            <summary>
            Gets the description of the most severe
            broken rule for this property.
            </summary>
        </member>
        <member name="E:Csla.Wpf.PropertyStatus.PropertyChanged">
            <summary>
            Event raised when a property has changed.
            </summary>
        </member>
        <member name="T:Csla.Web.Design.ObjectViewSchema">
            <summary>
            Object providing schema information for a
            business object.
            </summary>
        </member>
        <member name="M:Csla.Web.Design.ObjectViewSchema.#ctor(Csla.Web.Design.CslaDataSourceDesigner,System.String)">
            <summary>
            Create an instance of the object.
            </summary>
            <param name="site">Site containing the control.</param>
            <param name="typeName">The business class for
            which to generate the schema.</param>
        </member>
        <member name="M:Csla.Web.Design.ObjectViewSchema.GetChildren">
            <summary>
            Returns a list of child schemas belonging to the
            object.
            </summary>
            <remarks>This schema object only returns
            schema for the object itself, so GetChildren will
            always return Nothing (null in C#).</remarks>
        </member>
        <member name="M:Csla.Web.Design.ObjectViewSchema.GetFields">
            <summary>
            Returns schema information for each property on
            the object.
            </summary>
            <remarks>All public properties on the object
            will be reflected in this schema list except
            for those properties where the 
            <see cref="T:System.ComponentModel.BrowsableAttribute">Browsable</see> attribute
            is False.
            </remarks>
        </member>
        <member name="P:Csla.Web.Design.ObjectViewSchema.Name">
            <summary>
            Returns the name of the schema.
            </summary>
        </member>
        <member name="T:Csla.Security.ObjectAuthorizationRules">
            <summary>
            Maintains a list of all object level
            authorization roles.
            </summary>
        </member>
        <member name="T:Csla.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ActionExtenderCloseConfirmation">
            <summary>
              Looks up a localized string similar to Are you sure you want to close?.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ActionExtenderDirtyWarningMessagePropertyDefault">
            <summary>
              Looks up a localized string similar to Object is currently in a dirty changed..
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ActionExtenderInvalidBindingSourceCast">
            <summary>
              Looks up a localized string similar to DataSource does not cast to a BindingSource.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ActionExtenderInvalidBusinessObjectBaseCast">
            <summary>
              Looks up a localized string similar to The underlying data source does not cast to a CSLA BusinessBase object.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ActionExtenderSourceMustBeBindingSource">
            <summary>
              Looks up a localized string similar to DataSource must be a BindingSource control instance.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ActionExtenderWarnOnCancelMessagePropertyDefault">
            <summary>
              Looks up a localized string similar to Are you sure you want to revert to the previous values?.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ArrayIsMultiDimensional">
            <summary>
              Looks up a localized string similar to Array is multi-dimensional.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.AuthenticationProviderDoesNotImplementIAuthorizeDataPortal">
            <summary>
              Looks up a localized string similar to Csla Authentication Provider specified does not implement IAuthorizeDataPortal.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.AuthorizationProviderNameNotSpecified">
            <summary>
              Looks up a localized string similar to Csla Authorization Provider App Setting name not specified.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.BindingSourceNotProvided">
            <summary>
              Looks up a localized string similar to A root binding source has not been provided..
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.BrokenRulesMergeException">
            <summary>
              Looks up a localized string similar to Merge only allowed on custom collection objects.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.BusinessPrincipalException">
            <summary>
              Looks up a localized string similar to Principal must be of type BusinessPrincipal, not.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.BusyObjectsMayNotBeMarkedBusy">
            <summary>
              Looks up a localized string similar to Objects that are marked busy may not be marked busy again.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.BusyObjectsMayNotBeSaved">
            <summary>
              Looks up a localized string similar to Objects that are marked busy may not be saved.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.CannotHaveMemberEqualsMemberInAnExpression">
            <summary>
              Looks up a localized string similar to Cannot have &apos;member&apos; == &apos;member&apos; in an expression.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.CannotSerializeCollectionsNotOfIMobileObject">
            <summary>
              Looks up a localized string similar to Cannot serialize collections not of type IMobileObject.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.CanReadAuthorizationRuleDescription">
            <summary>
              Looks up a localized string similar to You are not authorized to read this field.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.CanWriteAuthorizationRuleDescription">
            <summary>
              Looks up a localized string similar to You are not authorized to write to this field.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ChangeInvalidException">
            <summary>
              Looks up a localized string similar to Changing an element is an invalid operation.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ChildDeleteException">
            <summary>
              Looks up a localized string similar to Can not directly mark a child object for deletion - use its parent collection.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ClearInvalidException">
            <summary>
              Looks up a localized string similar to Clear is an invalid operation.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ClientQueryIsInvalid">
            <summary>
              Looks up a localized string similar to The client query is invalid:.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ConstructorsWithParametersNotSupported">
            <summary>
              Looks up a localized string similar to Constructor with parameters are not supported.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.CreateMethodNameNotSpecified">
            <summary>
              Looks up a localized string similar to Create method name not specified in MobileFactory attribute.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.CreateNotSupportedException">
            <summary>
              Looks up a localized string similar to Invalid operation - create not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.CslaAuthenticationProviderNotSet">
            <summary>
              Looks up a localized string similar to Csla Authentication Provider not set!.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.DatabaseNameNotFound">
            <summary>
              Looks up a localized string similar to Database name not found in config file ({0}).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.DefaultConstructor">
            <summary>
              Looks up a localized string similar to Default Constructor.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.DeleteMethodNameNotSpecified">
            <summary>
              Looks up a localized string similar to Delete method name not specified in MobileFactory attribute.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.DeleteNotSupportedException">
            <summary>
              Looks up a localized string similar to Invalid operation - delete not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.EditLevelMismatchException">
            <summary>
              Looks up a localized string similar to Edit level mismatch in {0}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ErrorReadingValueException">
            <summary>
              Looks up a localized string similar to Error reading value:.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ExceptionOccurredDuringSaveOperation">
            <summary>
              Looks up a localized string similar to An exception ocurred during the save operation.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ExecuteBadParams">
            <summary>
              Looks up a localized string similar to Method to be executed must have 0 or 2 parameters.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ExecuteBadTriggerEvent">
            <summary>
              Looks up a localized string similar to Trigger event has an unsupported signature.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ExecuteNotSupportedException">
            <summary>
              Looks up a localized string similar to Invalid operation - execute not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ExpressionTypeNotSupportedToObtainValue">
            <summary>
              Looks up a localized string similar to The expression type {0} is not supported to obtain a value.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.FactoryTypeNotFoundException">
            <summary>
              Looks up a localized string similar to Factory type or assembly could not be loaded ({0}).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.Failed">
            <summary>
              Looks up a localized string similar to failed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.FailedOnServer">
            <summary>
              Looks up a localized string similar to failed on the server.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.favicon">
            <summary>
             Looks up the favicon value.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.FetchMethodNameNotSpecified">
            <summary>
              Looks up a localized string similar to Fetch method name not specified in MobileFactory attribute.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.FetchNotSupportedException">
            <summary>
              Looks up a localized string similar to Invalid operation - fetch not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.FilterRequiredException">
            <summary>
              Looks up a localized string similar to Filter parameter and filter provider are required.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.GetIdValueCantBeNull">
            <summary>
              Looks up a localized string similar to GetIdValue must not return Nothing.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.IEditableCollectionRequiredException">
            <summary>
              Looks up a localized string similar to Target object must implement IEditableCollection.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.IManagePropertiesRequiredException">
            <summary>
              Looks up a localized string similar to Target object must implement IManageProperties.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.IndexIsOutOfRange">
            <summary>
              Looks up a localized string similar to Index is out of range.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.InsertInvalidException">
            <summary>
              Looks up a localized string similar to Insert is an invalid operation.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.InsertNotSupportedException">
            <summary>
              Looks up a localized string similar to Invalid operation - insert not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.InvalidRuleMethodException">
            <summary>
              Looks up a localized string similar to Invalid rule method (instance methods of the target object not allowed).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MaxValueRule">
            <summary>
              Looks up a localized string similar to {0} can not exceed {1}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MemberNotFoundException">
            <summary>
              Looks up a localized string similar to Member not found on object ({0}).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MethodCallFailed">
            <summary>
              Looks up a localized string similar to method call failed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MethodExecuteNotAllowed">
            <summary>
              Looks up a localized string similar to Method execution not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MethodNotImplemented">
            <summary>
              Looks up a localized string similar to not implemented.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MinValueRule">
            <summary>
              Looks up a localized string similar to {0} can not be less than {1}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MobileFormatterUnableToDeserialize">
            <summary>
              Looks up a localized string similar to The Type &apos;{0}&apos; was unable to be deserialized, double check that the assembly containing this class has the same name on the Client and Server and that it is referenced by your server application.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MustImplementIMobileObject">
            <summary>
              Looks up a localized string similar to Type {0} must implement IMobileObject.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoApplyEditChildException">
            <summary>
              Looks up a localized string similar to ApplyEdit is not valid on a child object.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoBeginEditChildException">
            <summary>
              Looks up a localized string similar to BeginEdit is not valid on a child object.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoCancelEditChildException">
            <summary>
              Looks up a localized string similar to CancelEdit is not valid on a child object.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoDeleteRootException">
            <summary>
              Looks up a localized string similar to Invalid for root objects - use Delete instead.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoPrincipalAllowedException">
            <summary>
              Looks up a localized string similar to No principal object should be passed to DataPortal when using Windows integrated security.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoSaveChildException">
            <summary>
              Looks up a localized string similar to Can not directly save a child object.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoSaveEditingException">
            <summary>
              Looks up a localized string similar to Object is still being edited and can not be saved.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoSaveInvalidException">
            <summary>
              Looks up a localized string similar to Object is not valid and can not be saved.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoSuchFactoryMethod">
            <summary>
              Looks up a localized string similar to No such factory method:{0}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoSuchValueExistsException">
            <summary>
              Looks up a localized string similar to No such value exists:.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NothingNotValid">
            <summary>
              Looks up a localized string similar to Argument must not be Nothing.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NullArrayReference">
            <summary>
              Looks up a localized string similar to Null array reference.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ObjectNotSerializableFormatted">
            <summary>
              Looks up a localized string similar to Object not serializable ({0}).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ObjectTypeCouldNotBeLoaded">
            <summary>
              Looks up a localized string similar to Object type or assembly could not be loaded ({0}).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ParentSetException">
            <summary>
              Looks up a localized string similar to Parent value can only be set for child objects.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PrimitiveTypeRequired">
            <summary>
              Looks up a localized string similar to Type parameter must be a primitive type.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyCopyFailed">
            <summary>
              Looks up a localized string similar to Property copy failed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyGetNotAllowed">
            <summary>
              Looks up a localized string similar to Property get not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyLoadException">
            <summary>
              Looks up a localized string similar to Property load or set failed for property {0} ({1}).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyNotRegistered">
            <summary>
              Looks up a localized string similar to One or more properties are not registered for this type.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyRegisterNotAllowed">
            <summary>
              Looks up a localized string similar to Can not register property {0} after containing type ({1}) has been instantiated.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertySetNotAllowed">
            <summary>
              Looks up a localized string similar to Property set not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.RegExMatchRule">
            <summary>
              Looks up a localized string similar to {0} does not match regular expression.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.RemoveInvalidException">
            <summary>
              Looks up a localized string similar to Remove is an invalid operation.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SmartDateT">
            <summary>
              Looks up a localized string similar to t.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SmartDateToday">
            <summary>
              Looks up a localized string similar to today.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SmartDateTom">
            <summary>
              Looks up a localized string similar to tom.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SmartDateTomorrow">
            <summary>
              Looks up a localized string similar to tomorrow.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SmartDateY">
            <summary>
              Looks up a localized string similar to y.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SmartDateYesterday">
            <summary>
              Looks up a localized string similar to yesterday.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SortingNotSupported">
            <summary>
              Looks up a localized string similar to Sorting not supported.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.StringMaxLengthRule">
            <summary>
              Looks up a localized string similar to {0} can not exceed {1} characters.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.StringMinLengthRule">
            <summary>
              Looks up a localized string similar to {0} must be at least {1} characters.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.StringRequiredRule">
            <summary>
              Looks up a localized string similar to {0} required.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.StringToDateException">
            <summary>
              Looks up a localized string similar to String value can not be converted to a date.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.TypeLoadException">
            <summary>
              Looks up a localized string similar to Failed to load type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.UnhandledBindingType">
            <summary>
              Looks up a localized string similar to Unhandled binding type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.UnhandledExpressionType">
            <summary>
              Looks up a localized string similar to Unhandled expression type: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.UnRegisteredPropertyException">
            <summary>
              Looks up a localized string similar to Can not use unregistered property. Call RegisterProperty() for property {0}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.UpdateMethodNameNotSpecified">
            <summary>
              Looks up a localized string similar to Update method name not specified in MobileFactory attribute.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.UpdateNotSupportedException">
            <summary>
              Looks up a localized string similar to Invalid operation - update not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.UserNotAuthorizedException">
            <summary>
              Looks up a localized string similar to User not authorized to {0} object type {1}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ValidationRulesException">
            <summary>
              Looks up a localized string similar to Validation rule {1} failed in property {0}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ValueNotSmartDateException">
            <summary>
              Looks up a localized string similar to Value is not a SmartDate.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.Warning">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.WcfChannel.FetchRequest">
            <summary>
            Request message for retrieving
            an existing business object.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.FetchRequest.#ctor(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">Data portal context from client.</param>
        </member>
        <member name="P:Csla.Server.Hosts.WcfChannel.FetchRequest.ObjectType">
            <summary>
            The type of the business object
            to be retrieved.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WcfChannel.FetchRequest.Criteria">
            <summary>
            Criteria object describing business object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WcfChannel.FetchRequest.Context">
            <summary>
            Data portal context from client.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.EnterpriseServicesPortal">
            <summary>
            Exposes server-side DataPortal functionality
            through Enterprise Services.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.EnterpriseServicesPortal.#cctor">
            <summary>
            Set up event handler to deal with
            serialization issue as discussed
            in Chapter 4.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.EnterpriseServicesPortal.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.Hosts.EnterpriseServicesPortal.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.Hosts.EnterpriseServicesPortal.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.Hosts.EnterpriseServicesPortal.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Delete a business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="T:Csla.DataPortal">
            <summary>
            This is the client-side DataPortal as described in
            Chapter 4.
            </summary>
        </member>
        <member name="M:Csla.DataPortal.Create``1(System.Object)">
            <summary>
            Called by a factory method in a business class to create 
            a new object, which is loaded with default
            values from the database.
            </summary>
            <typeparam name="T">Specific type of the business object.</typeparam>
            <param name="criteria">Object-specific criteria.</param>
            <returns>A new object, populated with default values.</returns>
        </member>
        <member name="M:Csla.DataPortal.Create``1">
            <summary>
            Called by a factory method in a business class to create 
            a new object, which is loaded with default
            values from the database.
            </summary>
            <typeparam name="T">Specific type of the business object.</typeparam>
            <returns>A new object, populated with default values.</returns>
        </member>
        <member name="M:Csla.DataPortal.Create(System.Object)">
            <summary>
            Called by a factory method in a business class to create 
            a new object, which is loaded with default
            values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <returns>A new object, populated with default values.</returns>
        </member>
        <member name="M:Csla.DataPortal.Fetch``1(System.Object)">
            <summary>
            Called by a factory method in a business class to retrieve
            an object, which is loaded with values from the database.
            </summary>
            <typeparam name="T">Specific type of the business object.</typeparam>
            <param name="criteria">Object-specific criteria.</param>
            <returns>An object populated with values from the database.</returns>
        </member>
        <member name="M:Csla.DataPortal.Fetch``1">
            <summary>
            Called by a factory method in a business class to retrieve
            an object, which is loaded with values from the database.
            </summary>
            <typeparam name="T">Specific type of the business object.</typeparam>
            <returns>An object populated with values from the database.</returns>
        </member>
        <member name="M:Csla.DataPortal.Fetch(System.Object)">
            <summary>
            Called by a factory method in a business class to retrieve
            an object, which is loaded with values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <returns>An object populated with values from the database.</returns>
        </member>
        <member name="M:Csla.DataPortal.Execute``1(``0)">
            <summary>
            Called to execute a Command object on the server.
            </summary>
            <remarks>
            <para>
            To be a Command object, the object must inherit from
            <see cref="T:Csla.CommandBase">CommandBase</see>.
            </para><para>
            Note that this method returns a reference to the updated business object.
            If the server-side DataPortal is running remotely, this will be a new and
            different object from the original, and all object references MUST be updated
            to use this new object.
            </para><para>
            On the server, the Command object's DataPortal_Execute() method will
            be invoked. Write any server-side code in that method.
            </para>
            </remarks>
            <typeparam name="T">Specific type of the Command object.</typeparam>
            <param name="obj">A reference to the Command object to be executed.</param>
            <returns>A reference to the updated Command object.</returns>
        </member>
        <member name="M:Csla.DataPortal.Execute(Csla.CommandBase)">
            <summary>
            Called to execute a Command object on the server.
            </summary>
            <remarks>
            <para>
            Note that this method returns a reference to the updated business object.
            If the server-side DataPortal is running remotely, this will be a new and
            different object from the original, and all object references MUST be updated
            to use this new object.
            </para><para>
            On the server, the Command object's DataPortal_Execute() method will
            be invoked. Write any server-side code in that method.
            </para>
            </remarks>
            <param name="obj">A reference to the Command object to be executed.</param>
            <returns>A reference to the updated Command object.</returns>
        </member>
        <member name="M:Csla.DataPortal.Update``1(``0)">
            <summary>
            Called by the business object's Save() method to
            insert, update or delete an object in the database.
            </summary>
            <remarks>
            Note that this method returns a reference to the updated business object.
            If the server-side DataPortal is running remotely, this will be a new and
            different object from the original, and all object references MUST be updated
            to use this new object.
            </remarks>
            <typeparam name="T">Specific type of the business object.</typeparam>
            <param name="obj">A reference to the business object to be updated.</param>
            <returns>A reference to the updated business object.</returns>
        </member>
        <member name="M:Csla.DataPortal.Update(System.Object)">
            <summary>
            Called by the business object's Save() method to
            insert, update or delete an object in the database.
            </summary>
            <remarks>
            Note that this method returns a reference to the updated business object.
            If the server-side DataPortal is running remotely, this will be a new and
            different object from the original, and all object references MUST be updated
            to use this new object.
            </remarks>
            <param name="obj">A reference to the business object to be updated.</param>
            <returns>A reference to the updated business object.</returns>
        </member>
        <member name="M:Csla.DataPortal.Delete``1(System.Object)">
            <summary>
            Called by a Shared (static in C#) method in the business class to cause
            immediate deletion of a specific object from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal.Delete(System.Object)">
            <summary>
            Called by a Shared (static in C#) method in the business class to cause
            immediate deletion of a specific object from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal.Delete(System.Type,System.Object)">
            <summary>
            Called by a Shared (static in C#) method in the business class to cause
            immediate deletion of a specific object from the database.
            </summary>
            <param name="objectType">Type of business object to delete.</param>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal.BeginCreate``1(System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginCreate``1(System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.BeginCreate``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to create.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginCreate``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to create.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.BeginFetch``1(System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            fetch a business object.
            </summary>
            <typeparam name="T">
            Type of business object to fetch.
            </typeparam>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginFetch``1(System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            fetch a business object.
            </summary>
            <typeparam name="T">
            Type of business object to fetch.
            </typeparam>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.BeginFetch``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            fetch a business object.
            </summary>
            <typeparam name="T">
            Type of business object to fetch.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to fetch.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginFetch``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            fetch a business object.
            </summary>
            <typeparam name="T">
            Type of business object to fetch.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to fetch.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.BeginUpdate``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            update a business object.
            </summary>
            <typeparam name="T">
            Type of business object to update.
            </typeparam>
            <param name="obj">
            Business object to update.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginUpdate``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            update a business object.
            </summary>
            <typeparam name="T">
            Type of business object to update.
            </typeparam>
            <param name="obj">
            Business object to update.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.BeginDelete``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            delete a business object.
            </summary>
            <typeparam name="T">
            Type of business object to delete.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to delete.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginDelete``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            delete a business object.
            </summary>
            <typeparam name="T">
            Type of business object to delete.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to delete.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.BeginExecute``1(``0,System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            execute a command object.
            </summary>
            <typeparam name="T">
            Type of object to execute.
            </typeparam>
            <param name="obj">
            Reference to the object to execute.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginExecute``1(``0,System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            execute a command object.
            </summary>
            <typeparam name="T">
            Type of object to execute.
            </typeparam>
            <param name="obj">
            Reference to the object to execute.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.CreateChild``1(System.Object[])">
            <summary>
            Creates and initializes a new
            child business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
            <param name="parameters">
            Parameters passed to child create method.
            </param>
        </member>
        <member name="M:Csla.DataPortal.FetchChild``1(System.Object[])">
            <summary>
            Creates and loads an existing
            child business object.
            </summary>
            <typeparam name="T">
            Type of business object to retrieve.
            </typeparam>
            <param name="parameters">
            Parameters passed to child fetch method.
            </param>
        </member>
        <member name="M:Csla.DataPortal.UpdateChild(System.Object,System.Object[])">
            <summary>
            Inserts, updates or deletes an existing
            child business object.
            </summary>
            <param name="child">
            Business object to update.
            </param>
            <param name="parameters">
            Parameters passed to child update method.
            </param>
        </member>
        <member name="M:Csla.DataPortal.ResetProxyType">
            <summary>
            Resets the data portal proxy type, so the
            next data portal call will reload the proxy
            type based on current configuration values.
            </summary>
        </member>
        <member name="M:Csla.DataPortal.ReleaseProxy">
            <summary>
            Releases any remote data portal proxy object, so
            the next data portal call will create a new
            proxy instance.
            </summary>
        </member>
        <member name="E:Csla.DataPortal.DataPortalInitInvoke">
            <summary>
            Raised by DataPortal before it starts
            setting up to call a server-side
            DataPortal method.
            </summary>
        </member>
        <member name="E:Csla.DataPortal.DataPortalInvoke">
            <summary>
            Raised by DataPortal prior to calling the 
            requested server-side DataPortal method.
            </summary>
        </member>
        <member name="E:Csla.DataPortal.DataPortalInvokeComplete">
            <summary>
            Raised by DataPortal after the requested 
            server-side DataPortal method call is complete.
            </summary>
        </member>
        <member name="P:Csla.DataPortal.IsInDesignMode">
            <summary>
            Gets a value indicating whether the code is running
            in WPF design mode.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.CriteriaRequest">
            <summary>
            Message sent to the Silverlight
            WCF data portal.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.CriteriaRequest.TypeName">
            <summary>
            Assembly qualified name of the 
            business object type to create.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.CriteriaRequest.CriteriaData">
            <summary>
            Serialized data for the criteria object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.CriteriaRequest.Principal">
            <summary>
            Serialized data for the principal object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.CriteriaRequest.GlobalContext">
            <summary>
            Serialized data for the global context object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.CriteriaRequest.ClientContext">
            <summary>
            Serialized data for the client context object.
            </summary>
        </member>
        <member name="T:Csla.Wpf.TriggerAction">
            <summary>
            Control used to invoke a method on the DataContext
            based on an event being raised by a UI control.
            </summary>
        </member>
        <member name="M:Csla.Wpf.TriggerAction.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Wpf.TriggerAction.CallMethod(System.Object,System.EventArgs)">
            <summary>
            Invokes target method.
            </summary>
        </member>
        <member name="F:Csla.Wpf.TriggerAction.TargetControlProperty">
            <summary>
            Gets or sets the target UI control.
            </summary>
        </member>
        <member name="F:Csla.Wpf.TriggerAction.TriggerEventProperty">
            <summary>
            Gets or sets the name of the event
            that will trigger the action.
            </summary>
        </member>
        <member name="F:Csla.Wpf.TriggerAction.MethodNameProperty">
            <summary>
            Gets or sets the name of the method
            to be invoked.
            </summary>
        </member>
        <member name="F:Csla.Wpf.TriggerAction.MethodParameterProperty">
            <summary>
            Gets or sets the value of a parameter to
            be passed to the invoked method.
            </summary>
        </member>
        <member name="F:Csla.Wpf.TriggerAction.RebindParameterDynamicallyProperty">
            <summary>
            Gets or sets a value indicating whether the
            MethodParameter value should be dynamically rebound
            before invoking the target method.
            </summary>
        </member>
        <member name="P:Csla.Wpf.TriggerAction.TargetControl">
            <summary>
            Gets or sets the target UI control.
            </summary>
        </member>
        <member name="P:Csla.Wpf.TriggerAction.TriggerEvent">
            <summary>
            Gets or sets the name of the event
            that will trigger the action.
            </summary>
        </member>
        <member name="P:Csla.Wpf.TriggerAction.MethodName">
            <summary>
            Gets or sets the name of the method
            to be invoked.
            </summary>
        </member>
        <member name="P:Csla.Wpf.TriggerAction.MethodParameter">
            <summary>
            Gets or sets the value of a parameter to
            be passed to the invoked method.
            </summary>
        </member>
        <member name="P:Csla.Wpf.TriggerAction.RebindParameterDynamically">
            <summary>
            Gets or sets a value indicating whether the
            MethodParameter value should be dynamically rebound
            before invoking the target method.
            </summary>
        </member>
        <member name="T:Csla.Workflow.WorkflowStatus">
            <summary>
            Status of the workflow.
            </summary>
        </member>
        <member name="F:Csla.Workflow.WorkflowStatus.Initializing">
            <summary>
            Workflow is being initialized.
            </summary>
        </member>
        <member name="F:Csla.Workflow.WorkflowStatus.Executing">
            <summary>
            Workflow is currently executing.
            </summary>
        </member>
        <member name="F:Csla.Workflow.WorkflowStatus.Completed">
            <summary>
            Workflow has completed normally.
            </summary>
        </member>
        <member name="F:Csla.Workflow.WorkflowStatus.Idled">
            <summary>
            Workflow has been idled.
            </summary>
        </member>
        <member name="F:Csla.Workflow.WorkflowStatus.Terminated">
            <summary>
            Workflow has terminated abnormally.
            </summary>
        </member>
        <member name="F:Csla.Workflow.WorkflowStatus.Aborted">
            <summary>
            Workflow was aborted.
            </summary>
        </member>
        <member name="F:Csla.Workflow.WorkflowStatus.Suspended">
            <summary>
            Workflow has been suspended.
            </summary>
        </member>
        <member name="T:Csla.Validation.ValidationException">
            <summary>
            Exception class indicating that there was a validation
            problem with a business object.
            </summary>
        </member>
        <member name="M:Csla.Validation.ValidationException.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Validation.ValidationException.#ctor(System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Message describing the exception.</param>
        </member>
        <member name="M:Csla.Validation.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Message describing the exception.</param>
            <param name="innerException">Inner exception object.</param>
        </member>
        <member name="M:Csla.Validation.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the object for serialization.
            </summary>
            <param name="context">Serialization context.</param>
            <param name="info">Serialization info.</param>
        </member>
        <member name="T:Csla.Serialization.BinaryFormatterWrapper">
            <summary>
            Wraps the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
            in the 
            <see cref="T:Csla.Serialization.ISerializationFormatter"/>
            interface so it can be used in a standardized
            manner.
            </summary>
        </member>
        <member name="M:Csla.Serialization.BinaryFormatterWrapper.Deserialize(System.IO.Stream)">
            <summary>
            Converts a serialization stream into an
            object graph.
            </summary>
            <param name="serializationStream">
            Byte stream containing the serialized data.</param>
            <returns>A deserialized object graph.</returns>
        </member>
        <member name="M:Csla.Serialization.BinaryFormatterWrapper.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Converts an object graph into a byte stream.
            </summary>
            <param name="serializationStream">
            Stream that will contain the the serialized data.</param>
            <param name="graph">Object graph to be serialized.</param>
        </member>
        <member name="P:Csla.Serialization.BinaryFormatterWrapper.Formatter">
            <summary>
            Gets a reference to the underlying
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
            object.
            </summary>
        </member>
        <member name="T:Csla.Reflection.DynamicCtorDelegate">
            <summary>
            Delegate for a dynamic constructor method.
            </summary>
        </member>
        <member name="T:Csla.Reflection.DynamicMethodDelegate">
            <summary>
            Delegate for a dynamic method.
            </summary>
            <param name="target">
            Object containg method to invoke.
            </param>
            <param name="args">
            Parameters passed to method.
            </param>
        </member>
        <member name="T:Csla.Reflection.DynamicMemberGetDelegate">
            <summary>
            Delegate for getting a value.
            </summary>
            <param name="target">Target object.</param>
            <returns></returns>
        </member>
        <member name="T:Csla.Reflection.DynamicMemberSetDelegate">
            <summary>
            Delegate for setting a value.
            </summary>
            <param name="target">Target object.</param>
            <param name="arg">Argument value.</param>
        </member>
        <member name="T:Csla.FilterProvider">
            <summary>
            Defines the method signature for a filter
            provider method used by FilteredBindingList.
            </summary>
            <param name="item">The object to be filtered.</param>
            <param name="filter">The filter criteria.</param>
            <returns><see langword="true"/> if the item matches the filter.</returns>
        </member>
        <member name="T:Csla.Server.ServicedDataPortal">
            <summary>
            Implements the server-side Serviced 
            DataPortal described in Chapter 4.
            </summary>
        </member>
        <member name="M:Csla.Server.ServicedDataPortal.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Wraps a Create call in a ServicedComponent.
            </summary>
            <remarks>
            This method delegates to 
            <see cref="T:Csla.Server.SimpleDataPortal">SimpleDataPortal</see>
            but wraps that call within a COM+ transaction
            to provide transactional support.
            </remarks>
            <param name="objectType">A <see cref="T:System.Type">Type</see> object
            indicating the type of business object to be created.</param>
            <param name="criteria">A custom criteria object providing any
            extra information that may be required to properly create
            the object.</param>
            <param name="context">Context data from the client.</param>
            <returns>A populated business object.</returns>
        </member>
        <member name="M:Csla.Server.ServicedDataPortal.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Wraps a Fetch call in a ServicedComponent.
            </summary>
            <remarks>
            This method delegates to 
            <see cref="T:Csla.Server.SimpleDataPortal">SimpleDataPortal</see>
            but wraps that call within a COM+ transaction
            to provide transactional support.
            </remarks>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Object-specific criteria.</param>
            <param name="context">Object containing context data from client.</param>
            <returns>A populated business object.</returns>
        </member>
        <member name="M:Csla.Server.ServicedDataPortal.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Wraps an Update call in a ServicedComponent.
            </summary>
            <remarks>
            This method delegates to 
            <see cref="T:Csla.Server.SimpleDataPortal">SimpleDataPortal</see>
            but wraps that call within a COM+ transaction
            to provide transactional support.
            </remarks>
            <param name="obj">A reference to the object being updated.</param>
            <param name="context">Context data from the client.</param>
            <returns>A reference to the newly updated object.</returns>
        </member>
        <member name="M:Csla.Server.ServicedDataPortal.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Wraps a Delete call in a ServicedComponent.
            </summary>
            <remarks>
            This method delegates to 
            <see cref="T:Csla.Server.SimpleDataPortal">SimpleDataPortal</see>
            but wraps that call within a COM+ transaction
            to provide transactional support.
            </remarks>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Object-specific criteria.</param>
            <param name="context">Context data from the client.</param>
        </member>
        <member name="T:Csla.Server.Hosts.RemotingPortal">
            <summary>
            Exposes server-side DataPortal functionality
            through .NET Remoting.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.RemotingPortal.Create(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.Hosts.RemotingPortal.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.Hosts.RemotingPortal.Update(System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Csla.Server.Hosts.RemotingPortal.Delete(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Delete a business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="T:Csla.Core.IEditableCollection">
            <summary>
            Defines the common methods required by all
            editable CSLA collection objects.
            </summary>
            <remarks>
            It is strongly recommended that the implementations
            of the methods in this interface be made Private
            so as to not clutter up the native interface of
            the collection objects.
            </remarks>
        </member>
        <member name="M:Csla.Core.IEditableCollection.RemoveChild(Csla.Core.IEditableBusinessObject)">
            <summary>
            Removes the specified child from the parent
            collection.
            </summary>
            <param name="child">Child object to be removed.</param>
        </member>
        <member name="M:Csla.Core.IEditableCollection.SetParent(Csla.Core.IParent)">
            <summary>
            Used by BusinessListBase as a child object is 
            created to tell the child object about its
            parent.
            </summary>
            <param name="parent">A reference to the parent collection object.</param>
        </member>
        <member name="M:Csla.Core.IEditableCollection.GetDeletedList">
            <summary>
            Used by ObjectFactory to gain access to the
            list of deleted items contained in the collection.
            </summary>
        </member>
        <member name="T:Csla.Server.ObjectFactoryLoader">
            <summary>
            Class containing the default implementation for
            the FactoryLoader delegate used by the
            Silverlight data portal host.
            </summary>
        </member>
        <member name="M:Csla.Server.ObjectFactoryLoader.GetFactoryType(System.String)">
            <summary>
            Gets the type of the factory.
            </summary>
            <param name="factoryName">
            Type assembly qualified type name for the 
            object factory class as
            provided from the ObjectFactory attribute
            on the business object.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactoryLoader.GetFactory(System.String)">
            <summary>
            Creates an instance of an object factory
            object for use by the data portal.
            </summary>
            <param name="factoryName">
            Type assembly qualified type name for the 
            object factory class as
            provided from the ObjectFactory attribute
            on the business object.
            </param>
            <returns>
            An instance of the type specified by the
            type name parameter.
            </returns>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.UpdateRequest">
            <summary>
            Message sent to the Silverlight
            WCF data portal.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.UpdateRequest.ObjectData">
            <summary>
            Serialized object data.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.UpdateRequest.Principal">
            <summary>
            Serialized principal object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.UpdateRequest.GlobalContext">
            <summary>
            Serialized global context object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.UpdateRequest.ClientContext">
            <summary>
            Serialized client context object.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.Silverlight.SilverlightUpdateRequest">
            <summary>
            Class that will be used to execute an Update request from a Silverlight client.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.Silverlight.SilverlightUpdateRequest.#ctor(System.Object,System.Security.Principal.IPrincipal,Csla.Core.ContextDictionary,Csla.Core.ContextDictionary)">
            <summary>
            New instance of criteria object
            </summary>
            <param name="objectToUpdate">Business object that will be updated.</param>
            <param name="principal">Principal that will be set for the request</param>
            <param name="globalContext">Global context object.</param>
            <param name="clientContext">Client context object.</param>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightUpdateRequest.ObjectToUpdate">
            <summary>
            Business object that will be updated.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightUpdateRequest.Principal">
            <summary>
            Principal that will be set for the request
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightUpdateRequest.GlobalContext">
            <summary>
            Global context object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.Silverlight.SilverlightUpdateRequest.ClientContext">
            <summary>
            Client context object.
            </summary>
        </member>
        <member name="T:Csla.DataPortalResult`1">
            <summary>
            DataPortalResult defines the results of DataPortal operation.
            It contains object that was received from the server, 
            an error (if occurred) and userState - user defined information
            that was passed into data portal on initial request
            </summary>
            <typeparam name="T">Type of object that DataPortal received</typeparam>
        </member>
        <member name="M:Csla.DataPortalResult`1.#ctor(`0,System.Exception,System.Object)">
            <summary>
            Create new instance of data portal result
            </summary>
            <param name="obj">
            Object that DataPortal received as a result of current operation
            </param>
            <param name="ex">
            Error that occurred during the DataPotal call.
            This will be null if no errors occurred.
            </param>
            <param name="userState">
            User defined information
            that was passed into data portal on initial request
            </param>
        </member>
        <member name="P:Csla.DataPortalResult`1.Object">
            <summary>
            Object that DataPortal received as a result of current operation
            </summary>
        </member>
        <member name="P:Csla.DataPortalResult`1.Error">
            <summary>
            Error that occurred during the DataPotal call.
            This will be null if no errors occurred.
            </summary>
        </member>
        <member name="P:Csla.DataPortalResult`1.UserState">
            <summary>
            User defined information
            that was passed into data portal on initial request
            </summary>
        </member>
        <member name="T:Csla.Core.FieldManager.FieldDataManager">
            <summary>
            Manages properties and property data for
            a business object.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.SetPropertyList(System.Type)">
            <summary>
            Called when parent object is deserialized to
            restore property list.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.SetParent(Csla.Core.BusinessBase)">
            <summary>
            Called by parent to set the back-reference.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.GetRegisteredProperties">
            <summary>
            Returns a copy of the property list for
            the business object. Returns
            null if there are no properties registered
            for this object.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.GetFieldData(Csla.Core.IPropertyInfo)">
            <summary>
            Gets the <see cref="T:Csla.Core.FieldManager.IFieldData"/> object
            for a specific field.
            </summary>
            <param name="prop">
            The property corresponding to the field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.SetFieldData(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Sets the value for a specific field.
            </summary>
            <param name="prop">
            The property corresponding to the field.
            </param>
            <param name="value">
            Value to store for field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.SetFieldData``1(Csla.Core.IPropertyInfo,``0)">
            <summary>
            Sets the value for a specific field.
            </summary>
            <typeparam name="P">
            Type of field value.
            </typeparam>
            <param name="prop">
            The property corresponding to the field.
            </param>
            <param name="value">
            Value to store for field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.LoadFieldData(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Sets the value for a specific field without
            marking the field as dirty.
            </summary>
            <param name="prop">
            The property corresponding to the field.
            </param>
            <param name="value">
            Value to store for field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.LoadFieldData``1(Csla.Core.IPropertyInfo,``0)">
            <summary>
            Sets the value for a specific field without
            marking the field as dirty.
            </summary>
            <typeparam name="P">
            Type of field value.
            </typeparam>
            <param name="prop">
            The property corresponding to the field.
            </param>
            <param name="value">
            Value to store for field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.RemoveField(Csla.Core.IPropertyInfo)">
            <summary>
            Removes the value for a specific field.
            The <see cref="T:Csla.Core.FieldManager.IFieldData"/> object is
            not removed, only the contained field value.
            </summary>
            <param name="prop">
            The property corresponding to the field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.FieldExists(Csla.Core.IPropertyInfo)">
            <summary>
            Returns a value indicating whether an
            <see cref="T:Csla.Core.FieldManager.IFieldData"/> entry exists
            for the specified property.
            </summary>
            <param name="propertyInfo">
            The property corresponding to the field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.IsFieldDirty(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a value indicating whether the specified field
            has been changed.
            </summary>
            <param name="propertyInfo">
            The property corresponding to the field.
            </param>
            <returns>True if the field has been changed.</returns>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.IsValid">
            <summary>
            Returns a value indicating whether all
            fields are valid.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.IsDirty">
            <summary>
            Returns a value indicating whether any
            fields are dirty.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.MarkClean">
            <summary>
            Marks all fields as clean
            (not dirty).
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.GetChildren">
            <summary>
            Returns a list of all child objects
            contained in the list of fields.
            </summary>
            <remarks>
            This method returns a list of actual child
            objects, not a list of
            <see cref="T:Csla.Core.FieldManager.IFieldData"/> container objects.
            </remarks>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.UpdateChildren(System.Object[])">
            <summary>
            Invokes the data portal to update
            all child objects contained in 
            the list of fields.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to insert your child object
            references into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to retrieve your child object
            references from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.ForceStaticFieldInit(System.Type)">
            <summary>
            Forces initialization of the static fields declared
            by a type, and any of its base class types.
            </summary>
            <param name="type">Type of object to initialize.</param>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldDataManager.HasFields">
            <summary>
            Gets a value indicating whether there
            are any managed fields available.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldDataManager.EditLevel">
            <summary>
            Gets the current edit level of the object.
            </summary>
        </member>
        <member name="T:Csla.C5.HashBag`1">
            <summary>
            A bag collection based on a hash table of (item,count) pairs. 
            </summary>
        </member>
        <member name="M:Csla.C5.HashBag`1.#ctor">
            <summary>
            Create a hash bag with the deafult item equalityComparer.
            </summary>
        </member>
        <member name="M:Csla.C5.HashBag`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a hash bag with an external item equalityComparer.
            </summary>
            <param name="itemequalityComparer">The external item equalityComparer.</param>
        </member>
        <member name="M:Csla.C5.HashBag`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a hash bag with external item equalityComparer, prescribed initial table size and default fill threshold (66%)
            </summary>
            <param name="capacity">Initial table size (rounded to power of 2, at least 16)</param>
            <param name="itemequalityComparer">The external item equalityComparer</param>
        </member>
        <member name="M:Csla.C5.HashBag`1.#ctor(System.Int32,System.Double,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a hash bag with external item equalityComparer, prescribed initial table size and fill threshold.
            </summary>
            <param name="capacity">Initial table size (rounded to power of 2, at least 16)</param>
            <param name="fill">Fill threshold (valid range 10% to 90%)</param>
            <param name="itemequalityComparer">The external item equalityComparer</param>
        </member>
        <member name="M:Csla.C5.HashBag`1.Contains(`0)">
            <summary>
            Check if an item is in the bag 
            </summary>
            <param name="item">The item to look for</param>
            <returns>True if bag contains item</returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.Find(`0@)">
            <summary>
            Check if an item (collection equal to a given one) is in the bag and
            if so report the actual item object found.
            </summary>
            <param name="item">On entry, the item to look for.
            On exit the item found, if any</param>
            <returns>True if bag contains item</returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.Update(`0)">
            <summary>
            Check if an item (collection equal to a given one) is in the bag and
            if so replace the item object in the bag with the supplied one.
            </summary>
            <param name="item">The item object to update with</param>
            <returns>True if item was found (and updated)</returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.Update(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.FindOrAdd(`0@)">
            <summary>
            Check if an item (collection equal to a given one) is in the bag.
            If found, report the actual item object in the bag,
            else add the supplied one.
            </summary>
            <param name="item">On entry, the item to look for or add.
            On exit the actual object found, if any.</param>
            <returns>True if item was found</returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.UpdateOrAdd(`0)">
            <summary>
            Check if an item (collection equal to a supplied one) is in the bag and
            if so replace the item object in the set with the supplied one; else
            add the supplied one.
            </summary>
            <param name="item">The item to look for and update or add</param>
            <returns>True if item was updated</returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.UpdateOrAdd(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.Remove(`0)">
            <summary>
            Remove one copy af an item from the bag
            </summary>
            <param name="item">The item to remove</param>
            <returns>True if item was (found and) removed </returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.Remove(`0,`0@)">
            <summary>
            Remove one copy of an item from the bag, reporting the actual matching item object.
            </summary>
            <param name="item">The value to remove.</param>
            <param name="removeditem">The removed value.</param>
            <returns>True if item was found.</returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.RemoveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items in a supplied collection from this bag, counting multiplicities.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to remove.</param>
        </member>
        <member name="M:Csla.C5.HashBag`1.Clear">
            <summary>
            Remove all items from the bag, resetting internal table to initial size.
            </summary>
        </member>
        <member name="M:Csla.C5.HashBag`1.RetainAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items *not* in a supplied collection from this bag,
            counting multiplicities.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to retain</param>
        </member>
        <member name="M:Csla.C5.HashBag`1.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if all items in a supplied collection is in this bag
            (counting multiplicities). 
            </summary>
            <param name="items">The items to look for.</param>
            <typeparam name="U"></typeparam>
            <returns>True if all items are found.</returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.ToArray">
            <summary>
            Create an array containing all items in this bag (in enumeration order).
            </summary>
            <returns>The array</returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.ContainsCount(`0)">
            <summary>
            Count the number of times an item is in this set.
            </summary>
            <param name="item">The item to look for.</param>
            <returns>The count</returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.RemoveAllCopies(`0)">
            <summary>
            Remove all copies of item from this set.
            </summary>
            <param name="item">The item to remove</param>
        </member>
        <member name="M:Csla.C5.HashBag`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy the items of this bag to part of an array.
            <exception cref="T:System.ArgumentOutOfRangeException"/> if i is negative.
            <exception cref="T:System.ArgumentException"/> if the array does not have room for the items.
            </summary>
            <param name="array">The array to copy to</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:Csla.C5.HashBag`1.Add(`0)">
            <summary>
            Add an item to this bag.
            </summary>
            <param name="item">The item to add.</param>
            <returns>Always true</returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Add an item to this bag.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Csla.C5.HashBag`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add the elements from another collection with a more specialized item type 
            to this collection. 
            </summary>
            <typeparam name="U">The type of items to add</typeparam>
            <param name="items">The items to add</param>
        </member>
        <member name="M:Csla.C5.HashBag`1.Choose">
            <summary>
            Choose some item of this collection. 
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException">if collection is empty.</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.GetEnumerator">
            <summary>
            Create an enumerator for this bag.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.Clone">
            <summary>
            Make a shallow copy of this HashBag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashBag`1.Check">
            <summary>
            Test internal structure of data (invariants)
            </summary>
            <returns>True if pass</returns>
        </member>
        <member name="P:Csla.C5.HashBag`1.ListenableEvents">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.HashBag`1.ContainsSpeed">
            <summary>
            The complexity of the Contains operation
            </summary>
            <value>Always returns Speed.Constant</value>
        </member>
        <member name="P:Csla.C5.HashBag`1.AllowsDuplicates">
            <summary>
            Report if this is a set collection.
            </summary>
            <value>Always true</value>
        </member>
        <member name="P:Csla.C5.HashBag`1.DuplicatesByCounting">
            <summary>
            By convention this is true for any collection with set semantics.
            </summary>
            <value>True if only one representative of a group of equal items 
            is kept in the collection together with the total count.</value>
        </member>
        <member name="T:Csla.C5.KeyValuePair`2">
            <summary>
            An entry in a dictionary from K to V.
            </summary>
        </member>
        <member name="F:Csla.C5.KeyValuePair`2.Key">
            <summary>
            The key field of the entry
            </summary>
        </member>
        <member name="F:Csla.C5.KeyValuePair`2.Value">
            <summary>
            The value field of the entry
            </summary>
        </member>
        <member name="M:Csla.C5.KeyValuePair`2.#ctor(`0,`1)">
            <summary>
            Create an entry with specified key and value
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Csla.C5.KeyValuePair`2.#ctor(`0)">
            <summary>
            Create an entry with a specified key. The value will be the default value of type <code>V</code>.
            </summary>
            <param name="key">The key</param>
        </member>
        <member name="M:Csla.C5.KeyValuePair`2.ToString">
            <summary>
            Pretty print an entry
            </summary>
            <returns>(key, value)</returns>
        </member>
        <member name="M:Csla.C5.KeyValuePair`2.Equals(System.Object)">
            <summary>
            Check equality of entries. 
            </summary>
            <param name="obj">The other object</param>
            <returns>True if obj is an entry of the same type and has the same key and value</returns>
        </member>
        <member name="M:Csla.C5.KeyValuePair`2.GetHashCode">
            <summary>
            Get the hash code of the pair.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Csla.C5.KeyValuePair`2.Equals(Csla.C5.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.KeyValuePair`2.op_Equality(Csla.C5.KeyValuePair{`0,`1},Csla.C5.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="pair1"></param>
            <param name="pair2"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.KeyValuePair`2.op_Inequality(Csla.C5.KeyValuePair{`0,`1},Csla.C5.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="pair1"></param>
            <param name="pair2"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.KeyValuePair`2.Show(System.Text.StringBuilder,System.Int32@,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="stringbuilder"></param>
            <param name="formatProvider"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.KeyValuePair`2.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.C5.KeyValuePairComparer`2">
            <summary>
            Default comparer for dictionary entries in a sorted dictionary.
            Entry comparisons only look at keys and uses an externally defined comparer for that.
            </summary>
        </member>
        <member name="M:Csla.C5.KeyValuePairComparer`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Create an entry comparer for a item comparer of the keys
            </summary>
            <param name="comparer">Comparer of keys</param>
        </member>
        <member name="M:Csla.C5.KeyValuePairComparer`2.Compare(Csla.C5.KeyValuePair{`0,`1},Csla.C5.KeyValuePair{`0,`1})">
            <summary>
            Compare two entries
            </summary>
            <param name="entry1">First entry</param>
            <param name="entry2">Second entry</param>
            <returns>The result of comparing the keys</returns>
        </member>
        <member name="T:Csla.C5.KeyValuePairEqualityComparer`2">
            <summary>
            Default equalityComparer for dictionary entries.
            Operations only look at keys and uses an externaly defined equalityComparer for that.
            </summary>
        </member>
        <member name="M:Csla.C5.KeyValuePairEqualityComparer`2.#ctor">
            <summary>
            Create an entry equalityComparer using the default equalityComparer for keys
            </summary>
        </member>
        <member name="M:Csla.C5.KeyValuePairEqualityComparer`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create an entry equalityComparer from a specified item equalityComparer for the keys
            </summary>
            <param name="keyequalityComparer">The key equalityComparer</param>
        </member>
        <member name="M:Csla.C5.KeyValuePairEqualityComparer`2.GetHashCode(Csla.C5.KeyValuePair{`0,`1})">
            <summary>
            Get the hash code of the entry
            </summary>
            <param name="entry">The entry</param>
            <returns>The hash code of the key</returns>
        </member>
        <member name="M:Csla.C5.KeyValuePairEqualityComparer`2.Equals(Csla.C5.KeyValuePair{`0,`1},Csla.C5.KeyValuePair{`0,`1})">
            <summary>
            Test two entries for equality
            </summary>
            <param name="entry1">First entry</param>
            <param name="entry2">Second entry</param>
            <returns>True if keys are equal</returns>
        </member>
        <member name="M:Csla.C5.SortedArrayDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a red-black tree dictionary using an external comparer for keys.
            </summary>
            <param name="comparer">The external comparer</param>
        </member>
        <member name="M:Csla.C5.SortedArrayDictionary`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
            <param name="equalityComparer"></param>
        </member>
        <member name="M:Csla.C5.SortedArrayDictionary`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
            <param name="equalityComparer"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:Csla.C5.SortedArrayDictionary`2.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Csla.BusinessListBase`2">
            <summary>
            This is the base class from which most business collections
            or lists will be derived.
            </summary>
            <typeparam name="T">Type of the business object being defined.</typeparam>
            <typeparam name="C">Type of the child objects contained in the list.</typeparam>
        </member>
        <member name="M:Csla.BusinessListBase`2.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.BeginEdit">
            <summary>
            Starts a nested edit on the object.
            </summary>
            <remarks>
            <para>
            When this method is called the object takes a snapshot of
            its current state (the values of its variables). This snapshot
            can be restored by calling <see cref="M:Csla.BusinessListBase`2.CancelEdit"/>
            or committed by calling <see cref="M:Csla.BusinessListBase`2.ApplyEdit"/>.
            </para><para>
            This is a nested operation. Each call to BeginEdit adds a new
            snapshot of the object's state to a stack. You should ensure that 
            for each call to BeginEdit there is a corresponding call to either 
            CancelEdit or ApplyEdit to remove that snapshot from the stack.
            </para><para>
            See Chapters 2 and 3 for details on n-level undo and state stacking.
            </para><para>
            This method triggers the copying of all child object states.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.BusinessListBase`2.CancelEdit">
            <summary>
            Cancels the current edit process, restoring the object's state to
            its previous values.
            </summary>
            <remarks>
            Calling this method causes the most recently taken snapshot of the 
            object's state to be restored. This resets the object's values
            to the point of the last <see cref="M:Csla.BusinessListBase`2.BeginEdit"/>
            call.
            <para>
            This method triggers an undo in all child objects.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.BusinessListBase`2.ApplyEdit">
            <summary>
            Commits the current edit process.
            </summary>
            <remarks>
            Calling this method causes the most recently taken snapshot of the 
            object's state to be discarded, thus committing any changes made
            to the object's state since the last 
            <see cref="M:Csla.BusinessListBase`2.BeginEdit"/> call.
            <para>
            This method triggers an <see cref="M:Csla.Core.BusinessBase.ApplyEdit"/>
             in all child objects.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.BusinessListBase`2.EditChildComplete(Csla.Core.IEditableBusinessObject)">
            <summary>
            Override this method to be notified when a child object's
            <see cref="M:Csla.Core.BusinessBase.ApplyEdit"/> method has
            completed.
            </summary>
            <param name="child">The child object that was edited.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.ContainsDeleted(`1)">
            <summary>
            Returns <see langword="true"/> if the internal deleted list
            contains the specified child object.
            </summary>
            <param name="item">Child object to check.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.Csla#Core#IEditableCollection#RemoveChild(Csla.Core.IEditableBusinessObject)">
            <summary>
            This method is called by a child object when it
            wants to be removed from the collection.
            </summary>
            <param name="child">The child object to remove.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.Csla#Core#IParent#RemoveChild(Csla.Core.IEditableBusinessObject)">
            <summary>
            This method is called by a child object when it
            wants to be removed from the collection.
            </summary>
            <param name="child">The child object to remove.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.InsertItem(System.Int32,`1)">
            <summary>
            Sets the edit level of the child object as it is added.
            </summary>
            <param name="index">Index of the item to insert.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.RemoveItem(System.Int32)">
            <summary>
            Marks the child object for deletion and moves it to
            the collection of deleted objects.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.ClearItems">
            <summary>
            Clears the collection, moving all active
            items to the deleted list.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.SetItem(System.Int32,`1)">
            <summary>
            Replaces the item at the specified index with
            the specified item, first moving the original
            item to the deleted list.
            </summary>
            <param name="index">The zero-based index of the item to replace.</param>
            <param name="item">
            The new value for the item at the specified index. 
            The value can be null for reference types.
            </param>
            <remarks></remarks>
        </member>
        <member name="M:Csla.BusinessListBase`2.Child_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles any PropertyChanged event from 
            a child object and echoes it up as
            a ListChanged event.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.PositionOf(`1)">
            <summary>
            Determines the position of a specific item from the list
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.SearchByExpression(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Iterates through a set of items according to the expression passed to it.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.MarkAsChild">
            <summary>
            Marks the object as being a child object.
            </summary>
            <remarks>
            <para>
            By default all business objects are 'parent' objects. This means
            that they can be directly retrieved and updated into the database.
            </para><para>
            We often also need child objects. These are objects which are contained
            within other objects. For instance, a parent Invoice object will contain
            child LineItem objects.
            </para><para>
            To create a child object, the MarkAsChild method must be called as the
            object is created. Please see Chapter 7 for details on the use of the
            MarkAsChild method.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.BusinessListBase`2.GetClone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>A new object containing the exact data of the original object.</returns>
        </member>
        <member name="M:Csla.BusinessListBase`2.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>A new object containing the exact data of the original object.</returns>
        </member>
        <member name="M:Csla.BusinessListBase`2.OnDeserialized">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.Child_Create">
            <summary>
            Initializes a new instance of the object
            with default values.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.Child_Update(System.Object[])">
            <summary>
            Saves all items in the list, automatically
            performing insert, update or delete operations
            as necessary.
            </summary>
            <param name="parameters">
            Optional parameters passed to child update
            methods.
            </param>
        </member>
        <member name="M:Csla.BusinessListBase`2.Save">
            <summary>
            Saves the object to the database.
            </summary>
            <remarks>
            <para>
            Calling this method starts the save operation, causing the all child
            objects to be inserted, updated or deleted within the database based on the
            each object's current state.
            </para><para>
            All this is contingent on <see cref="P:Csla.BusinessListBase`2.IsDirty"/>. If
            this value is <see langword="false"/>, no data operation occurs. 
            It is also contingent on <see cref="P:Csla.BusinessListBase`2.IsValid"/>. If this value is 
            <see langword="false"/> an exception will be thrown to 
            indicate that the UI attempted to save an invalid object.
            </para><para>
            It is important to note that this method returns a new version of the
            business collection that contains any data updated during the save operation.
            You MUST update all object references to use this new version of the
            business collection in order to have access to the correct object data.
            </para><para>
            You can override this method to add your own custom behaviors to the save
            operation. For instance, you may add some security checks to make sure
            the user can save the object. If all security checks pass, you would then
            invoke the base Save method via <c>MyBase.Save()</c>.
            </para>
            </remarks>
            <returns>A new object containing the saved values.</returns>
        </member>
        <member name="M:Csla.BusinessListBase`2.BeginSave">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.BeginSave(System.Object)">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.BeginSave(System.EventHandler{Csla.Core.SavedEventArgs})">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="handler">
            Method called when the operation is complete.
            </param>
        </member>
        <member name="M:Csla.BusinessListBase`2.BeginSave(System.EventHandler{Csla.Core.SavedEventArgs},System.Object)">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="handler">
            Method called when the operation is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.DataPortal_Create">
            <summary>
            Override this method to load a new business object with default
            values from the database.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.DataPortal_Fetch(System.Object)">
            <summary>
            Override this method to allow retrieval of an existing business
            object based on data in the database.
            </summary>
            <param name="criteria">An object containing criteria values to identify the object.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.DataPortal_Update">
            <summary>
            Override this method to allow update of a business
            object.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.DataPortal_Delete(System.Object)">
            <summary>
            Override this method to allow immediate deletion of a business object.
            </summary>
            <param name="criteria">An object containing criteria values to identify the object.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.Child_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.Child_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.Child_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.OnSaved(`0,System.Exception,System.Object)">
            <summary>
            Raises the <see cref="E:Csla.BusinessListBase`2.Saved"/> event, indicating that the
            object has been saved, and providing a reference
            to the new object instance.
            </summary>
            <param name="newObject">The new object instance.</param>
            <param name="e">Execption that occurred during the operation.</param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.Csla#Core#IEditableCollection#SetParent(Csla.Core.IParent)">
            <summary>
            Used by BusinessListBase as a child object is 
            created to tell the child object about its
            parent.
            </summary>
            <param name="parent">A reference to the parent collection object.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.ToArray">
            <summary>
            Get an array containing all items in the list.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
        </member>
        <member name="M:Csla.BusinessListBase`2.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
        </member>
        <member name="M:Csla.BusinessListBase`2.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to insert child objects
            into the MobileFormatter serialization stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to the current MobileFormatter.
            </param>
        </member>
        <member name="M:Csla.BusinessListBase`2.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to get child objects
            from the MobileFormatter serialization stream.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
            <param name="formatter">
            Reference to the current MobileFormatter.
            </param>
        </member>
        <member name="P:Csla.BusinessListBase`2.Csla#Core#ITrackStatus#IsSelfDirty">
            <summary>
            Gets a value indicating whether this object's data has been changed.
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.IsDirty">
            <summary>
            Gets a value indicating whether this object's data has been changed.
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.IsSelfValid">
            <summary>
            Gets a value indicating whether this object is currently in
            a valid state (has no broken validation rules).
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.IsValid">
            <summary>
            Gets a value indicating whether this object is currently in
            a valid state (has no broken validation rules).
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.IsSavable">
            <summary>
            Returns <see langword="true" /> if this object is both dirty and valid.
            </summary>
            <returns>A value indicating if this object is both dirty and valid.</returns>
        </member>
        <member name="P:Csla.BusinessListBase`2.DeletedList">
            <summary>
            A collection containing all child objects marked
            for deletion.
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.IndexingProvider">
            <summary>
            Allows users of CSLA to override the indexing behavior of BLB
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.EditLevel">
            <summary>
            Returns the current edit level of the object.
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.IsChild">
            <summary>
            Indicates whether this collection object is a child object.
            </summary>
            <returns>True if this is a child object.</returns>
        </member>
        <member name="E:Csla.BusinessListBase`2.Saved">
            <summary>
            Event raised when an object has been saved.
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.Parent">
            <summary>
            Provide access to the parent reference for use
            in child object code.
            </summary>
            <remarks>
            This value will be Nothing for root objects.
            </remarks>
        </member>
        <member name="P:Csla.BusinessListBase`2.IsBusy">
            <summary>
            Gets the busy status for this object and its child objects.
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.ElementType">
            <summary>
            Required for IQueryable - returns the ElementType (maps to C)
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.Expression">
            <summary>
            Last expression used in a linq query
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.Provider">
            <summary>
            Query provider currently being used
            </summary>
        </member>
        <member name="T:Csla.BusinessBase`1">
            <summary>
            This is the base class from which most business objects
            will be derived.
            </summary>
            <remarks>
            <para>
            This class is the core of the CSLA .NET framework. To create
            a business object, inherit from this class.
            </para><para>
            Please refer to 'Expert C# 2008 Business Objects' for
            full details on the use of this base class to create business
            objects.
            </para>
            </remarks>
            <typeparam name="T">Type of the business object being defined.</typeparam>
        </member>
        <member name="M:Csla.BusinessBase`1.GetIdValue">
            <summary>
            Override this method to return a unique identifying
            value for this object.
            </summary>
        </member>
        <member name="M:Csla.BusinessBase`1.ToString">
            <summary>
            Returns a text representation of this object by
            returning the <see cref="M:Csla.BusinessBase`1.GetIdValue"/> value
            in text form.
            </summary>
        </member>
        <member name="M:Csla.BusinessBase`1.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>
            A new object containing the exact data of the original object.
            </returns>
        </member>
        <member name="M:Csla.BusinessBase`1.Save">
            <summary>
            Saves the object to the database.
            </summary>
            <remarks>
            <para>
            Calling this method starts the save operation, causing the object
            to be inserted, updated or deleted within the database based on the
            object's current state.
            </para><para>
            If <see cref="P:Csla.Core.BusinessBase.IsDeleted"/> is <see langword="true"/>
            the object will be deleted. Otherwise, if <see cref="P:Csla.Core.BusinessBase.IsNew"/> 
            is <see langword="true"/> the object will be inserted. 
            Otherwise the object's data will be updated in the database.
            </para><para>
            All this is contingent on <see cref="P:Csla.Core.BusinessBase.IsDirty"/>. If
            this value is <see langword="false"/>, no data operation occurs. 
            It is also contingent on <see cref="P:Csla.Core.BusinessBase.IsValid"/>. 
            If this value is <see langword="false"/> an
            exception will be thrown to indicate that the UI attempted to save an
            invalid object.
            </para><para>
            It is important to note that this method returns a new version of the
            business object that contains any data updated during the save operation.
            You MUST update all object references to use this new version of the
            business object in order to have access to the correct object data.
            </para><para>
            You can override this method to add your own custom behaviors to the save
            operation. For instance, you may add some security checks to make sure
            the user can save the object. If all security checks pass, you would then
            invoke the base Save method via <c>base.Save()</c>.
            </para>
            </remarks>
            <returns>A new object containing the saved values.</returns>
        </member>
        <member name="M:Csla.BusinessBase`1.Save(System.Boolean)">
            <summary>
            Saves the object to the database, forcing
            IsNew to <see langword="false"/> and IsDirty to True.
            </summary>
            <param name="forceUpdate">
            If <see langword="true"/>, triggers overriding IsNew and IsDirty. 
            If <see langword="false"/> then it is the same as calling Save().
            </param>
            <returns>A new object containing the saved values.</returns>
            <remarks>
            This overload is designed for use in web applications
            when implementing the Update method in your 
            data wrapper object.
            </remarks>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave(System.Object)">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave(System.EventHandler{Csla.Core.SavedEventArgs})">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="handler">
            Method called when the operation is complete.
            </param>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave(System.Boolean,System.EventHandler{Csla.Core.SavedEventArgs},System.Object)">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="forceUpdate">
            If <see langword="true"/>, triggers overriding IsNew and IsDirty. 
            If <see langword="false"/> then it is the same as calling Save().
            </param>
            <param name="handler">
            Method called when the operation is complete.
            </param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave(System.Boolean)">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="forceUpdate">
            If <see langword="true"/>, triggers overriding IsNew and IsDirty. 
            If <see langword="false"/> then it is the same as calling Save().
            </param>
            <remarks>
            This overload is designed for use in web applications
            when implementing the Update method in your 
            data wrapper object.
            </remarks>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave(System.Boolean,System.EventHandler{Csla.Core.SavedEventArgs})">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="forceUpdate">
            If <see langword="true"/>, triggers overriding IsNew and IsDirty. 
            If <see langword="false"/> then it is the same as calling Save().
            </param>
            <param name="handler">
            Delegate reference to a callback handler that will
            be invoked when the async operation is complete.
            </param>
            <remarks>
            This overload is designed for use in web applications
            when implementing the Update method in your 
            data wrapper object.
            </remarks>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave(System.EventHandler{Csla.Core.SavedEventArgs},System.Object)">
            <summary>
            Saves the object to the database, forcing
            IsNew to <see langword="false"/> and IsDirty to True.
            </summary>
            <param name="handler">
            Delegate reference to a callback handler that will
            be invoked when the async operation is complete.
            </param>
            <param name="userState">User state data.</param>
            <remarks>
            This overload is designed for use in web applications
            when implementing the Update method in your 
            data wrapper object.
            </remarks>
        </member>
        <member name="M:Csla.BusinessBase`1.OnSaved(`0,System.Exception,System.Object)">
            <summary>
            Raises the Saved event, indicating that the
            object has been saved, and providing a reference
            to the new object instance.
            </summary>
            <param name="newObject">The new object instance.</param>
            <param name="e">Exception that occurred during operation.</param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">
            Type of property.
            </typeparam>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <returns></returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <returns></returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,``0)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <returns></returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,``0,Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="E:Csla.BusinessBase`1.Saved">
            <summary>
            Event raised when an object has been saved.
            </summary>
        </member>
        <member name="T:Csla.Wpf.VisibilityMode">
            <summary>
            Options controlling how the Authorizer
            control alters the visibility of a control
            when read access to the property is not allowed.
            </summary>
        </member>
        <member name="F:Csla.Wpf.VisibilityMode.Collapsed">
            <summary>
            Specifies that the non-readable control
            should be collapsed.
            </summary>
        </member>
        <member name="F:Csla.Wpf.VisibilityMode.Hidden">
            <summary>
            Specifies that the non-readable control
            should be hidden.
            </summary>
        </member>
        <member name="F:Csla.Wpf.VisibilityMode.Ignore">
            <summary>
            Specifies that the visibility of the 
            non-readable control should not be
            altered by the Authorizer control.
            </summary>
        </member>
        <member name="T:Csla.Wpf.ViewModel`1">
            <summary>
            Base class used to create ViewModel objects,
            with pre-existing verbs for use by
            InvokeMethod or Invoke.
            </summary>
            <typeparam name="T">Type of the Model object.</typeparam>
        </member>
        <member name="M:Csla.Wpf.ViewModel`1.Save(System.Object,Csla.Wpf.ExecuteEventArgs)">
            <summary>
            Saves the Model, first committing changes
            if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModel`1.Cancel(System.Object,Csla.Wpf.ExecuteEventArgs)">
            <summary>
            Cancels changes made to the model 
            if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModel`1.AddNew(System.Object,Csla.Wpf.ExecuteEventArgs)">
            <summary>
            Adds a new item to the Model (if it
            is a collection).
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModel`1.Remove(System.Object,Csla.Wpf.ExecuteEventArgs)">
            <summary>
            Removes an item from the Model (if it
            is a collection).
            </summary>
        </member>
        <member name="M:Csla.Wpf.ViewModel`1.Delete(System.Object,Csla.Wpf.ExecuteEventArgs)">
            <summary>
            Marks the Model for deletion (if it is an
            editable root object).
            </summary>
        </member>
        <member name="T:Csla.Windows.BindingSourceRefresh">
            <summary>
            BindingSourceRefresh contains functionality for refreshing the data bound to controls on Host as well as a mechinism for catching data
            binding errors that occur in Host.
            </summary>
            <remarks>Windows Forms extender control that resolves the
            data refresh issue with data bound detail controls
            as discussed in Chapter 5.</remarks>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.#ctor">
            <summary>
            Constructor creates a new BindingSourceRefresh component then initialises all the different sub components.
            </summary>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor creates a new BindingSourceRefresh component, adds the component to the container supplied before initialising all the different sub components.
            </summary>
            <param name="container">The container the component is to be added to.</param>
        </member>
        <member name="F:Csla.Windows.BindingSourceRefresh.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.CanExtend(System.Object)">
            <summary>
            CanExtend() returns true if extendee is a binding source.
            </summary>
            <param name="extendee">The control to be extended.</param>
            <returns>True if the control is a binding source, else false.</returns>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.GetReadValuesOnChange(System.Windows.Forms.BindingSource)">
            <summary>
            GetReadValuesOnChange() gets the value of the custom ReadValuesOnChange extender property added to extended controls.
            property added to extended controls.
            </summary>
            <param name="source">Control being extended.</param>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.SetReadValuesOnChange(System.Windows.Forms.BindingSource,System.Boolean)">
            <summary>
            SetReadValuesOnChange() sets the value of the custom ReadValuesOnChange extender
            property added to extended controls.
            </summary>
            <param name="source">Control being extended.</param>
            <param name="value">New value of property.</param>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.RegisterControlEvents(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            RegisterControlEvents() registers all the relevant events for the container control supplied and also to all child controls
            in the oontainer control.
            </summary>
            <param name="container">The control (including child controls) to have the refresh events registered.</param>
            <param name="register">True to register the events, false to unregister them.</param>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.RegisterBindingEvents(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            RegisterBindingEvents() registers the binding complete event to all data bindings in control.
            </summary>
            <param name="control">The control whose binding complete events are to be registered.</param>
            <param name="register">True to register the events, false to unregister them.</param>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.DataBindings_CollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            DataBindings_CollectionChanged() is the data bindings collection change event for a control.
            DataBindings_CollectionChanged() simply updates our binding events hookins correctly based on the collections
            current state.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.Container_ControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)">
            <summary>
            Container_ControlAdded() is the control add event for a control's control collection.
            Container_ControlAdded() simply registers the relevant controller events for the new control as well as registering
            any required bindings - including those for child controls (based on the controls binding source).
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.Container_ControlRemoved(System.Object,System.Windows.Forms.ControlEventArgs)">
            <summary>
            Container_ControlRemoved() is the control remove event for a control's control collection.
            Container_ControlRemoved() unregisters all events associated with the control - including those for child controls.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.Control_BindingComplete(System.Object,System.Windows.Forms.BindingCompleteEventArgs)">
            <summary>
            Control_BindingComplete() is a event driven routine triggered when one of the control's bindings has been completed.
            Control_BindingComplete() simply validates the result where if the result was a exception then the BindingError
            event is raised, else if the binding was a successful data source update and we are to re-read the value on changed then
            the binding value is reread into the control.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.System#ComponentModel#ISupportInitialize#BeginInit">
            <summary>
            BeginInit() is called when the component is starting to be initialised. BeginInit() simply sets the initialisation flag to true.
            </summary>
        </member>
        <member name="M:Csla.Windows.BindingSourceRefresh.System#ComponentModel#ISupportInitialize#EndInit">
            <summary>
            EndInit() is called when the component has finished being initialised.  EndInt() sets the initialise flag to false then runs
            through registering all the different events that the component needs to hook into in Host.
            </summary>
        </member>
        <member name="E:Csla.Windows.BindingSourceRefresh.BindingError">
            <summary>
            BindingError event is raised when a data binding error occurs due to a exception.
            </summary>
        </member>
        <member name="P:Csla.Windows.BindingSourceRefresh.Host">
            <summary>
            Host gets/sets the component's containing host control (form).
            </summary>
        </member>
        <member name="T:Csla.Windows.BindingErrorEventHandler">
            <summary>
            BindingErrorEventHandler delegates is the event handling definition for handling data binding errors that occurred due to exceptions.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Csla.Windows.BindingErrorEventArgs">
            <summary>
            BindingErrorEventArgs defines the event arguments for reporting a data binding error due to a exception.
            </summary>
        </member>
        <member name="M:Csla.Windows.BindingErrorEventArgs.#ctor(System.Windows.Forms.Binding,System.Exception)">
            <summary>
            Constructor creates a new BindingErrorEventArgs object instance using the information specified.
            </summary>
            <param name="binding">The binding that caused th exception.</param>
            <param name="exception">The exception that caused the error.</param>
        </member>
        <member name="P:Csla.Windows.BindingErrorEventArgs.Exception">
            <summary>
            Exception gets the exception that caused the binding error.
            </summary>
        </member>
        <member name="P:Csla.Windows.BindingErrorEventArgs.Binding">
            <summary>
            Binding gets the binding that caused the exception.
            </summary>
        </member>
        <member name="T:Csla.Web.Design.CslaDataSourceDesigner">
            <summary>
            Implements designer support for CslaDataSource.
            </summary>
        </member>
        <member name="M:Csla.Web.Design.CslaDataSourceDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initialize the designer component.
            </summary>
            <param name="component">The CslaDataSource control to 
            be designed.</param>
        </member>
        <member name="M:Csla.Web.Design.CslaDataSourceDesigner.GetView(System.String)">
            <summary>
            Returns the default view for this designer.
            </summary>
            <param name="viewName">Ignored</param>
            <returns></returns>
            <remarks>
            This designer supports only a "Default" view.
            </remarks>
        </member>
        <member name="M:Csla.Web.Design.CslaDataSourceDesigner.GetViewNames">
            <summary>
            Return a list of available views.
            </summary>
            <remarks>
            This designer supports only a "Default" view.
            </remarks>
        </member>
        <member name="M:Csla.Web.Design.CslaDataSourceDesigner.RefreshSchema(System.Boolean)">
            <summary>
            Refreshes the schema for the data.
            </summary>
            <param name="preferSilent"></param>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Web.Design.CslaDataSourceDesigner.Configure">
            <summary>
            Invoke the design time configuration
            support provided by the control.
            </summary>
        </member>
        <member name="P:Csla.Web.Design.CslaDataSourceDesigner.CanRefreshSchema">
            <summary>
            Get a value indicating whether the control can
            refresh its schema.
            </summary>
        </member>
        <member name="P:Csla.Web.Design.CslaDataSourceDesigner.CanConfigure">
            <summary>
            Get a value indicating whether this control
            supports design time configuration.
            </summary>
        </member>
        <member name="P:Csla.Web.Design.CslaDataSourceDesigner.AllowResize">
            <summary>
            Get a value indicating whether the control can
            be resized.
            </summary>
        </member>
        <member name="P:Csla.Web.Design.CslaDataSourceDesigner.DataSourceControl">
            <summary>
            Get a reference to the CslaDataSource control being
            designed.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.WebServicePortal">
            <summary>
            Exposes server-side DataPortal functionality
            through Web Services (asmx).
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.WebServicePortal.Create(System.Byte[])">
            <summary>
            Create a new business object.
            </summary>
            <param name="requestData">Byte stream containing <see cref="T:Csla.Server.Hosts.WebServicePortal.CreateRequest"/>.</param>
            <returns>Byte stream containing resulting object data.</returns>
        </member>
        <member name="M:Csla.Server.Hosts.WebServicePortal.Fetch(System.Byte[])">
            <summary>
            Get an existing business object.
            </summary>
            <param name="requestData">Byte stream containing <see cref="T:Csla.Server.Hosts.WebServicePortal.FetchRequest"/>.</param>
            <returns>Byte stream containing resulting object data.</returns>
        </member>
        <member name="M:Csla.Server.Hosts.WebServicePortal.Update(System.Byte[])">
            <summary>
            Update a business object.
            </summary>
            <param name="requestData">Byte stream containing <see cref="T:Csla.Server.Hosts.WebServicePortal.UpdateRequest"/>.</param>
            <returns>Byte stream containing resulting object data.</returns>
        </member>
        <member name="M:Csla.Server.Hosts.WebServicePortal.Delete(System.Byte[])">
            <summary>
            Delete a business object.
            </summary>
            <param name="requestData">Byte stream containing <see cref="T:Csla.Server.Hosts.WebServicePortal.DeleteRequest"/>.</param>
            <returns>Byte stream containing resulting object data.</returns>
        </member>
        <member name="T:Csla.Server.Hosts.WebServicePortal.CreateRequest">
            <summary>
            Request message for creating
            a new business object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WebServicePortal.CreateRequest.ObjectType">
            <summary>
            Type of business object to create.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WebServicePortal.CreateRequest.Criteria">
            <summary>
            Criteria object describing business object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WebServicePortal.CreateRequest.Context">
            <summary>
            Data portal context from client.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.WebServicePortal.FetchRequest">
            <summary>
            Request message for retrieving
            an existing business object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WebServicePortal.FetchRequest.ObjectType">
            <summary>
            Type of business object to create.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WebServicePortal.FetchRequest.Criteria">
            <summary>
            Criteria object describing business object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WebServicePortal.FetchRequest.Context">
            <summary>
            Data portal context from client.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.WebServicePortal.UpdateRequest">
            <summary>
            Request message for updating
            a business object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WebServicePortal.UpdateRequest.Object">
            <summary>
            Business object to be updated.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WebServicePortal.UpdateRequest.Context">
            <summary>
            Data portal context from client.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.WebServicePortal.DeleteRequest">
            <summary>
            Request message for deleting
            a business object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WebServicePortal.DeleteRequest.ObjectType">
            <summary>
            Type of object requested.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WebServicePortal.DeleteRequest.Criteria">
            <summary>
            Criteria object describing business object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WebServicePortal.DeleteRequest.Context">
            <summary>
            Data portal context from client.
            </summary>
        </member>
        <member name="T:Csla.Server.Hosts.WcfChannel.DeleteRequest">
            <summary>
            Request message for deleting
            a business object.
            </summary>
        </member>
        <member name="M:Csla.Server.Hosts.WcfChannel.DeleteRequest.#ctor(System.Type,System.Object,Csla.Server.DataPortalContext)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">Data portal context from client.</param>
        </member>
        <member name="P:Csla.Server.Hosts.WcfChannel.DeleteRequest.ObjectType">
            <summary>
            Type being requested.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WcfChannel.DeleteRequest.Criteria">
            <summary>
            Criteria object describing business object.
            </summary>
        </member>
        <member name="P:Csla.Server.Hosts.WcfChannel.DeleteRequest.Context">
            <summary>
            Data portal context from client.
            </summary>
        </member>
        <member name="T:Csla.DataPortalException">
            <summary>
            This exception is returned for any errors occuring
            during the server-side DataPortal invocation.
            </summary>
        </member>
        <member name="M:Csla.DataPortalException.#ctor(System.String,System.Object)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
            <param name="businessObject">The business object
            as it was at the time of the exception.</param>
        </member>
        <member name="M:Csla.DataPortalException.#ctor(System.String,System.Exception,System.Object)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
            <param name="ex">Inner exception.</param>
            <param name="businessObject">The business object
            as it was at the time of the exception.</param>
        </member>
        <member name="M:Csla.DataPortalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the object for serialization.
            </summary>
            <param name="info">Serialiation info object.</param>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="M:Csla.DataPortalException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the object.
            </summary>
            <param name="info">Serialiation info object.</param>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="P:Csla.DataPortalException.BusinessObject">
            <summary>
            Returns a reference to the business object
            from the server-side DataPortal.
            </summary>
            <remarks>
            Remember that this object may be in an invalid
            or undefined state. This is the business object
            (and any child objects) as it existed when the
            exception occured on the server. Thus the object
            state may have been altered by the server and
            may no longer reflect data in the database.
            </remarks>
        </member>
        <member name="P:Csla.DataPortalException.BusinessException">
            <summary>
            Gets the original server-side exception.
            </summary>
            <returns>An exception object.</returns>
            <remarks>
            When an exception occurs in business code behind
            the data portal, it is wrapped in a 
            <see cref="T:Csla.Server.DataPortalException"/>, which 
            is then wrapped in a 
            <see cref="T:Csla.DataPortalException"/>. This property
            unwraps and returns the original exception 
            thrown by the business code on the server.
            </remarks>
        </member>
        <member name="P:Csla.DataPortalException.StackTrace">
            <summary>
            Get the combined stack trace from the server
            and client.
            </summary>
        </member>
        <member name="T:Csla.Core.TypeConverters.SmartDateConverter">
            <summary>
            Converts values to and from a SmartDate.
            </summary>
        </member>
        <member name="M:Csla.Core.TypeConverters.SmartDateConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if a value can be converted
            to a SmartDate.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Core.TypeConverters.SmartDateConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts values to a SmartDate.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Core.TypeConverters.SmartDateConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if a SmartDate can be
            convert to a value.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Core.TypeConverters.SmartDateConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a SmartDate to a value.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Csla.Security.IdentityFactory">
            <summary>
            IdentityFactory is an object in charge of retrieving <see cref="T:Csla.Security.MembershipIdentity.Criteria"/> 
            on the web server and transferring it back to the client.
            </summary>
        </member>
        <member name="M:Csla.Security.IdentityFactory.FetchMembershipIdentity(Csla.Security.MembershipIdentity.Criteria)">
            <summary>
            Fetches MembershipIdentity from the server
            </summary>
            <param name="criteria"><see cref="T:Csla.Security.MembershipIdentity.Criteria"/></param>
            <returns></returns>
        </member>
        <member name="T:Csla.Core.AsyncFactoryDelegate">
            <summary>
            Delegate for an asynchronous business object 
            factory method with n parameters.
            </summary>
            <param name="completed">
            Delegate pointer to callback method.
            </param>
            <param name="parameters">
            Parameters passed to the factory method.
            </param>
        </member>
        <member name="T:Csla.Core.AsyncFactoryDelegate`1">
            <summary>
            Delegate for an asynchronous business object 
            factory method with n parameters.
            </summary>
            <typeparam name="R">
            Type of business object to be created.
            </typeparam>
            <param name="completed">
            Delegate pointer to callback method.
            </param>
        </member>
        <member name="T:Csla.Core.AsyncFactoryDelegate`2">
            <summary>
            Delegate for an asynchronous business object 
            factory method with n parameters.
            </summary>
            <typeparam name="R">
            Type of business object to be created.
            </typeparam>
            <typeparam name="T">Type of argument</typeparam>
            <param name="completed">
            Delegate pointer to callback method.
            </param>
            <param name="arg">Argument to method.</param>
        </member>
        <member name="T:Csla.Core.AsyncFactoryDelegate`3">
            <summary>
            Delegate for an asynchronous business object 
            factory method with n parameters.
            </summary>
            <typeparam name="R">
            Type of business object to be created.
            </typeparam>
            <param name="completed">
            Delegate pointer to callback method.
            </param>
            <typeparam name="T1">Type of argument</typeparam>
            <param name="arg1">Argument to method.</param>
            <typeparam name="T2">Type of argument</typeparam>
            <param name="arg2">Argument to method.</param>
        </member>
        <member name="T:Csla.Core.AsyncFactoryDelegate`4">
            <summary>
            Delegate for an asynchronous business object 
            factory method with n parameters.
            </summary>
            <typeparam name="R">
            Type of business object to be created.
            </typeparam>
            <param name="completed">
            Delegate pointer to callback method.
            </param>
            <typeparam name="T1">Type of argument</typeparam>
            <param name="arg1">Argument to method.</param>
            <typeparam name="T2">Type of argument</typeparam>
            <param name="arg2">Argument to method.</param>
            <typeparam name="T3">Type of argument</typeparam>
            <param name="arg3">Argument to method.</param>
        </member>
        <member name="T:Csla.Core.AsyncFactoryDelegate`5">
            <summary>
            Delegate for an asynchronous business object 
            factory method with n parameters.
            </summary>
            <typeparam name="R">
            Type of business object to be created.
            </typeparam>
            <param name="completed">
            Delegate pointer to callback method.
            </param>
            <typeparam name="T1">Type of argument</typeparam>
            <param name="arg1">Argument to method.</param>
            <typeparam name="T2">Type of argument</typeparam>
            <param name="arg2">Argument to method.</param>
            <typeparam name="T3">Type of argument</typeparam>
            <param name="arg3">Argument to method.</param>
            <typeparam name="T4">Type of argument</typeparam>
            <param name="arg4">Argument to method.</param>
        </member>
        <member name="T:Csla.Core.AsyncFactoryDelegate`6">
            <summary>
            Delegate for an asynchronous business object 
            factory method with n parameters.
            </summary>
            <typeparam name="R">
            Type of business object to be created.
            </typeparam>
            <param name="completed">
            Delegate pointer to callback method.
            </param>
            <typeparam name="T1">Type of argument</typeparam>
            <param name="arg1">Argument to method.</param>
            <typeparam name="T2">Type of argument</typeparam>
            <param name="arg2">Argument to method.</param>
            <typeparam name="T3">Type of argument</typeparam>
            <param name="arg3">Argument to method.</param>
            <typeparam name="T4">Type of argument</typeparam>
            <param name="arg4">Argument to method.</param>
            <typeparam name="T5">Type of argument</typeparam>
            <param name="arg5">Argument to method.</param>
        </member>
        <member name="T:Csla.C5.TestedAttribute">
            <summary>
            A custom attribute to mark methods and properties as being tested 
            sufficiently in the regression test suite.
            </summary>
        </member>
        <member name="F:Csla.C5.TestedAttribute.via">
            <summary>
            Optional reference to test case
            </summary>
        </member>
        <member name="M:Csla.C5.TestedAttribute.ToString">
            <summary>
            Pretty print attribute value
            </summary>
            <returns>"Tested via " + via</returns>
        </member>
        <member name="T:Csla.C5.HashedArrayList`1">
             <summary>
             A list collection based on a plain dynamic array data structure.
             Expansion of the internal array is performed by doubling on demand. 
             The internal array is only shrinked by the Clear method. 
            
             <i>When the FIFO property is set to false this class works fine as a stack of T.
             When the FIFO property is set to true the class will function as a (FIFO) queue
             but very inefficiently, use a LinkedList (<see cref="T:C5.LinkedList`1"/>) instead.</i>
             </summary>
        </member>
        <member name="F:Csla.C5.HashedArrayList`1.isValid">
            <summary>
            Has this list or view not been invalidated by some operation (by someone calling Dispose())
            </summary>
        </member>
        <member name="F:Csla.C5.HashedArrayList`1.underlying">
            <summary>
            The underlying list if we are a view, null else.
            </summary>
        </member>
        <member name="F:Csla.C5.HashedArrayList`1.fIFO">
            <summary>
            The underlying field of the FIFO property
            </summary>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.addtosize(System.Int32)">
            <summary>
            Increment or decrement the private size fields
            </summary>
            <param name="delta">Increment (with sign)</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.expand">
            <summary>
            Double the size of the internal array.
            </summary>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.expand(System.Int32,System.Int32)">
            <summary>
            Expand the internal array, resetting the index of the first unused element.
            </summary>
            <param name="newcapacity">The new capacity (will be rouded upwards to a power of 2).</param>
            <param name="newsize">The new count of </param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.updatecheck">
            <summary>
            Check if it is valid to perform updates and increment stamp if so.
            </summary>
            <exception cref="T:Csla.C5.ViewDisposedException"> If check fails by this list being a disposed view.</exception>
            <exception cref="T:Csla.C5.ReadOnlyCollectionException"> If check fails by this being a read only list.</exception>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.validitycheck">
            <summary>
            Check if we are a view that the underlying list has only been updated through us.
            <para>This method should be called from enumerators etc to guard against 
            modification of the base collection.</para>
            </summary>
            <exception cref="T:Csla.C5.ViewDisposedException"> if check fails.</exception>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.modifycheck(System.Int32)">
            <summary>
            Check that the list has not been updated since a particular time.
            <para>To be used by enumerators and range </para>
            </summary>
            <exception cref="T:Csla.C5.ViewDisposedException"> If check fails by this list being a disposed view.</exception>
            <exception cref="T:Csla.C5.CollectionModifiedException">If the list *has* beeen updated since that  time..</exception>
            <param name="stamp">The stamp indicating the time.</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.indexOf(`0)">
            <summary>
            Internal version of IndexOf without modification checks.
            </summary>
            <param name="item">Item to look for</param>
            <returns>The index of first occurrence</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.lastIndexOf(`0)">
            <summary>
            Internal version of LastIndexOf without modification checks.
            </summary>
            <param name="item">Item to look for</param>
            <returns>The index of last occurrence</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.insert(System.Int32,`0)">
            <summary>
            Internal version of Insert with no modification checks.
            </summary>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> if item already in list.</exception>
            <param name="i">Index to insert at</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.removeAt(System.Int32)">
            <summary>
            Internal version of RemoveAt with no modification checks.
            </summary>
            <param name="i">Index to remove at</param>
            <returns>The removed item</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.fixViewsAfterInsert(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="added">The actual number of inserted nodes</param>
            <param name="realInsertionIndex"></param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.fixViewsBeforeRemove(System.Int32,System.Int32)">
            <summary>
            Fix offsets and sizes of other views before removing an interval from this 
            </summary>
            <param name="start">the start of the interval relative to the array/underlying</param>
            <param name="count"></param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.viewPosition(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="otherOffset"></param>
            <param name="otherSize"></param>
            <returns>The position of View(otherOffset, otherSize) wrt. this view</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.#ctor">
            <summary>
            Create an array list with default item equalityComparer and initial capacity 8 items.
            </summary>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create an array list with external item equalityComparer and initial capacity 8 items.
            </summary>
            <param name="itemequalityComparer">The external item equalityComparer</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.#ctor(System.Int32)">
            <summary>
            Create an array list with default item equalityComparer and prescribed initial capacity.
            </summary>
            <param name="capacity">The prescribed capacity</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create an array list with external item equalityComparer and prescribed initial capacity.
            </summary>
            <param name="capacity">The prescribed capacity</param>
            <param name="itemequalityComparer">The external item equalityComparer</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Insert(System.Int32,`0)">
             <summary>
             Insert an item at a specific index location in this list. 
            </summary>
             <exception cref="T:System.IndexOutOfRangeException"> if index is negative or
             &gt; the size of the collection. </exception>
             <exception cref="T:Csla.C5.DuplicateNotAllowedException"> 
             If the item is already present in the list.</exception>
             <param name="index">The index at which to insert.</param>
             <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Insert(Csla.C5.IList{`0},`0)">
            <summary>
            Insert an item at the end of a compatible view, used as a pointer.
            <para>The <code>pointer</code> must be a view on the same list as
            <code>this</code> and the endpoitn of <code>pointer</code> must be
            a valid insertion point of <code>this</code></para>
            </summary>
            <exception cref="T:Csla.C5.IncompatibleViewException">If <code>pointer</code> 
            is not a view on or the same list as <code>this</code></exception>
            <exception cref="T:System.IndexOutOfRangeException"><b>??????</b> if the endpoint of 
             <code>pointer</code> is not inside <code>this</code></exception>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> if the list has
            <code>AllowsDuplicates==false</code> and the item is 
            already in the list.</exception>
            <param name="pointer"></param>
            <param name="item"></param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.InsertAll``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insert into this list all items from an enumerable collection starting 
            at a particular index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"> if index is negative or
            &gt; the size of the collection.</exception>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> If <code>items</code> 
            contains duplicates or some item already  present in the list.</exception>
            <param name="index">Index to start inserting at</param>
            <param name="items">Items to insert</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.InsertFirst(`0)">
            <summary>
            Insert an item at the front of this list;
            </summary>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException">If the item is already in the list</exception>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.InsertLast(`0)">
            <summary>
            Insert an item at the back of this list.
            </summary>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException">If the item is already in the list</exception>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.FindAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            Create a new list consisting of the items of this list satisfying a 
            certain predicate.
            <para>The new list will be of type HashedArrayList</para>
            </summary>
            <param name="filter">The filter delegate defining the predicate.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Map``1(Csla.C5.Fun{`0,``0})">
            <summary>
            Create a new list consisting of the results of mapping all items of this
            list. The new list will use the default item equalityComparer for the item type V.
            <para>The new list will be of type HashedArrayList</para>
            </summary>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException">If <code>mapper</code>
            creates duplicates</exception>
            <typeparam name="V">The type of items of the new list</typeparam>
            <param name="mapper">The delegate defining the map.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Map``1(Csla.C5.Fun{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create a new list consisting of the results of mapping all items of this
            list. The new list will use a specified item equalityComparer for the item type.
            <para>The new list will be of type HashedArrayList</para>
            </summary>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException">If <code>mapper</code>
            creates duplicates</exception>
            <typeparam name="V">The type of items of the new list</typeparam>
            <param name="mapper">The delegate defining the map.</param>
            <param name="itemequalityComparer">The item equalityComparer to use for the new list</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Remove">
            <summary>
            Remove one item from the list: from the front if <code>FIFO</code>
            is true, else from the back.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.RemoveFirst">
            <summary>
            Remove one item from the fromnt of the list.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.RemoveLast">
            <summary>
            Remove one item from the back of the list.
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.View(System.Int32,System.Int32)">
            <summary>
            Create a list view on this list. 
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the start or count is negative
            or the range does not fit within list.</exception>
            <param name="start">The index in this list of the start of the view.</param>
            <param name="count">The size of the view.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.ViewOf(`0)">
            <summary>
            Create a list view on this list containing the (first) occurrence of a particular item.
            <para>Returns <code>null</code> if the item is not in this list.</para>
            </summary>
            <param name="item">The item to find.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.LastViewOf(`0)">
            <summary>
            Create a list view on this list containing the last occurrence of a particular item. 
            <para>Returns <code>null</code> if the item is not in this list.</para>
            </summary>
            <param name="item">The item to find.</param>
            <returns>The new list view.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Slide(System.Int32)">
            <summary>
            Slide this list view along the underlying list.
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the operation
            would bring either end of the view outside the underlying list.</exception>
            <param name="offset">The signed amount to slide: positive to slide
            towards the end.</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Slide(System.Int32,System.Int32)">
            <summary>
            Slide this list view along the underlying list, changing its size.
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the operation
            would bring either end of the view outside the underlying list.</exception>
            <param name="offset">The signed amount to slide: positive to slide
            towards the end.</param>
            <param name="size">The new size of the view.</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.TrySlide(System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.TrySlide(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:Csla.C5.NotAViewException"> if this list is not a view.</exception>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Span(Csla.C5.IList{`0})">
            <summary>
            
            <para>Returns null if <code>otherView</code> is strictly to the left of this view</para>
            </summary>
            <param name="otherView"></param>
            <exception cref="T:Csla.C5.IncompatibleViewException">If otherView does not have the same underlying list as this</exception>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Reverse">
            <summary>
            Reverst the list so the items are in the opposite sequence order.
            </summary>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.IsSorted">
            <summary>
            Check if this list is sorted according to the default sorting order
            for the item type T, as defined by the <see cref="T:C5.Comparer`1"/> class 
            </summary>
            <exception cref="T:Csla.C5.NotComparableException">if T is not comparable</exception>
            <returns>True if the list is sorted, else false.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.IsSorted(System.Collections.Generic.IComparer{`0})">
            <summary>
            Check if this list is sorted according to a specific sorting order.
            </summary>
            <param name="c">The comparer defining the sorting order.</param>
            <returns>True if the list is sorted, else false.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Sort">
            <summary>
            Sort the items of the list according to the default sorting order
            for the item type T, as defined by the Comparer[T] class 
            (<see cref="T:C5.Comparer`1"/>).
            </summary>
            <exception cref="T:System.InvalidOperationException">if T is not comparable</exception>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort the items of the list according to a specific sorting order.
            </summary>
            <param name="comparer">The comparer defining the sorting order.</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Shuffle">
            <summary>
            Randomly shuffle the items of this list. 
            </summary>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Shuffle(System.Random)">
            <summary>
            Shuffle the items of this list according to a specific random source.
            </summary>
            <param name="rnd">The random source.</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.IndexOf(`0)">
            <summary>
            Search for an item in the list going forwrds from the start.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of item from start.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.LastIndexOf(`0)">
            <summary>
            Search for an item in the list going backwords from the end.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of item from the end.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at a specific position of the list.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"> if index is negative or
            &gt;= the size of the collection.</exception>
            <param name="index">The index of the item to remove.</param>
            <returns>The removed item.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.RemoveInterval(System.Int32,System.Int32)">
            <summary>
            Remove all items in an index interval.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If <code>start</code>
            and <code>count</code> does not describe a valid interval in the list</exception> 
            <param name="start">The index of the first item to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.GetUnsequencedHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.UnsequencedEquals(Csla.C5.ICollection{`0})">
            <summary>
            
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Contains(`0)">
            <summary>
            Check if this collection contains (an item equivalent to according to the
            itemequalityComparer) a particular value.
            </summary>
            <param name="item">The value to check for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Find(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the items is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Update(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value. This will only update the first 
            mathching item.
            </summary>
            <param name="item">Value to update.</param>
            <returns>True if the item was found and hence updated.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Update(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.FindOrAdd(`0@)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, return in the ref argument (a
            binary copy of) the actual value found. Else, add the item to the collection.
            </summary>
            <param name="item">The value to look for.</param>
            <returns>True if the item was found (hence not added).</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.UpdateOrAdd(`0)">
            <summary>
            Check if this collection contains an item equivalent according to the
            itemequalityComparer to a particular value. If so, update the item in the collection 
            to with a binary copy of the supplied value. This will only update the first 
            mathching item.
            </summary>
            <param name="item">Value to update.</param>
            <returns>True if the item was found and hence updated.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.UpdateOrAdd(`0,`0@)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="olditem"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Remove(`0)">
            <summary>
            Remove a particular item from this list. The item will be searched 
            for from the end of the list if <code>FIFO == false</code> (the default), 
            else from the start.
            </summary>
            <param name="item">The value to remove.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Remove(`0,`0@)">
            <summary>
            Remove the first copy of a particular item from this collection if found.
            If an item was removed, report a binary copy of the actual item removed in 
            the argument. The item will be searched 
            for from the end of the list if <code>FIFO == false</code> (the default), 
            else from the start.
            </summary>
            <param name="item">The value to remove.</param>
            <param name="removeditem">The removed value.</param>
            <returns>True if the item was found (and removed).</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.RemoveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items in another collection from this one, taking multiplicities into account.
            Matching items will be removed from the front. Current implementation is not optimal.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to remove.</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.RemoveAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Clear">
            <summary>
            Remove all items from this collection, resetting internal array size.
            </summary>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.RetainAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all items not in some other collection from this one, taking multiplicities into account.
            Items are retained front first.  
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items">The items to retain.</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.RetainAll(Csla.C5.Fun{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.ContainsAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if this collection contains all the values in another collection,
            taking multiplicities into account.
            Current implementation is not optimal.
            </summary>
            <param name="items">The </param>
            <typeparam name="U"></typeparam>
            <returns>True if all values in <code>items</code>is in this collection.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.ContainsCount(`0)">
            <summary>
            Count the number of items of the collection equal to a particular value.
            Returns 0 if and only if the value is not in the collection.
            </summary>
            <param name="item">The value to count.</param>
            <returns>The number of copies found.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.UniqueItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.ItemMultiplicities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.RemoveAllCopies(`0)">
            <summary>
            Remove all items equal to a given one.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Check">
            <summary>
            Check the integrity of the internal data structures of this array list.
            </summary>
            <returns>True if check does not fail.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Add(`0)">
            <summary>
            Add an item to end of this list.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add the elements from another collection to this collection.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="items"></param>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Csla#C5#IDirectedEnumerable{T}#Backwards">
            <summary>
            Create a collection containing the same items as this collection, but
            whose enumerator will enumerate the items backwards. The new collection
            will become invalid if the original is modified. Method typicaly used as in
            <code>foreach (T x in coll.Backwards()) {...}</code>
            </summary>
            <returns>The backwards collection.</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.GetEnumerator">
            <summary>
            Create an enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Dispose">
            <summary>
            Invalidate this list. If a view, just invalidate the view. 
            If not a view, invalidate the list and all views on it.
            </summary>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.Clone">
            <summary>
            Make a shallow copy of this HashedArrayList.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.underlyingsize">
            <summary>
            The size of the underlying list.
            </summary>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.ListenableEvents">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.First">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <value>The first item in this list.</value>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.Last">
            <summary>
            </summary>
            <exception cref="T:Csla.C5.NoSuchItemException"> if this list is empty.</exception>
            <value>The last item in this list.</value>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.FIFO">
            <summary>
            Since <code>Add(T item)</code> always add at the end of the list,
            this describes if list has FIFO or LIFO semantics.
            </summary>
            <value>True if the <code>Remove()</code> operation removes from the
            start of the list, false if it removes from the end. The default for a new array list is false.</value>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.Item(System.Int32)">
            <summary>
            On this list, this indexer is read/write.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"> if index is negative or
            &gt;= the size of the collection.</exception>
            <exception cref="T:Csla.C5.DuplicateNotAllowedException"> By the get operation
            if the item already is present somewhere else in the list.</exception>
            <value>The index'th item of this list.</value>
            <param name="index">The index of the item to fetch or store.</param>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.IndexingSpeed">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.Underlying">
            <summary>
            Null if this list is not a view.
            </summary>
            <value>Underlying list for view.</value>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.Offset">
            <summary>
            </summary>
            <value>Offset for this list view or 0 for an underlying list.</value>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.IsValid">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.ContainsSpeed">
            <summary>
            The value is symbolic indicating the type of asymptotic complexity
            in terms of the size of this collection (worst-case or amortized as
            relevant).
            </summary>
            <value>Speed.Linear</value>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.AllowsDuplicates">
            <summary>
            
            </summary>
            <value>True, indicating array list has bag semantics.</value>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.DuplicatesByCounting">
            <summary>
            By convention this is true for any collection with set semantics.
            </summary>
            <value>True if only one representative of a group of equal items 
            is kept in the collection together with the total count.</value>
        </member>
        <member name="P:Csla.C5.HashedArrayList`1.Count">
            <summary>
            
            </summary>
            <value>The number of items in this collection</value>
        </member>
        <member name="T:Csla.C5.HashedArrayList`1.Position">
            <summary>
            During RemoveAll, we need to cache the original endpoint indices of views (??? also for HashedArrayList?)
            </summary>
        </member>
        <member name="T:Csla.C5.HashedArrayList`1.ViewHandler">
            <summary>
            Handle the update of (other) views during a multi-remove operation.
            </summary>
        </member>
        <member name="M:Csla.C5.HashedArrayList`1.ViewHandler.skipEndpoints(System.Int32,System.Int32)">
            <summary>
            This is to be called with realindex pointing to the first node to be removed after a (stretch of) node that was not removed
            </summary>
            <param name="removed"></param>
            <param name="realindex"></param>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
